package EDOM.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_Automatic;
  private ConceptPresentation props_Comment;
  private ConceptPresentation props_Field;
  private ConceptPresentation props_Grade;
  private ConceptPresentation props_Manual;
  private ConceptPresentation props_Model;
  private ConceptPresentation props_Node;
  private ConceptPresentation props_Process;
  private ConceptPresentation props_Review;
  private ConceptPresentation props_ReviewComment;
  private ConceptPresentation props_Subject;
  private ConceptPresentation props_User;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.Automatic:
        if (props_Automatic == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Automatic validation of the comment");
          cpb.presentationByName();
          props_Automatic = cpb.create();
        }
        return props_Automatic;
      case LanguageConceptSwitch.Comment:
        if (props_Comment == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Subject comment");
          cpb.presentationByName();
          props_Comment = cpb.create();
        }
        return props_Comment;
      case LanguageConceptSwitch.Field:
        if (props_Field == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Custom fields");
          cpb.presentationByName();
          props_Field = cpb.create();
        }
        return props_Field;
      case LanguageConceptSwitch.Grade:
        if (props_Grade == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Grade of the review");
          cpb.presentationByName();
          props_Grade = cpb.create();
        }
        return props_Grade;
      case LanguageConceptSwitch.Manual:
        if (props_Manual == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Manual validation of the comment");
          cpb.presentationByName();
          props_Manual = cpb.create();
        }
        return props_Manual;
      case LanguageConceptSwitch.Model:
        if (props_Model == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Entity (Amazon, Publico)");
          cpb.presentationByName();
          props_Model = cpb.create();
        }
        return props_Model;
      case LanguageConceptSwitch.Node:
        if (props_Node == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Node of validation process");
          props_Node = cpb.create();
        }
        return props_Node;
      case LanguageConceptSwitch.Process:
        if (props_Process == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Validation process");
          cpb.presentationByName();
          props_Process = cpb.create();
        }
        return props_Process;
      case LanguageConceptSwitch.Review:
        if (props_Review == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Review of the subject");
          cpb.presentationByName();
          props_Review = cpb.create();
        }
        return props_Review;
      case LanguageConceptSwitch.ReviewComment:
        if (props_ReviewComment == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Abstract class for subject comments or reviews");
          props_ReviewComment = cpb.create();
        }
        return props_ReviewComment;
      case LanguageConceptSwitch.Subject:
        if (props_Subject == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Subject of the application model");
          cpb.presentationByName();
          props_Subject = cpb.create();
        }
        return props_Subject;
      case LanguageConceptSwitch.User:
        if (props_User == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("User of the application model");
          cpb.presentationByName();
          props_User = cpb.create();
        }
        return props_User;
    }
    return null;
  }
}
