package EDOM.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.AbstractIntentionDescriptor;
import jetbrains.mps.openapi.intentions.IntentionFactory;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import java.util.Collection;
import jetbrains.mps.openapi.intentions.IntentionExecutable;
import jetbrains.mps.openapi.intentions.Kind;
import jetbrains.mps.smodel.SNodePointer;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import java.util.Collections;
import jetbrains.mps.intentions.AbstractIntentionExecutable;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.openapi.intentions.IntentionDescriptor;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SContainmentLink;

public final class GeneratePlantUML_Intention extends AbstractIntentionDescriptor implements IntentionFactory {
  private static final Logger LOG = LogManager.getLogger(GeneratePlantUML_Intention.class);
  private Collection<IntentionExecutable> myCachedExecutable;
  public GeneratePlantUML_Intention() {
    super(Kind.NORMAL, false, new SNodePointer("r:d2065d2c-8da5-4244-9e43-2a1e9f2c995c(EDOM.intentions)", "4436135969625081064"));
  }
  @Override
  public String getPresentation() {
    return "GeneratePlantUML";
  }
  @Override
  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    return true;
  }
  @Override
  public boolean isSurroundWith() {
    return false;
  }
  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new IntentionImplementation());
    }
    return myCachedExecutable;
  }
  /*package*/ final class IntentionImplementation extends AbstractIntentionExecutable {
    public IntentionImplementation() {
    }
    @Override
    public String getDescription(final SNode node, final EditorContext editorContext) {
      return "Generate PlantUml";
    }
    @Override
    public void execute(final SNode node, final EditorContext editorContext) {
      String res = " ";
      res = res + "@startuml\n";
      SPropertyOperations.assign(node, PROPS.name$MnvL, SPropertyOperations.getString(node, PROPS.name$MnvL) + "A");
      for (SNode node2 : SLinkOperations.getChildren(node, LINKS.subject$Pb$g)) {
        res = res + "class " + SPropertyOperations.getString(node2, PROPS.name$MnvL) + "\n";
      }
      res = res + "@enduml";
      if (LOG.isInfoEnabled()) {
        LOG.info(res);
      }
    }
    @Override
    public IntentionDescriptor getDescriptor() {
      return GeneratePlantUML_Intention.this;
    }
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink subject$Pb$g = MetaAdapterFactory.getContainmentLink(0x93a85216feee47faL, 0xa39e2320d26e7cceL, 0x214447fe6193d5b9L, 0x214447fe6194630aL, "subject");
  }
}
