package EDOM.textGen;

/*Generated by MPS */

import jetbrains.mps.text.rt.TextGenDescriptorBase;
import jetbrains.mps.text.rt.TextGenContext;
import jetbrains.mps.text.impl.TextGenSupport;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SConcept;

public class Model_TextGen extends TextGenDescriptorBase {
  @Override
  public void generateText(final TextGenContext ctx) {
    final TextGenSupport tgs = new TextGenSupport(ctx);
    tgs.append("@startuml\n");
    for (SNode subject : ListSequence.fromList(SLinkOperations.getChildren(ctx.getPrimaryInput(), LINKS.subject$Pb$g))) {
      tgs.append(SPropertyOperations.getString(ctx.getPrimaryInput(), PROPS.name$MnvL) + " --> " + SPropertyOperations.getString(subject, PROPS.name$MnvL) + " : subject\n");
      for (SNode attribute : ListSequence.fromList(SLinkOperations.getChildren(subject, LINKS.attribute$ZtzL))) {
        tgs.append(SPropertyOperations.getString(subject, PROPS.name$MnvL) + " --> " + SPropertyOperations.getString(attribute, PROPS.name$MnvL) + " : field\n");
        tgs.append("class " + SPropertyOperations.getString(attribute, PROPS.name$MnvL) + " { \n type : " + SPropertyOperations.getString(attribute, PROPS.type$$_Zl) + "\n}\n");
      }
      for (SNode publisher : ListSequence.fromList(SLinkOperations.getChildren(subject, LINKS.user$Zu1N))) {
        tgs.append(SPropertyOperations.getString(subject, PROPS.name$MnvL) + " --> " + SPropertyOperations.getString(publisher, PROPS.name$MnvL) + " : publisher\n");
      }
      for (SNode comment : ListSequence.fromList(SNodeOperations.getNodeDescendants(subject, CONCEPTS.Comment$Y1, false, new SAbstractConcept[]{}))) {
        tgs.append(SPropertyOperations.getString(subject, PROPS.name$MnvL) + " --> " + SPropertyOperations.getString(comment, PROPS.name$MnvL) + " : comment\n");
        tgs.append("class " + SPropertyOperations.getString(comment, PROPS.name$MnvL) + " { \n hasReply : " + SPropertyOperations.getBoolean(comment, PROPS.hasReply$Tgsu) + "\n}\n");
        for (SNode process : ListSequence.fromList(SLinkOperations.getChildren(comment, LINKS.process$RRiw))) {
          tgs.append(SPropertyOperations.getString(comment, PROPS.name$MnvL) + " --> " + SPropertyOperations.getString(process, PROPS.name$MnvL) + " : process\n");
          String finalString = "APPROVED";
          for (SNode automatic : ListSequence.fromList(SNodeOperations.getNodeDescendants(process, CONCEPTS.Automatic$A1, false, new SAbstractConcept[]{}))) {
            tgs.append(SPropertyOperations.getString(process, PROPS.name$MnvL) + " --> " + SPropertyOperations.getString(automatic, PROPS.name$MnvL) + " : automatic\n");
            tgs.append("class " + SPropertyOperations.getString(automatic, PROPS.name$MnvL) + " { \n validation : " + SPropertyOperations.getString(automatic, PROPS.isAccepted$AH2N) + "\n}\n");
            if (SPropertyOperations.getString(automatic, PROPS.isAccepted$AH2N).equals("REJECTED")) {
              finalString = "REJECTED";
            }
          }
          for (SNode manual : ListSequence.fromList(SNodeOperations.getNodeDescendants(process, CONCEPTS.Manual$_y, false, new SAbstractConcept[]{}))) {
            tgs.append(SPropertyOperations.getString(process, PROPS.name$MnvL) + " --> " + SPropertyOperations.getString(manual, PROPS.name$MnvL) + " : manual\n");
            tgs.append("class " + SPropertyOperations.getString(manual, PROPS.name$MnvL) + " { \n validation : " + SPropertyOperations.getString(manual, PROPS.isAccepted$AH2N) + "\n}\n");
            if (SPropertyOperations.getString(manual, PROPS.isAccepted$AH2N).equals("REJECTED")) {
              finalString = "REJECTED";
            }
          }
          for (SNode automatic : ListSequence.fromList(SNodeOperations.getNodeDescendants(process, CONCEPTS.Automatic$A1, false, new SAbstractConcept[]{}))) {
            tgs.append(SPropertyOperations.getString(automatic, PROPS.name$MnvL) + " --> " + finalString + " : finalProcess\n");
          }
          for (SNode manual : ListSequence.fromList(SNodeOperations.getNodeDescendants(process, CONCEPTS.Manual$_y, false, new SAbstractConcept[]{}))) {
            tgs.append(SPropertyOperations.getString(manual, PROPS.name$MnvL) + " --> " + finalString + " : finalProcess\n");
          }
        }
      }
      for (SNode review : ListSequence.fromList(SNodeOperations.getNodeDescendants(subject, CONCEPTS.Review$6G, false, new SAbstractConcept[]{}))) {
        tgs.append(SPropertyOperations.getString(subject, PROPS.name$MnvL) + " --> " + SPropertyOperations.getString(review, PROPS.name$MnvL) + " : review\n");
        tgs.append("class " + SPropertyOperations.getString(review, PROPS.name$MnvL) + " { \n minRate : " + SPropertyOperations.getInteger(review, PROPS.minRate$ZUbl) + "\n maxRate : " + SPropertyOperations.getInteger(review, PROPS.maxRate$ZOLY) + "\n}\n");
        for (SNode grade : ListSequence.fromList(SLinkOperations.getChildren(review, LINKS.grade$R6q3))) {
          tgs.append(SPropertyOperations.getString(review, PROPS.name$MnvL) + " --> " + SPropertyOperations.getString(grade, PROPS.name$MnvL).replaceAll(" ", "_") + " : grade\n");
        }
        tgs.append(SPropertyOperations.getString(review, PROPS.name$MnvL) + " --> " + SPropertyOperations.getString(SLinkOperations.getTarget(review, LINKS.commentator$exx0), PROPS.name$MnvL) + " : commentator\n");
      }
    }
    tgs.append("@enduml");
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
    /*package*/ static final SProperty type$$_Zl = MetaAdapterFactory.getProperty(0x93a85216feee47faL, 0xa39e2320d26e7cceL, 0x214447fe61952dafL, 0x214447fe61952db2L, "type");
    /*package*/ static final SProperty hasReply$Tgsu = MetaAdapterFactory.getProperty(0x93a85216feee47faL, 0xa39e2320d26e7cceL, 0x4dd8eed996c07227L, 0x4dd8eed996c07228L, "hasReply");
    /*package*/ static final SProperty isAccepted$AH2N = MetaAdapterFactory.getProperty(0x93a85216feee47faL, 0xa39e2320d26e7cceL, 0x2c8dc50d8beafcfeL, 0x4f16d40980baa2dbL, "isAccepted");
    /*package*/ static final SProperty minRate$ZUbl = MetaAdapterFactory.getProperty(0x93a85216feee47faL, 0xa39e2320d26e7cceL, 0x214447fe61929ccfL, 0x214447fe61929cd2L, "minRate");
    /*package*/ static final SProperty maxRate$ZOLY = MetaAdapterFactory.getProperty(0x93a85216feee47faL, 0xa39e2320d26e7cceL, 0x214447fe61929ccfL, 0x214447fe61929cd0L, "maxRate");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink attribute$ZtzL = MetaAdapterFactory.getContainmentLink(0x93a85216feee47faL, 0xa39e2320d26e7cceL, 0x214447fe61929cbbL, 0x214447fe61952db8L, "attribute");
    /*package*/ static final SContainmentLink user$Zu1N = MetaAdapterFactory.getContainmentLink(0x93a85216feee47faL, 0xa39e2320d26e7cceL, 0x214447fe61929cbbL, 0x214447fe61952dbaL, "user");
    /*package*/ static final SContainmentLink process$RRiw = MetaAdapterFactory.getContainmentLink(0x93a85216feee47faL, 0xa39e2320d26e7cceL, 0x4dd8eed996c07227L, 0x2c8dc50d8beafd09L, "process");
    /*package*/ static final SContainmentLink grade$R6q3 = MetaAdapterFactory.getContainmentLink(0x93a85216feee47faL, 0xa39e2320d26e7cceL, 0x214447fe61929ccfL, 0x4aaec45b1527de8eL, "grade");
    /*package*/ static final SContainmentLink commentator$exx0 = MetaAdapterFactory.getContainmentLink(0x93a85216feee47faL, 0xa39e2320d26e7cceL, 0x214447fe61954b3aL, 0x214447fe61954b3dL, "commentator");
    /*package*/ static final SContainmentLink subject$Pb$g = MetaAdapterFactory.getContainmentLink(0x93a85216feee47faL, 0xa39e2320d26e7cceL, 0x214447fe6193d5b9L, 0x214447fe6194630aL, "subject");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept Automatic$A1 = MetaAdapterFactory.getConcept(0x93a85216feee47faL, 0xa39e2320d26e7cceL, 0x2c8dc50d8beafd06L, "EDOM.structure.Automatic");
    /*package*/ static final SConcept Manual$_y = MetaAdapterFactory.getConcept(0x93a85216feee47faL, 0xa39e2320d26e7cceL, 0x2c8dc50d8beafd05L, "EDOM.structure.Manual");
    /*package*/ static final SConcept Comment$Y1 = MetaAdapterFactory.getConcept(0x93a85216feee47faL, 0xa39e2320d26e7cceL, 0x4dd8eed996c07227L, "EDOM.structure.Comment");
    /*package*/ static final SConcept Review$6G = MetaAdapterFactory.getConcept(0x93a85216feee47faL, 0xa39e2320d26e7cceL, 0x214447fe61929ccfL, "EDOM.structure.Review");
  }
}
