//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
using DslDiagrams = global::Microsoft.VisualStudio.Modeling.Diagrams;

[module: global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Scope = "type", Target = "isep.edom.gorgeous.gorgeousDiagram")]

namespace isep.edom.gorgeous
{
	/// <summary>
	/// DomainClass gorgeousDiagram
	/// Description for isep.edom.gorgeous.gorgeousDiagram
	/// </summary>
	[DslDesign::DisplayNameResource("isep.edom.gorgeous.gorgeousDiagram.DisplayName", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("isep.edom.gorgeous.gorgeousDiagram.Description", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::isep.edom.gorgeous.gorgeousDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("7839e501-8474-4898-993e-108ddc4bdacf")]
	public partial class gorgeousDiagram : DslDiagrams::Diagram
	{
		#region Diagram boilerplate
		private static DslDiagrams::StyleSet classStyleSet;
		private static global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields;
		/// <summary>
		/// Per-class style set for this shape.
		/// </summary>
		protected override DslDiagrams::StyleSet ClassStyleSet
		{
			get
			{
				if (classStyleSet == null)
				{
					classStyleSet = CreateClassStyleSet();
				}
				return classStyleSet;
			}
		}
		
		/// <summary>
		/// Per-class ShapeFields for this shape
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::ShapeField> ShapeFields
		{
			get
			{
				if (shapeFields == null)
				{
					shapeFields = CreateShapeFields();
				}
				return shapeFields;
			}
		}
		#endregion
		#region Toolbox filters
		private static global::System.ComponentModel.ToolboxItemFilterAttribute[] toolboxFilters = new global::System.ComponentModel.ToolboxItemFilterAttribute[] {
					new global::System.ComponentModel.ToolboxItemFilterAttribute(global::isep.edom.gorgeous.gorgeousToolboxHelperBase.ToolboxFilterString, global::System.ComponentModel.ToolboxItemFilterType.Require) };
		
		/// <summary>
		/// Toolbox item filter attributes for this diagram.
		/// </summary>
		public override global::System.Collections.ICollection TargetToolboxItemFilterAttributes
		{
			get
			{
				return toolboxFilters;
			}
		}
		#endregion
		#region Auto-placement
		/// <summary>
		/// Indicate that child shapes should added through view fixup should be placed automatically.
		/// </summary>
		public override bool ShouldAutoPlaceChildShapes
		{
			get
			{
				return true;
			}
		}
		#endregion
		#region Shape mapping
		/// <summary>
		/// Called during view fixup to ask the parent whether a shape should be created for the given child element.
		/// </summary>
		/// <remarks>
		/// Always return true, since we assume there is only one diagram per model file for DSL scenarios.
		/// </remarks>
		protected override bool ShouldAddShapeForElement(DslModeling::ModelElement element)
		{
			return true;
		}
		
		/// <summary>
		/// Called during view fixup to configure the given child element, after it has been created.
		/// </summary>
		/// <remarks>
		/// Custom code for choosing the shapes attached to either end of a connector is called from here.
		/// </remarks>
		protected override void OnChildConfiguring(DslDiagrams::ShapeElement child, bool createdDuringViewFixup)
		{
			DslDiagrams::NodeShape sourceShape;
			DslDiagrams::NodeShape targetShape;
			DslDiagrams::BinaryLinkShape connector = child as DslDiagrams::BinaryLinkShape;
			if(connector == null)
			{
				base.OnChildConfiguring(child, createdDuringViewFixup);
				return;
			}
			this.GetSourceAndTargetForConnector(connector, out sourceShape, out targetShape);
			
			global::System.Diagnostics.Debug.Assert(sourceShape != null && targetShape != null, "Unable to find source and target shapes for connector.");
			connector.Connect(sourceShape, targetShape);
		}
		
		/// <summary>
		/// helper method to find the shapes for either end of a connector, including calling the user's custom code
		/// </summary>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		internal void GetSourceAndTargetForConnector(DslDiagrams::BinaryLinkShape connector, out DslDiagrams::NodeShape sourceShape, out DslDiagrams::NodeShape targetShape)
		{
			sourceShape = null;
			targetShape = null;
			
			if (sourceShape == null || targetShape == null)
			{
				DslDiagrams::NodeShape[] endShapes = GetEndShapesForConnector(connector);
				if(sourceShape == null)
				{
					sourceShape = endShapes[0];
				}
				if(targetShape == null)
				{
					targetShape = endShapes[1];
				}
			}
		}
		
		/// <summary>
		/// Helper method to find shapes for either end of a connector by looking for shapes associated with either end of the relationship mapped to the connector.
		/// </summary>
		private DslDiagrams::NodeShape[] GetEndShapesForConnector(DslDiagrams::BinaryLinkShape connector)
		{
			DslModeling::ElementLink link = connector.ModelElement as DslModeling::ElementLink;
			DslDiagrams::NodeShape sourceShape = null, targetShape = null;
			if (link != null)
			{
				global::System.Collections.ObjectModel.ReadOnlyCollection<DslModeling::ModelElement> linkedElements = link.LinkedElements;
				if (linkedElements.Count == 2)
				{
					DslDiagrams::Diagram currentDiagram = this.Diagram;
					DslModeling::LinkedElementCollection<DslDiagrams::PresentationElement> presentationElements = DslDiagrams::PresentationViewsSubject.GetPresentation(linkedElements[0]);
					foreach (DslDiagrams::PresentationElement presentationElement in presentationElements)
					{
						DslDiagrams::NodeShape shape = presentationElement as DslDiagrams::NodeShape;
						if (shape != null && shape.Diagram == currentDiagram)
						{
							sourceShape = shape;
							break;
						}
					}
					
					presentationElements = DslDiagrams::PresentationViewsSubject.GetPresentation(linkedElements[1]);
					foreach (DslDiagrams::PresentationElement presentationElement in presentationElements)
					{
						DslDiagrams::NodeShape shape = presentationElement as DslDiagrams::NodeShape;
						if (shape != null && shape.Diagram == currentDiagram)
						{
							targetShape = shape;
							break;
						}
					}
		
				}
			}
			
			return new DslDiagrams::NodeShape[] { sourceShape, targetShape };
		}
		
		/// <summary>
		/// Creates a new shape for the given model element as part of view fixup
		/// </summary>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily", Justification = "Generated code.")]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated code.")]
		protected override DslDiagrams::ShapeElement CreateChildShape(DslModeling::ModelElement element)
		{
			if(element is global::isep.edom.gorgeous.User)
			{
				global::isep.edom.gorgeous.UserShape newShape = new global::isep.edom.gorgeous.UserShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::isep.edom.gorgeous.Subject)
			{
				global::isep.edom.gorgeous.SubjectShape newShape = new global::isep.edom.gorgeous.SubjectShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::isep.edom.gorgeous.Field)
			{
				global::isep.edom.gorgeous.FieldShape newShape = new global::isep.edom.gorgeous.FieldShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::isep.edom.gorgeous.Review)
			{
				global::isep.edom.gorgeous.ReviewShape newShape = new global::isep.edom.gorgeous.ReviewShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::isep.edom.gorgeous.Comment)
			{
				global::isep.edom.gorgeous.CommentShape newShape = new global::isep.edom.gorgeous.CommentShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::isep.edom.gorgeous.ReviewComment)
			{
				global::isep.edom.gorgeous.RevComShape newShape = new global::isep.edom.gorgeous.RevComShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::isep.edom.gorgeous.Node)
			{
				global::isep.edom.gorgeous.NodeShape newShape = new global::isep.edom.gorgeous.NodeShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::isep.edom.gorgeous.Process)
			{
				global::isep.edom.gorgeous.ProcessShape newShape = new global::isep.edom.gorgeous.ProcessShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::isep.edom.gorgeous.Automatic)
			{
				global::isep.edom.gorgeous.AuMaShape newShape = new global::isep.edom.gorgeous.AuMaShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::isep.edom.gorgeous.Manual)
			{
				global::isep.edom.gorgeous.AuMaShape newShape = new global::isep.edom.gorgeous.AuMaShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::isep.edom.gorgeous.ReviewReferênciasUser)
			{
				global::isep.edom.gorgeous.ByConnector newShape = new global::isep.edom.gorgeous.ByConnector(this.Partition);
				return newShape;
			}
			if(element is global::isep.edom.gorgeous.CommentReferênciasUser)
			{
				global::isep.edom.gorgeous.ByConnector newShape = new global::isep.edom.gorgeous.ByConnector(this.Partition);
				return newShape;
			}
			if(element is global::isep.edom.gorgeous.UserReferênciasField)
			{
				global::isep.edom.gorgeous.HasConnector newShape = new global::isep.edom.gorgeous.HasConnector(this.Partition);
				return newShape;
			}
			if(element is global::isep.edom.gorgeous.SubjectReferênciasUser)
			{
				global::isep.edom.gorgeous.ByConnector newShape = new global::isep.edom.gorgeous.ByConnector(this.Partition);
				return newShape;
			}
			if(element is global::isep.edom.gorgeous.ReviewReferênciasField)
			{
				global::isep.edom.gorgeous.HasConnector newShape = new global::isep.edom.gorgeous.HasConnector(this.Partition);
				return newShape;
			}
			if(element is global::isep.edom.gorgeous.CommentReferênciasField)
			{
				global::isep.edom.gorgeous.HasConnector newShape = new global::isep.edom.gorgeous.HasConnector(this.Partition);
				return newShape;
			}
			if(element is global::isep.edom.gorgeous.CommentReferênciasDestinoComment)
			{
				global::isep.edom.gorgeous.HasConnector newShape = new global::isep.edom.gorgeous.HasConnector(this.Partition);
				return newShape;
			}
			if(element is global::isep.edom.gorgeous.SubjectReferênciasField)
			{
				global::isep.edom.gorgeous.HasConnector newShape = new global::isep.edom.gorgeous.HasConnector(this.Partition);
				return newShape;
			}
			if(element is global::isep.edom.gorgeous.SubjectReferênciasReviewComment)
			{
				global::isep.edom.gorgeous.HasConnector newShape = new global::isep.edom.gorgeous.HasConnector(this.Partition);
				return newShape;
			}
			if(element is global::isep.edom.gorgeous.ReviewCommentReferênciasField)
			{
				global::isep.edom.gorgeous.HasConnector newShape = new global::isep.edom.gorgeous.HasConnector(this.Partition);
				return newShape;
			}
			if(element is global::isep.edom.gorgeous.ReviewReferênciasReviewComment)
			{
				global::isep.edom.gorgeous.ExtendConnector newShape = new global::isep.edom.gorgeous.ExtendConnector(this.Partition);
				return newShape;
			}
			if(element is global::isep.edom.gorgeous.CommentReferênciasReviewComment)
			{
				global::isep.edom.gorgeous.ExtendConnector newShape = new global::isep.edom.gorgeous.ExtendConnector(this.Partition);
				return newShape;
			}
			if(element is global::isep.edom.gorgeous.CommentReferênciasProcess)
			{
				global::isep.edom.gorgeous.HasConnector newShape = new global::isep.edom.gorgeous.HasConnector(this.Partition);
				return newShape;
			}
			if(element is global::isep.edom.gorgeous.ProcessReferênciasNode)
			{
				global::isep.edom.gorgeous.HasConnector newShape = new global::isep.edom.gorgeous.HasConnector(this.Partition);
				return newShape;
			}
			if(element is global::isep.edom.gorgeous.NodeReferênciasField)
			{
				global::isep.edom.gorgeous.HasConnector newShape = new global::isep.edom.gorgeous.HasConnector(this.Partition);
				return newShape;
			}
			if(element is global::isep.edom.gorgeous.AutomaticReferênciasNode)
			{
				global::isep.edom.gorgeous.ExtendConnector newShape = new global::isep.edom.gorgeous.ExtendConnector(this.Partition);
				return newShape;
			}
			if(element is global::isep.edom.gorgeous.ManualReferênciasNode)
			{
				global::isep.edom.gorgeous.ExtendConnector newShape = new global::isep.edom.gorgeous.ExtendConnector(this.Partition);
				return newShape;
			}
			return base.CreateChildShape(element);
		}
		#endregion
		#region Decorator mapping
		/// <summary>
		/// Initialize shape decorator mappings.  This is done here rather than in individual shapes because decorator maps
		/// are defined per diagram type rather than per shape type.
		/// </summary>
		protected override void InitializeShapeFields(global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields)
		{
			base.InitializeShapeFields(shapeFields);
			global::isep.edom.gorgeous.UserShape.DecoratorsInitialized += UserShapeDecoratorMap.OnDecoratorsInitialized;
			global::isep.edom.gorgeous.SubjectShape.DecoratorsInitialized += SubjectShapeDecoratorMap.OnDecoratorsInitialized;
			global::isep.edom.gorgeous.FieldShape.DecoratorsInitialized += FieldShapeDecoratorMap.OnDecoratorsInitialized;
			global::isep.edom.gorgeous.ReviewShape.DecoratorsInitialized += ReviewShapeDecoratorMap.OnDecoratorsInitialized;
			global::isep.edom.gorgeous.CommentShape.DecoratorsInitialized += CommentShapeDecoratorMap.OnDecoratorsInitialized;
			global::isep.edom.gorgeous.RevComShape.DecoratorsInitialized += RevComShapeDecoratorMap.OnDecoratorsInitialized;
			global::isep.edom.gorgeous.NodeShape.DecoratorsInitialized += NodeShapeDecoratorMap.OnDecoratorsInitialized;
			global::isep.edom.gorgeous.ProcessShape.DecoratorsInitialized += ProcessShapeDecoratorMap.OnDecoratorsInitialized;
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for UserShape.
		/// </summary>
		internal static partial class UserShapeDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for UserShape.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::isep.edom.gorgeous.User.NameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "NameDecorator").AssociateValueWith(shape.Store, propertyInfo);
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::isep.edom.gorgeous.User.NameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "NameDecorator").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for SubjectShape.
		/// </summary>
		internal static partial class SubjectShapeDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for SubjectShape.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::isep.edom.gorgeous.Subject.NameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "NameDecorator").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for FieldShape.
		/// </summary>
		internal static partial class FieldShapeDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for FieldShape.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::isep.edom.gorgeous.Field.NameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "NameDecorator").AssociateValueWith(shape.Store, propertyInfo);
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::isep.edom.gorgeous.Field.NameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "NameDecorator").AssociateValueWith(shape.Store, propertyInfo);
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::isep.edom.gorgeous.Field.TypeDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "TypeDecorator").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for ReviewShape.
		/// </summary>
		internal static partial class ReviewShapeDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for ReviewShape.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::isep.edom.gorgeous.Review.NameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "NameDecorator").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for CommentShape.
		/// </summary>
		internal static partial class CommentShapeDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for CommentShape.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::isep.edom.gorgeous.Comment.NameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "NameDecorator").AssociateValueWith(shape.Store, propertyInfo);
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::isep.edom.gorgeous.Comment.NameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "NameDecorator").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for RevComShape.
		/// </summary>
		internal static partial class RevComShapeDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for RevComShape.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::isep.edom.gorgeous.ReviewComment.NameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "NameDecorator").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for NodeShape.
		/// </summary>
		internal static partial class NodeShapeDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for NodeShape.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::isep.edom.gorgeous.Node.NameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "NameDecorator").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for ProcessShape.
		/// </summary>
		internal static partial class ProcessShapeDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for ProcessShape.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::isep.edom.gorgeous.Process.NameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "NameDecorator").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		#endregion
		
		#region Connect actions
		private bool changingMouseAction;
		private global::isep.edom.gorgeous.SubjectHasFieldConnectAction subjectHasFieldConnectAction;
		private global::isep.edom.gorgeous.SubjectHasReviewCommentConnectAction subjectHasReviewCommentConnectAction;
		private global::isep.edom.gorgeous.UserHasFieldConnectAction userHasFieldConnectAction;
		private global::isep.edom.gorgeous.ReviewExtendRevComConnectAction reviewExtendRevComConnectAction;
		private global::isep.edom.gorgeous.ReviewByUserConnectAction reviewByUserConnectAction;
		private global::isep.edom.gorgeous.ReviewHasFieldConnectAction reviewHasFieldConnectAction;
		private global::isep.edom.gorgeous.CommentByUserConnectAction commentByUserConnectAction;
		private global::isep.edom.gorgeous.CommentHasFieldConnectAction commentHasFieldConnectAction;
		private global::isep.edom.gorgeous.CommentHasCommentConnectAction commentHasCommentConnectAction;
		private global::isep.edom.gorgeous.CommentExtendRevComConnectAction commentExtendRevComConnectAction;
		private global::isep.edom.gorgeous.RevComHasFieldConnectAction revComHasFieldConnectAction;
		/// <summary>
		/// Virtual method to provide a filter when to select the mouse action
		/// </summary>
		/// <param name="activeView">Currently active view</param>
		/// <param name="filter">filter string used to filter the toolbox items</param>
		protected virtual bool SelectedToolboxItemSupportsFilterString(DslDiagrams::DiagramView activeView, string filter)
		{
			return activeView.SelectedToolboxItemSupportsFilterString(filter);
		}
		/// <summary>
		/// Override to provide the right mouse action when trying
		/// to create links on the diagram
		/// </summary>
		/// <param name="pointArgs"></param>
		public override void OnViewMouseEnter(DslDiagrams::DiagramPointEventArgs pointArgs)
		{
			if (pointArgs  == null) throw new global::System.ArgumentNullException("pointArgs");
		
			DslDiagrams::DiagramView activeView = this.ActiveDiagramView;
			if(activeView != null)
			{
				DslDiagrams::MouseAction action = null;
				if (SelectedToolboxItemSupportsFilterString(activeView, global::isep.edom.gorgeous.gorgeousToolboxHelper.SubjectHasFieldFilterString))
				{
					if (this.subjectHasFieldConnectAction == null)
					{
						this.subjectHasFieldConnectAction = new global::isep.edom.gorgeous.SubjectHasFieldConnectAction(this);
						this.subjectHasFieldConnectAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnConnectActionDeactivated);
					}
					action = this.subjectHasFieldConnectAction;
				} 
				else if (SelectedToolboxItemSupportsFilterString(activeView, global::isep.edom.gorgeous.gorgeousToolboxHelper.SubjectHasReviewCommentFilterString))
				{
					if (this.subjectHasReviewCommentConnectAction == null)
					{
						this.subjectHasReviewCommentConnectAction = new global::isep.edom.gorgeous.SubjectHasReviewCommentConnectAction(this);
						this.subjectHasReviewCommentConnectAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnConnectActionDeactivated);
					}
					action = this.subjectHasReviewCommentConnectAction;
				} 
				else if (SelectedToolboxItemSupportsFilterString(activeView, global::isep.edom.gorgeous.gorgeousToolboxHelper.UserHasFieldFilterString))
				{
					if (this.userHasFieldConnectAction == null)
					{
						this.userHasFieldConnectAction = new global::isep.edom.gorgeous.UserHasFieldConnectAction(this);
						this.userHasFieldConnectAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnConnectActionDeactivated);
					}
					action = this.userHasFieldConnectAction;
				} 
				else if (SelectedToolboxItemSupportsFilterString(activeView, global::isep.edom.gorgeous.gorgeousToolboxHelper.ReviewExtendRevComFilterString))
				{
					if (this.reviewExtendRevComConnectAction == null)
					{
						this.reviewExtendRevComConnectAction = new global::isep.edom.gorgeous.ReviewExtendRevComConnectAction(this);
						this.reviewExtendRevComConnectAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnConnectActionDeactivated);
					}
					action = this.reviewExtendRevComConnectAction;
				} 
				else if (SelectedToolboxItemSupportsFilterString(activeView, global::isep.edom.gorgeous.gorgeousToolboxHelper.ReviewByUserFilterString))
				{
					if (this.reviewByUserConnectAction == null)
					{
						this.reviewByUserConnectAction = new global::isep.edom.gorgeous.ReviewByUserConnectAction(this);
						this.reviewByUserConnectAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnConnectActionDeactivated);
					}
					action = this.reviewByUserConnectAction;
				} 
				else if (SelectedToolboxItemSupportsFilterString(activeView, global::isep.edom.gorgeous.gorgeousToolboxHelper.ReviewHasFieldFilterString))
				{
					if (this.reviewHasFieldConnectAction == null)
					{
						this.reviewHasFieldConnectAction = new global::isep.edom.gorgeous.ReviewHasFieldConnectAction(this);
						this.reviewHasFieldConnectAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnConnectActionDeactivated);
					}
					action = this.reviewHasFieldConnectAction;
				} 
				else if (SelectedToolboxItemSupportsFilterString(activeView, global::isep.edom.gorgeous.gorgeousToolboxHelper.CommentByUserFilterString))
				{
					if (this.commentByUserConnectAction == null)
					{
						this.commentByUserConnectAction = new global::isep.edom.gorgeous.CommentByUserConnectAction(this);
						this.commentByUserConnectAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnConnectActionDeactivated);
					}
					action = this.commentByUserConnectAction;
				} 
				else if (SelectedToolboxItemSupportsFilterString(activeView, global::isep.edom.gorgeous.gorgeousToolboxHelper.CommentHasFieldFilterString))
				{
					if (this.commentHasFieldConnectAction == null)
					{
						this.commentHasFieldConnectAction = new global::isep.edom.gorgeous.CommentHasFieldConnectAction(this);
						this.commentHasFieldConnectAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnConnectActionDeactivated);
					}
					action = this.commentHasFieldConnectAction;
				} 
				else if (SelectedToolboxItemSupportsFilterString(activeView, global::isep.edom.gorgeous.gorgeousToolboxHelper.CommentHasCommentFilterString))
				{
					if (this.commentHasCommentConnectAction == null)
					{
						this.commentHasCommentConnectAction = new global::isep.edom.gorgeous.CommentHasCommentConnectAction(this);
						this.commentHasCommentConnectAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnConnectActionDeactivated);
					}
					action = this.commentHasCommentConnectAction;
				} 
				else if (SelectedToolboxItemSupportsFilterString(activeView, global::isep.edom.gorgeous.gorgeousToolboxHelper.CommentExtendRevComFilterString))
				{
					if (this.commentExtendRevComConnectAction == null)
					{
						this.commentExtendRevComConnectAction = new global::isep.edom.gorgeous.CommentExtendRevComConnectAction(this);
						this.commentExtendRevComConnectAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnConnectActionDeactivated);
					}
					action = this.commentExtendRevComConnectAction;
				} 
				else if (SelectedToolboxItemSupportsFilterString(activeView, global::isep.edom.gorgeous.gorgeousToolboxHelper.RevComHasFieldFilterString))
				{
					if (this.revComHasFieldConnectAction == null)
					{
						this.revComHasFieldConnectAction = new global::isep.edom.gorgeous.RevComHasFieldConnectAction(this);
						this.revComHasFieldConnectAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnConnectActionDeactivated);
					}
					action = this.revComHasFieldConnectAction;
				} 
				else
				{
					action = null;
				}
				
				if (pointArgs.DiagramClientView.ActiveMouseAction != action)
				{
					try
					{
						this.changingMouseAction = true;
						pointArgs.DiagramClientView.ActiveMouseAction = action;
					}
					finally
					{
						this.changingMouseAction = false;
					}
				}
			}
		}
		
		/// <summary>
		/// Snap toolbox selection back to regular pointer after using a custom connect action.
		/// </summary>
		private void OnConnectActionDeactivated(object sender, DslDiagrams::DiagramEventArgs e)
		{
			OnMouseActionDeactivated();
		}
		
		/// <summary>
		/// Overridable method to manage the mouse deactivation. The default implementation snap stoolbox selection back to regular pointer 
		/// after using a custom connect action.
		/// </summary>
		protected virtual void OnMouseActionDeactivated()
		{
			DslDiagrams::DiagramView activeView = this.ActiveDiagramView;
		
			if (activeView != null && activeView.Toolbox != null)
			{
				// If we're not changing mouse action due to changing toolbox selection change,
				// reset toolbox selection.
				if (!this.changingMouseAction)
				{
					activeView.Toolbox.SelectedToolboxItemUsed();
				}
			}
		}
		#endregion
		
		/// <summary>
		/// Dispose of connect actions.
		/// </summary>
		protected override void Dispose(bool disposing)
		{
			try
			{
				if(disposing)
				{
					if(this.subjectHasFieldConnectAction != null)
					{
						this.subjectHasFieldConnectAction.Dispose();
						this.subjectHasFieldConnectAction = null;
					}
					if(this.subjectHasReviewCommentConnectAction != null)
					{
						this.subjectHasReviewCommentConnectAction.Dispose();
						this.subjectHasReviewCommentConnectAction = null;
					}
					if(this.userHasFieldConnectAction != null)
					{
						this.userHasFieldConnectAction.Dispose();
						this.userHasFieldConnectAction = null;
					}
					if(this.reviewExtendRevComConnectAction != null)
					{
						this.reviewExtendRevComConnectAction.Dispose();
						this.reviewExtendRevComConnectAction = null;
					}
					if(this.reviewByUserConnectAction != null)
					{
						this.reviewByUserConnectAction.Dispose();
						this.reviewByUserConnectAction = null;
					}
					if(this.reviewHasFieldConnectAction != null)
					{
						this.reviewHasFieldConnectAction.Dispose();
						this.reviewHasFieldConnectAction = null;
					}
					if(this.commentByUserConnectAction != null)
					{
						this.commentByUserConnectAction.Dispose();
						this.commentByUserConnectAction = null;
					}
					if(this.commentHasFieldConnectAction != null)
					{
						this.commentHasFieldConnectAction.Dispose();
						this.commentHasFieldConnectAction = null;
					}
					if(this.commentHasCommentConnectAction != null)
					{
						this.commentHasCommentConnectAction.Dispose();
						this.commentHasCommentConnectAction = null;
					}
					if(this.commentExtendRevComConnectAction != null)
					{
						this.commentExtendRevComConnectAction.Dispose();
						this.commentExtendRevComConnectAction = null;
					}
					if(this.revComHasFieldConnectAction != null)
					{
						this.revComHasFieldConnectAction.Dispose();
						this.revComHasFieldConnectAction = null;
					}
				}
			}
			finally
			{
				base.Dispose(disposing);
			}
		}
		#region Constructors, domain class Id
	
		/// <summary>
		/// gorgeousDiagram domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x7839e501, 0x8474, 0x4898, 0x99, 0x3e, 0x10, 0x8d, 0xdc, 0x4b, 0xda, 0xcf);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public gorgeousDiagram(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public gorgeousDiagram(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace isep.edom.gorgeous
{
	
		/// <summary>
		/// Double derived implementation for the rule that initiates view fixup when an element that has an associated shape is added to the model.
		/// This now enables the DSL author to everride the SkipFixUp() method 
		/// </summary>
		internal partial class FixUpDiagramBase : DslModeling::AddRule
		{
			protected virtual bool SkipFixup(DslModeling::ModelElement childElement)
			{
				return childElement.IsDeleted;
			}
		}
	
		/// <summary>
		/// Rule that initiates view fixup when an element that has an associated shape is added to the model. 
		/// </summary>
		[DslModeling::RuleOn(typeof(global::isep.edom.gorgeous.User), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::isep.edom.gorgeous.NodeReferênciasField), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::isep.edom.gorgeous.ProcessReferênciasNode), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::isep.edom.gorgeous.CommentReferênciasProcess), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::isep.edom.gorgeous.CommentReferênciasReviewComment), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::isep.edom.gorgeous.ReviewReferênciasReviewComment), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::isep.edom.gorgeous.ReviewCommentReferênciasField), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::isep.edom.gorgeous.SubjectReferênciasReviewComment), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::isep.edom.gorgeous.SubjectReferênciasField), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::isep.edom.gorgeous.CommentReferênciasDestinoComment), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::isep.edom.gorgeous.CommentReferênciasField), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::isep.edom.gorgeous.ReviewReferênciasField), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::isep.edom.gorgeous.AutomaticReferênciasNode), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::isep.edom.gorgeous.SubjectReferênciasUser), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::isep.edom.gorgeous.CommentReferênciasUser), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::isep.edom.gorgeous.ReviewReferênciasUser), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::isep.edom.gorgeous.Manual), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::isep.edom.gorgeous.Automatic), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::isep.edom.gorgeous.Process), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::isep.edom.gorgeous.Node), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::isep.edom.gorgeous.ReviewComment), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::isep.edom.gorgeous.Comment), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::isep.edom.gorgeous.Review), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::isep.edom.gorgeous.Field), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::isep.edom.gorgeous.Subject), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::isep.edom.gorgeous.UserReferênciasField), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::isep.edom.gorgeous.ManualReferênciasNode), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		internal sealed partial class FixUpDiagram : FixUpDiagramBase
		{
			[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
			public override void ElementAdded(DslModeling::ElementAddedEventArgs e)
			{
				if(e == null) throw new global::System.ArgumentNullException("e");
			
				DslModeling::ModelElement childElement = e.ModelElement;
				if (this.SkipFixup(childElement))
					return;
				DslModeling::ModelElement parentElement;
				if(childElement is DslModeling::ElementLink)
				{
					parentElement = GetParentForRelationship((DslModeling::ElementLink)childElement);
				} else
				if(childElement is global::isep.edom.gorgeous.User)
				{
					parentElement = GetParentForUser((global::isep.edom.gorgeous.User)childElement);
				} else
				if(childElement is global::isep.edom.gorgeous.Manual)
				{
					parentElement = GetParentForManual((global::isep.edom.gorgeous.Manual)childElement);
				} else
				if(childElement is global::isep.edom.gorgeous.Automatic)
				{
					parentElement = GetParentForAutomatic((global::isep.edom.gorgeous.Automatic)childElement);
				} else
				if(childElement is global::isep.edom.gorgeous.Process)
				{
					parentElement = GetParentForProcess((global::isep.edom.gorgeous.Process)childElement);
				} else
				if(childElement is global::isep.edom.gorgeous.Node)
				{
					parentElement = GetParentForNode((global::isep.edom.gorgeous.Node)childElement);
				} else
				if(childElement is global::isep.edom.gorgeous.ReviewComment)
				{
					parentElement = GetParentForReviewComment((global::isep.edom.gorgeous.ReviewComment)childElement);
				} else
				if(childElement is global::isep.edom.gorgeous.Comment)
				{
					parentElement = GetParentForComment((global::isep.edom.gorgeous.Comment)childElement);
				} else
				if(childElement is global::isep.edom.gorgeous.Review)
				{
					parentElement = GetParentForReview((global::isep.edom.gorgeous.Review)childElement);
				} else
				if(childElement is global::isep.edom.gorgeous.Field)
				{
					parentElement = GetParentForField((global::isep.edom.gorgeous.Field)childElement);
				} else
				if(childElement is global::isep.edom.gorgeous.Subject)
				{
					parentElement = GetParentForSubject((global::isep.edom.gorgeous.Subject)childElement);
				} else
				{
					parentElement = null;
				}
				
				if(parentElement != null)
				{
					DslDiagrams::Diagram.FixUpDiagram(parentElement, childElement);
				}
			}
			public static global::isep.edom.gorgeous.Model GetParentForUser( global::isep.edom.gorgeous.User root )
			{
				// Segments 0 and 1
				global::isep.edom.gorgeous.Model result = root.Model;
				if ( result == null ) return null;
				return result;
			}
			public static global::isep.edom.gorgeous.Model GetParentForSubject( global::isep.edom.gorgeous.Subject root )
			{
				// Segments 0 and 1
				global::isep.edom.gorgeous.Model result = root.Model;
				if ( result == null ) return null;
				return result;
			}
			public static global::isep.edom.gorgeous.Model GetParentForField( global::isep.edom.gorgeous.Field root )
			{
				// Segments 0 and 1
				global::isep.edom.gorgeous.Model result = root.Model;
				if ( result == null ) return null;
				return result;
			}
			public static global::isep.edom.gorgeous.Model GetParentForReview( global::isep.edom.gorgeous.Review root )
			{
				// Segments 0 and 1
				global::isep.edom.gorgeous.Model result = root.Model;
				if ( result == null ) return null;
				return result;
			}
			public static global::isep.edom.gorgeous.Model GetParentForComment( global::isep.edom.gorgeous.Comment root )
			{
				// Segments 0 and 1
				global::isep.edom.gorgeous.Model result = root.Model;
				if ( result == null ) return null;
				return result;
			}
			public static global::isep.edom.gorgeous.Model GetParentForReviewComment( global::isep.edom.gorgeous.ReviewComment root )
			{
				// Segments 0 and 1
				global::isep.edom.gorgeous.Model result = root.Model;
				if ( result == null ) return null;
				return result;
			}
			public static global::isep.edom.gorgeous.Model GetParentForNode( global::isep.edom.gorgeous.Node root )
			{
				// Segments 0 and 1
				global::isep.edom.gorgeous.Model result = root.Model;
				if ( result == null ) return null;
				return result;
			}
			public static global::isep.edom.gorgeous.Model GetParentForProcess( global::isep.edom.gorgeous.Process root )
			{
				// Segments 0 and 1
				global::isep.edom.gorgeous.Model result = root.Model;
				if ( result == null ) return null;
				return result;
			}
			public static global::isep.edom.gorgeous.Model GetParentForAutomatic( global::isep.edom.gorgeous.Automatic root )
			{
				// Segments 0 and 1
				global::isep.edom.gorgeous.Model result = root.Model;
				if ( result == null ) return null;
				return result;
			}
			public static global::isep.edom.gorgeous.Model GetParentForManual( global::isep.edom.gorgeous.Manual root )
			{
				// Segments 0 and 1
				global::isep.edom.gorgeous.Model result = root.Model;
				if ( result == null ) return null;
				return result;
			}
			private static DslModeling::ModelElement GetParentForRelationship(DslModeling::ElementLink elementLink)
			{
				global::System.Collections.ObjectModel.ReadOnlyCollection<DslModeling::ModelElement> linkedElements = elementLink.LinkedElements;
	
				if (linkedElements.Count == 2)
				{
					DslDiagrams::ShapeElement sourceShape = linkedElements[0] as DslDiagrams::ShapeElement;
					DslDiagrams::ShapeElement targetShape = linkedElements[1] as DslDiagrams::ShapeElement;
	
					if(sourceShape == null)
					{
						DslModeling::LinkedElementCollection<DslDiagrams::PresentationElement> presentationElements = DslDiagrams::PresentationViewsSubject.GetPresentation(linkedElements[0]);
						foreach (DslDiagrams::PresentationElement presentationElement in presentationElements)
						{
							DslDiagrams::ShapeElement shape = presentationElement as DslDiagrams::ShapeElement;
							if (shape != null)
							{
								sourceShape = shape;
								break;
							}
						}
					}
					
					if(targetShape == null)
					{
						DslModeling::LinkedElementCollection<DslDiagrams::PresentationElement> presentationElements = DslDiagrams::PresentationViewsSubject.GetPresentation(linkedElements[1]);
						foreach (DslDiagrams::PresentationElement presentationElement in presentationElements)
						{
							DslDiagrams::ShapeElement shape = presentationElement as DslDiagrams::ShapeElement;
							if (shape != null)
							{
								targetShape = shape;
								break;
							}
						}
					}
					
					if(sourceShape == null || targetShape == null)
					{
						global::System.Diagnostics.Debug.Fail("Unable to find source and/or target shape for view fixup.");
						return null;
					}
	
					DslDiagrams::ShapeElement sourceParent = sourceShape.ParentShape;
					DslDiagrams::ShapeElement targetParent = targetShape.ParentShape;
	
					while (sourceParent != targetParent && sourceParent != null)
					{
						DslDiagrams::ShapeElement curParent = targetParent;
						while (sourceParent != curParent && curParent != null)
						{
							curParent = curParent.ParentShape;
						}
	
						if(sourceParent == curParent)
						{
							break;
						}
						else
						{
							sourceParent = sourceParent.ParentShape;
						}
					}
	
					while (sourceParent != null)
					{
						// ensure that the parent can parent connectors (i.e., a diagram or a swimlane).
						if(sourceParent is DslDiagrams::Diagram || sourceParent is DslDiagrams::SwimlaneShape)
						{
							break;
						}
						else
						{
							sourceParent = sourceParent.ParentShape;
						}
					}
	
					global::System.Diagnostics.Debug.Assert(sourceParent != null && sourceParent.ModelElement != null, "Unable to find common parent for view fixup.");
					return sourceParent.ModelElement;
				}
	
				return null;
			}
		}
		
	
		/// <summary>
		/// Reroute a connector when the role players of its underlying relationship change
		/// </summary>
		[DslModeling::RuleOn(typeof(global::isep.edom.gorgeous.ReviewReferênciasUser), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::isep.edom.gorgeous.CommentReferênciasUser), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::isep.edom.gorgeous.UserReferênciasField), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::isep.edom.gorgeous.SubjectReferênciasUser), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::isep.edom.gorgeous.ReviewReferênciasField), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::isep.edom.gorgeous.CommentReferênciasField), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::isep.edom.gorgeous.CommentReferênciasDestinoComment), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::isep.edom.gorgeous.SubjectReferênciasField), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::isep.edom.gorgeous.SubjectReferênciasReviewComment), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::isep.edom.gorgeous.ReviewCommentReferênciasField), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::isep.edom.gorgeous.ReviewReferênciasReviewComment), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::isep.edom.gorgeous.CommentReferênciasReviewComment), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::isep.edom.gorgeous.CommentReferênciasProcess), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::isep.edom.gorgeous.ProcessReferênciasNode), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::isep.edom.gorgeous.NodeReferênciasField), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::isep.edom.gorgeous.AutomaticReferênciasNode), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::isep.edom.gorgeous.ManualReferênciasNode), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		internal sealed class ConnectorRolePlayerChanged : DslModeling::RolePlayerChangeRule
		{
			/// <summary>
			/// Reroute a connector when the role players of its underlying relationship change
			/// </summary>
			public override void RolePlayerChanged(DslModeling::RolePlayerChangedEventArgs e)
			{
				if (e == null) throw new global::System.ArgumentNullException("e");
	
				global::System.Collections.ObjectModel.ReadOnlyCollection<DslDiagrams::PresentationViewsSubject> connectorLinks = DslDiagrams::PresentationViewsSubject.GetLinksToPresentation(e.ElementLink);
				foreach (DslDiagrams::PresentationViewsSubject connectorLink in connectorLinks)
				{
					// Fix up any binary link shapes attached to the element link.
					DslDiagrams::BinaryLinkShape linkShape = connectorLink.Presentation as DslDiagrams::BinaryLinkShape;
					if (linkShape != null)
					{
						global::isep.edom.gorgeous.gorgeousDiagram diagram = linkShape.Diagram as global::isep.edom.gorgeous.gorgeousDiagram;
						if (diagram != null)
						{
							if (e.NewRolePlayer != null)
							{
								DslDiagrams::NodeShape fromShape;
								DslDiagrams::NodeShape toShape;
								diagram.GetSourceAndTargetForConnector(linkShape, out fromShape, out toShape);
								if (fromShape != null && toShape != null)
								{
									if (!object.Equals(fromShape, linkShape.FromShape))
									{
										linkShape.FromShape = fromShape;
									}
									if (!object.Equals(linkShape.ToShape, toShape))
									{
										linkShape.ToShape = toShape;
									}
								}
								else
								{
									// delete the connector if we cannot find an appropriate target shape.
									linkShape.Delete();
								}
							}
							else
							{
								// delete the connector if the new role player is null.
								linkShape.Delete();
							}
						}
					}
				}
			}
		}
	}
