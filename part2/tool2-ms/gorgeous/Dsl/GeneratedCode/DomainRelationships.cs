//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace isep.edom.gorgeous
{
	/// <summary>
	/// DomainRelationship ModelTemUser
	/// Descrição de isep.edom.gorgeous.ModelTemUser
	/// </summary>
	[DslDesign::DisplayNameResource("isep.edom.gorgeous.ModelTemUser.DisplayName", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("isep.edom.gorgeous.ModelTemUser.Description", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::isep.edom.gorgeous.gorgeousDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("7d037471-63d8-4c8a-bb60-e9c00ea2dee6")]
	public partial class ModelTemUser : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ModelTemUser domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x7d037471, 0x63d8, 0x4c8a, 0xbb, 0x60, 0xe9, 0xc0, 0x0e, 0xa2, 0xde, 0xe6);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ModelTemUser link in the same Partition as the given Model
		/// </summary>
		/// <param name="source">Model to use as the source of the relationship.</param>
		/// <param name="target">User to use as the target of the relationship.</param>
		public ModelTemUser(Model source, User target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ModelTemUser.ModelDomainRoleId, source), new DslModeling::RoleAssignment(ModelTemUser.UserDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelTemUser(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelTemUser(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelTemUser(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelTemUser(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Model domain role code
		
		/// <summary>
		/// Model domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelDomainRoleId = new global::System.Guid(0x62f21851, 0xd439, 0x4151, 0xb3, 0x4b, 0x92, 0x82, 0xfe, 0xa5, 0x41, 0x1d);
		
		/// <summary>
		/// DomainRole Model
		/// Descrição de isep.edom.gorgeous.ModelTemUser.Model
		/// </summary>
		[DslDesign::DisplayNameResource("isep.edom.gorgeous.ModelTemUser/Model.DisplayName", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("isep.edom.gorgeous.ModelTemUser/Model.Description", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "User", PropertyDisplayNameKey="isep.edom.gorgeous.ModelTemUser/Model.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("62f21851-d439-4151-b34b-9282fea5411d")]
		public virtual Model Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Model)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Model of a User
		/// <summary>
		/// Gets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Model GetModel(User element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, UserDomainRoleId) as Model;
		}
		
		/// <summary>
		/// Sets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModel(User element, Model newModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, UserDomainRoleId, newModel);
		}
		#endregion
		#region User domain role code
		
		/// <summary>
		/// User domain role Id.
		/// </summary>
		public static readonly global::System.Guid UserDomainRoleId = new global::System.Guid(0xaca010a7, 0x62ed, 0x41c3, 0x99, 0x69, 0x7d, 0x5a, 0x8c, 0xc4, 0xb5, 0xe5);
		
		/// <summary>
		/// DomainRole User
		/// Descrição de isep.edom.gorgeous.ModelTemUser.User
		/// </summary>
		[DslDesign::DisplayNameResource("isep.edom.gorgeous.ModelTemUser/User.DisplayName", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("isep.edom.gorgeous.ModelTemUser/User.Description", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Model", PropertyDisplayNameKey="isep.edom.gorgeous.ModelTemUser/User.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("aca010a7-62ed-41c3-9969-7d5a8cc4b5e5")]
		public virtual User User
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (User)DslModeling::DomainRoleInfo.GetRolePlayer(this, UserDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, UserDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access User of a Model
		/// <summary>
		/// Gets a list of User.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<User> GetUser(Model element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<User>, User>(element, ModelDomainRoleId);
		}
		#endregion
		#region Model link accessor
		/// <summary>
		/// Get the list of ModelTemUser links to a Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::isep.edom.gorgeous.ModelTemUser> GetLinksToUser ( global::isep.edom.gorgeous.Model modelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::isep.edom.gorgeous.ModelTemUser>(modelInstance, global::isep.edom.gorgeous.ModelTemUser.ModelDomainRoleId);
		}
		#endregion
		#region User link accessor
		/// <summary>
		/// Get the ModelTemUser link to a User.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::isep.edom.gorgeous.ModelTemUser GetLinkToModel (global::isep.edom.gorgeous.User userInstance)
		{
			global::System.Collections.Generic.IList<global::isep.edom.gorgeous.ModelTemUser> links = DslModeling::DomainRoleInfo.GetElementLinks<global::isep.edom.gorgeous.ModelTemUser>(userInstance, global::isep.edom.gorgeous.ModelTemUser.UserDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of User not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ModelTemUser instance accessors
		
		/// <summary>
		/// Get any ModelTemUser links between a given Model and a User.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::isep.edom.gorgeous.ModelTemUser> GetLinks( global::isep.edom.gorgeous.Model source, global::isep.edom.gorgeous.User target )
		{
			global::System.Collections.Generic.List<global::isep.edom.gorgeous.ModelTemUser> outLinks = new global::System.Collections.Generic.List<global::isep.edom.gorgeous.ModelTemUser>();
			global::System.Collections.Generic.IList<global::isep.edom.gorgeous.ModelTemUser> links = DslModeling::DomainRoleInfo.GetElementLinks<global::isep.edom.gorgeous.ModelTemUser>(source, global::isep.edom.gorgeous.ModelTemUser.ModelDomainRoleId);
			foreach ( global::isep.edom.gorgeous.ModelTemUser link in links )
			{
				if ( target.Equals(link.User) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ModelTemUser link between a given Modeland a User.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::isep.edom.gorgeous.ModelTemUser GetLink( global::isep.edom.gorgeous.Model source, global::isep.edom.gorgeous.User target )
		{
			global::System.Collections.Generic.IList<global::isep.edom.gorgeous.ModelTemUser> links = DslModeling::DomainRoleInfo.GetElementLinks<global::isep.edom.gorgeous.ModelTemUser>(source, global::isep.edom.gorgeous.ModelTemUser.ModelDomainRoleId);
			foreach ( global::isep.edom.gorgeous.ModelTemUser link in links )
			{
				if ( target.Equals(link.User) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace isep.edom.gorgeous
{
	/// <summary>
	/// DomainRelationship ModelTemSubject
	/// Descrição de isep.edom.gorgeous.ModelTemSubject
	/// </summary>
	[DslDesign::DisplayNameResource("isep.edom.gorgeous.ModelTemSubject.DisplayName", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("isep.edom.gorgeous.ModelTemSubject.Description", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::isep.edom.gorgeous.gorgeousDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("92f4b1dd-cdbb-4872-91f5-1f99000f26cf")]
	public partial class ModelTemSubject : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ModelTemSubject domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x92f4b1dd, 0xcdbb, 0x4872, 0x91, 0xf5, 0x1f, 0x99, 0x00, 0x0f, 0x26, 0xcf);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ModelTemSubject link in the same Partition as the given Model
		/// </summary>
		/// <param name="source">Model to use as the source of the relationship.</param>
		/// <param name="target">Subject to use as the target of the relationship.</param>
		public ModelTemSubject(Model source, Subject target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ModelTemSubject.ModelDomainRoleId, source), new DslModeling::RoleAssignment(ModelTemSubject.SubjectDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelTemSubject(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelTemSubject(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelTemSubject(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelTemSubject(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Model domain role code
		
		/// <summary>
		/// Model domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelDomainRoleId = new global::System.Guid(0xece3518a, 0xc85b, 0x48f8, 0x96, 0x5f, 0x74, 0x13, 0x5e, 0x28, 0xa6, 0x36);
		
		/// <summary>
		/// DomainRole Model
		/// Descrição de isep.edom.gorgeous.ModelTemSubject.Model
		/// </summary>
		[DslDesign::DisplayNameResource("isep.edom.gorgeous.ModelTemSubject/Model.DisplayName", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("isep.edom.gorgeous.ModelTemSubject/Model.Description", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Subject", PropertyDisplayNameKey="isep.edom.gorgeous.ModelTemSubject/Model.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("ece3518a-c85b-48f8-965f-74135e28a636")]
		public virtual Model Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Model)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Model of a Subject
		/// <summary>
		/// Gets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Model GetModel(Subject element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SubjectDomainRoleId) as Model;
		}
		
		/// <summary>
		/// Sets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModel(Subject element, Model newModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SubjectDomainRoleId, newModel);
		}
		#endregion
		#region Subject domain role code
		
		/// <summary>
		/// Subject domain role Id.
		/// </summary>
		public static readonly global::System.Guid SubjectDomainRoleId = new global::System.Guid(0xc5a53dc1, 0xc5e8, 0x46f1, 0xbd, 0xa8, 0xb0, 0x28, 0xe4, 0x0f, 0x5a, 0x6c);
		
		/// <summary>
		/// DomainRole Subject
		/// Descrição de isep.edom.gorgeous.ModelTemSubject.Subject
		/// </summary>
		[DslDesign::DisplayNameResource("isep.edom.gorgeous.ModelTemSubject/Subject.DisplayName", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("isep.edom.gorgeous.ModelTemSubject/Subject.Description", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Model", PropertyDisplayNameKey="isep.edom.gorgeous.ModelTemSubject/Subject.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("c5a53dc1-c5e8-46f1-bda8-b028e40f5a6c")]
		public virtual Subject Subject
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Subject)DslModeling::DomainRoleInfo.GetRolePlayer(this, SubjectDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SubjectDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Subject of a Model
		/// <summary>
		/// Gets a list of Subject.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Subject> GetSubject(Model element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Subject>, Subject>(element, ModelDomainRoleId);
		}
		#endregion
		#region Model link accessor
		/// <summary>
		/// Get the list of ModelTemSubject links to a Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::isep.edom.gorgeous.ModelTemSubject> GetLinksToSubject ( global::isep.edom.gorgeous.Model modelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::isep.edom.gorgeous.ModelTemSubject>(modelInstance, global::isep.edom.gorgeous.ModelTemSubject.ModelDomainRoleId);
		}
		#endregion
		#region Subject link accessor
		/// <summary>
		/// Get the ModelTemSubject link to a Subject.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::isep.edom.gorgeous.ModelTemSubject GetLinkToModel (global::isep.edom.gorgeous.Subject subjectInstance)
		{
			global::System.Collections.Generic.IList<global::isep.edom.gorgeous.ModelTemSubject> links = DslModeling::DomainRoleInfo.GetElementLinks<global::isep.edom.gorgeous.ModelTemSubject>(subjectInstance, global::isep.edom.gorgeous.ModelTemSubject.SubjectDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Subject not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ModelTemSubject instance accessors
		
		/// <summary>
		/// Get any ModelTemSubject links between a given Model and a Subject.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::isep.edom.gorgeous.ModelTemSubject> GetLinks( global::isep.edom.gorgeous.Model source, global::isep.edom.gorgeous.Subject target )
		{
			global::System.Collections.Generic.List<global::isep.edom.gorgeous.ModelTemSubject> outLinks = new global::System.Collections.Generic.List<global::isep.edom.gorgeous.ModelTemSubject>();
			global::System.Collections.Generic.IList<global::isep.edom.gorgeous.ModelTemSubject> links = DslModeling::DomainRoleInfo.GetElementLinks<global::isep.edom.gorgeous.ModelTemSubject>(source, global::isep.edom.gorgeous.ModelTemSubject.ModelDomainRoleId);
			foreach ( global::isep.edom.gorgeous.ModelTemSubject link in links )
			{
				if ( target.Equals(link.Subject) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ModelTemSubject link between a given Modeland a Subject.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::isep.edom.gorgeous.ModelTemSubject GetLink( global::isep.edom.gorgeous.Model source, global::isep.edom.gorgeous.Subject target )
		{
			global::System.Collections.Generic.IList<global::isep.edom.gorgeous.ModelTemSubject> links = DslModeling::DomainRoleInfo.GetElementLinks<global::isep.edom.gorgeous.ModelTemSubject>(source, global::isep.edom.gorgeous.ModelTemSubject.ModelDomainRoleId);
			foreach ( global::isep.edom.gorgeous.ModelTemSubject link in links )
			{
				if ( target.Equals(link.Subject) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace isep.edom.gorgeous
{
	/// <summary>
	/// DomainRelationship ModelTemReview
	/// Descrição de isep.edom.gorgeous.ModelTemReview
	/// </summary>
	[DslDesign::DisplayNameResource("isep.edom.gorgeous.ModelTemReview.DisplayName", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("isep.edom.gorgeous.ModelTemReview.Description", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::isep.edom.gorgeous.gorgeousDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("93379972-985f-4cee-9b91-27152792743d")]
	public partial class ModelTemReview : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ModelTemReview domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x93379972, 0x985f, 0x4cee, 0x9b, 0x91, 0x27, 0x15, 0x27, 0x92, 0x74, 0x3d);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ModelTemReview link in the same Partition as the given Model
		/// </summary>
		/// <param name="source">Model to use as the source of the relationship.</param>
		/// <param name="target">Review to use as the target of the relationship.</param>
		public ModelTemReview(Model source, Review target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ModelTemReview.ModelDomainRoleId, source), new DslModeling::RoleAssignment(ModelTemReview.ReviewDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelTemReview(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelTemReview(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelTemReview(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelTemReview(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Model domain role code
		
		/// <summary>
		/// Model domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelDomainRoleId = new global::System.Guid(0x6399c08e, 0x3c1c, 0x4963, 0x81, 0x51, 0x43, 0xa4, 0x9d, 0x0d, 0x8f, 0x69);
		
		/// <summary>
		/// DomainRole Model
		/// Descrição de isep.edom.gorgeous.ModelTemReview.Model
		/// </summary>
		[DslDesign::DisplayNameResource("isep.edom.gorgeous.ModelTemReview/Model.DisplayName", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("isep.edom.gorgeous.ModelTemReview/Model.Description", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Review", PropertyDisplayNameKey="isep.edom.gorgeous.ModelTemReview/Model.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("6399c08e-3c1c-4963-8151-43a49d0d8f69")]
		public virtual Model Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Model)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Model of a Review
		/// <summary>
		/// Gets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Model GetModel(Review element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ReviewDomainRoleId) as Model;
		}
		
		/// <summary>
		/// Sets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModel(Review element, Model newModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ReviewDomainRoleId, newModel);
		}
		#endregion
		#region Review domain role code
		
		/// <summary>
		/// Review domain role Id.
		/// </summary>
		public static readonly global::System.Guid ReviewDomainRoleId = new global::System.Guid(0x64b24cce, 0x1a9e, 0x47c6, 0xa1, 0x16, 0x2b, 0x4a, 0x4f, 0xc8, 0xb7, 0x6c);
		
		/// <summary>
		/// DomainRole Review
		/// Descrição de isep.edom.gorgeous.ModelTemReview.Review
		/// </summary>
		[DslDesign::DisplayNameResource("isep.edom.gorgeous.ModelTemReview/Review.DisplayName", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("isep.edom.gorgeous.ModelTemReview/Review.Description", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Model", PropertyDisplayNameKey="isep.edom.gorgeous.ModelTemReview/Review.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("64b24cce-1a9e-47c6-a116-2b4a4fc8b76c")]
		public virtual Review Review
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Review)DslModeling::DomainRoleInfo.GetRolePlayer(this, ReviewDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ReviewDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Review of a Model
		/// <summary>
		/// Gets a list of Review.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Review> GetReview(Model element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Review>, Review>(element, ModelDomainRoleId);
		}
		#endregion
		#region Model link accessor
		/// <summary>
		/// Get the list of ModelTemReview links to a Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::isep.edom.gorgeous.ModelTemReview> GetLinksToReview ( global::isep.edom.gorgeous.Model modelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::isep.edom.gorgeous.ModelTemReview>(modelInstance, global::isep.edom.gorgeous.ModelTemReview.ModelDomainRoleId);
		}
		#endregion
		#region Review link accessor
		/// <summary>
		/// Get the ModelTemReview link to a Review.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::isep.edom.gorgeous.ModelTemReview GetLinkToModel (global::isep.edom.gorgeous.Review reviewInstance)
		{
			global::System.Collections.Generic.IList<global::isep.edom.gorgeous.ModelTemReview> links = DslModeling::DomainRoleInfo.GetElementLinks<global::isep.edom.gorgeous.ModelTemReview>(reviewInstance, global::isep.edom.gorgeous.ModelTemReview.ReviewDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Review not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ModelTemReview instance accessors
		
		/// <summary>
		/// Get any ModelTemReview links between a given Model and a Review.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::isep.edom.gorgeous.ModelTemReview> GetLinks( global::isep.edom.gorgeous.Model source, global::isep.edom.gorgeous.Review target )
		{
			global::System.Collections.Generic.List<global::isep.edom.gorgeous.ModelTemReview> outLinks = new global::System.Collections.Generic.List<global::isep.edom.gorgeous.ModelTemReview>();
			global::System.Collections.Generic.IList<global::isep.edom.gorgeous.ModelTemReview> links = DslModeling::DomainRoleInfo.GetElementLinks<global::isep.edom.gorgeous.ModelTemReview>(source, global::isep.edom.gorgeous.ModelTemReview.ModelDomainRoleId);
			foreach ( global::isep.edom.gorgeous.ModelTemReview link in links )
			{
				if ( target.Equals(link.Review) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ModelTemReview link between a given Modeland a Review.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::isep.edom.gorgeous.ModelTemReview GetLink( global::isep.edom.gorgeous.Model source, global::isep.edom.gorgeous.Review target )
		{
			global::System.Collections.Generic.IList<global::isep.edom.gorgeous.ModelTemReview> links = DslModeling::DomainRoleInfo.GetElementLinks<global::isep.edom.gorgeous.ModelTemReview>(source, global::isep.edom.gorgeous.ModelTemReview.ModelDomainRoleId);
			foreach ( global::isep.edom.gorgeous.ModelTemReview link in links )
			{
				if ( target.Equals(link.Review) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace isep.edom.gorgeous
{
	/// <summary>
	/// DomainRelationship ModelTemComment
	/// Descrição de isep.edom.gorgeous.ModelTemComment
	/// </summary>
	[DslDesign::DisplayNameResource("isep.edom.gorgeous.ModelTemComment.DisplayName", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("isep.edom.gorgeous.ModelTemComment.Description", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::isep.edom.gorgeous.gorgeousDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("a5c0c7b6-214d-47de-90c5-5f48e57ab877")]
	public partial class ModelTemComment : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ModelTemComment domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa5c0c7b6, 0x214d, 0x47de, 0x90, 0xc5, 0x5f, 0x48, 0xe5, 0x7a, 0xb8, 0x77);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ModelTemComment link in the same Partition as the given Model
		/// </summary>
		/// <param name="source">Model to use as the source of the relationship.</param>
		/// <param name="target">Comment to use as the target of the relationship.</param>
		public ModelTemComment(Model source, Comment target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ModelTemComment.ModelDomainRoleId, source), new DslModeling::RoleAssignment(ModelTemComment.CommentDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelTemComment(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelTemComment(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelTemComment(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelTemComment(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Model domain role code
		
		/// <summary>
		/// Model domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelDomainRoleId = new global::System.Guid(0x0dccdccb, 0x11c3, 0x475d, 0xbe, 0x48, 0x0d, 0x74, 0x00, 0x6e, 0x82, 0x00);
		
		/// <summary>
		/// DomainRole Model
		/// Descrição de isep.edom.gorgeous.ModelTemComment.Model
		/// </summary>
		[DslDesign::DisplayNameResource("isep.edom.gorgeous.ModelTemComment/Model.DisplayName", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("isep.edom.gorgeous.ModelTemComment/Model.Description", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Comment", PropertyDisplayNameKey="isep.edom.gorgeous.ModelTemComment/Model.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("0dccdccb-11c3-475d-be48-0d74006e8200")]
		public virtual Model Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Model)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Model of a Comment
		/// <summary>
		/// Gets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Model GetModel(Comment element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, CommentDomainRoleId) as Model;
		}
		
		/// <summary>
		/// Sets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModel(Comment element, Model newModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, CommentDomainRoleId, newModel);
		}
		#endregion
		#region Comment domain role code
		
		/// <summary>
		/// Comment domain role Id.
		/// </summary>
		public static readonly global::System.Guid CommentDomainRoleId = new global::System.Guid(0x5bf29baa, 0x356e, 0x4a4b, 0x89, 0xc0, 0xb8, 0xdc, 0xf6, 0x77, 0xa0, 0x6d);
		
		/// <summary>
		/// DomainRole Comment
		/// Descrição de isep.edom.gorgeous.ModelTemComment.Comment
		/// </summary>
		[DslDesign::DisplayNameResource("isep.edom.gorgeous.ModelTemComment/Comment.DisplayName", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("isep.edom.gorgeous.ModelTemComment/Comment.Description", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Model", PropertyDisplayNameKey="isep.edom.gorgeous.ModelTemComment/Comment.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("5bf29baa-356e-4a4b-89c0-b8dcf677a06d")]
		public virtual Comment Comment
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Comment)DslModeling::DomainRoleInfo.GetRolePlayer(this, CommentDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CommentDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Comment of a Model
		/// <summary>
		/// Gets a list of Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Comment> GetComment(Model element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Comment>, Comment>(element, ModelDomainRoleId);
		}
		#endregion
		#region Model link accessor
		/// <summary>
		/// Get the list of ModelTemComment links to a Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::isep.edom.gorgeous.ModelTemComment> GetLinksToComment ( global::isep.edom.gorgeous.Model modelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::isep.edom.gorgeous.ModelTemComment>(modelInstance, global::isep.edom.gorgeous.ModelTemComment.ModelDomainRoleId);
		}
		#endregion
		#region Comment link accessor
		/// <summary>
		/// Get the ModelTemComment link to a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::isep.edom.gorgeous.ModelTemComment GetLinkToModel (global::isep.edom.gorgeous.Comment commentInstance)
		{
			global::System.Collections.Generic.IList<global::isep.edom.gorgeous.ModelTemComment> links = DslModeling::DomainRoleInfo.GetElementLinks<global::isep.edom.gorgeous.ModelTemComment>(commentInstance, global::isep.edom.gorgeous.ModelTemComment.CommentDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Comment not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ModelTemComment instance accessors
		
		/// <summary>
		/// Get any ModelTemComment links between a given Model and a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::isep.edom.gorgeous.ModelTemComment> GetLinks( global::isep.edom.gorgeous.Model source, global::isep.edom.gorgeous.Comment target )
		{
			global::System.Collections.Generic.List<global::isep.edom.gorgeous.ModelTemComment> outLinks = new global::System.Collections.Generic.List<global::isep.edom.gorgeous.ModelTemComment>();
			global::System.Collections.Generic.IList<global::isep.edom.gorgeous.ModelTemComment> links = DslModeling::DomainRoleInfo.GetElementLinks<global::isep.edom.gorgeous.ModelTemComment>(source, global::isep.edom.gorgeous.ModelTemComment.ModelDomainRoleId);
			foreach ( global::isep.edom.gorgeous.ModelTemComment link in links )
			{
				if ( target.Equals(link.Comment) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ModelTemComment link between a given Modeland a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::isep.edom.gorgeous.ModelTemComment GetLink( global::isep.edom.gorgeous.Model source, global::isep.edom.gorgeous.Comment target )
		{
			global::System.Collections.Generic.IList<global::isep.edom.gorgeous.ModelTemComment> links = DslModeling::DomainRoleInfo.GetElementLinks<global::isep.edom.gorgeous.ModelTemComment>(source, global::isep.edom.gorgeous.ModelTemComment.ModelDomainRoleId);
			foreach ( global::isep.edom.gorgeous.ModelTemComment link in links )
			{
				if ( target.Equals(link.Comment) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace isep.edom.gorgeous
{
	/// <summary>
	/// DomainRelationship ModelTemField
	/// Descrição de isep.edom.gorgeous.ModelTemField
	/// </summary>
	[DslDesign::DisplayNameResource("isep.edom.gorgeous.ModelTemField.DisplayName", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("isep.edom.gorgeous.ModelTemField.Description", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::isep.edom.gorgeous.gorgeousDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("d7ac4946-7e8d-4be6-8b5c-b09fd3556063")]
	public partial class ModelTemField : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ModelTemField domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd7ac4946, 0x7e8d, 0x4be6, 0x8b, 0x5c, 0xb0, 0x9f, 0xd3, 0x55, 0x60, 0x63);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ModelTemField link in the same Partition as the given Model
		/// </summary>
		/// <param name="source">Model to use as the source of the relationship.</param>
		/// <param name="target">Field to use as the target of the relationship.</param>
		public ModelTemField(Model source, Field target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ModelTemField.ModelDomainRoleId, source), new DslModeling::RoleAssignment(ModelTemField.FieldDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelTemField(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelTemField(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelTemField(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelTemField(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Model domain role code
		
		/// <summary>
		/// Model domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelDomainRoleId = new global::System.Guid(0x646f8689, 0x357b, 0x40d4, 0xa9, 0xb2, 0x7a, 0x2d, 0xa7, 0x83, 0xcd, 0x10);
		
		/// <summary>
		/// DomainRole Model
		/// Descrição de isep.edom.gorgeous.ModelTemField.Model
		/// </summary>
		[DslDesign::DisplayNameResource("isep.edom.gorgeous.ModelTemField/Model.DisplayName", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("isep.edom.gorgeous.ModelTemField/Model.Description", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Field", PropertyDisplayNameKey="isep.edom.gorgeous.ModelTemField/Model.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("646f8689-357b-40d4-a9b2-7a2da783cd10")]
		public virtual Model Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Model)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Model of a Field
		/// <summary>
		/// Gets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Model GetModel(Field element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, FieldDomainRoleId) as Model;
		}
		
		/// <summary>
		/// Sets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModel(Field element, Model newModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, FieldDomainRoleId, newModel);
		}
		#endregion
		#region Field domain role code
		
		/// <summary>
		/// Field domain role Id.
		/// </summary>
		public static readonly global::System.Guid FieldDomainRoleId = new global::System.Guid(0x53903d18, 0x0895, 0x470b, 0x8a, 0xa2, 0x52, 0x52, 0x46, 0x92, 0x74, 0xb0);
		
		/// <summary>
		/// DomainRole Field
		/// Descrição de isep.edom.gorgeous.ModelTemField.Field
		/// </summary>
		[DslDesign::DisplayNameResource("isep.edom.gorgeous.ModelTemField/Field.DisplayName", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("isep.edom.gorgeous.ModelTemField/Field.Description", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Model", PropertyDisplayNameKey="isep.edom.gorgeous.ModelTemField/Field.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("53903d18-0895-470b-8aa2-5252469274b0")]
		public virtual Field Field
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Field)DslModeling::DomainRoleInfo.GetRolePlayer(this, FieldDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FieldDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Field of a Model
		/// <summary>
		/// Gets a list of Field.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Field> GetField(Model element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Field>, Field>(element, ModelDomainRoleId);
		}
		#endregion
		#region Model link accessor
		/// <summary>
		/// Get the list of ModelTemField links to a Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::isep.edom.gorgeous.ModelTemField> GetLinksToField ( global::isep.edom.gorgeous.Model modelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::isep.edom.gorgeous.ModelTemField>(modelInstance, global::isep.edom.gorgeous.ModelTemField.ModelDomainRoleId);
		}
		#endregion
		#region Field link accessor
		/// <summary>
		/// Get the ModelTemField link to a Field.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::isep.edom.gorgeous.ModelTemField GetLinkToModel (global::isep.edom.gorgeous.Field fieldInstance)
		{
			global::System.Collections.Generic.IList<global::isep.edom.gorgeous.ModelTemField> links = DslModeling::DomainRoleInfo.GetElementLinks<global::isep.edom.gorgeous.ModelTemField>(fieldInstance, global::isep.edom.gorgeous.ModelTemField.FieldDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Field not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ModelTemField instance accessors
		
		/// <summary>
		/// Get any ModelTemField links between a given Model and a Field.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::isep.edom.gorgeous.ModelTemField> GetLinks( global::isep.edom.gorgeous.Model source, global::isep.edom.gorgeous.Field target )
		{
			global::System.Collections.Generic.List<global::isep.edom.gorgeous.ModelTemField> outLinks = new global::System.Collections.Generic.List<global::isep.edom.gorgeous.ModelTemField>();
			global::System.Collections.Generic.IList<global::isep.edom.gorgeous.ModelTemField> links = DslModeling::DomainRoleInfo.GetElementLinks<global::isep.edom.gorgeous.ModelTemField>(source, global::isep.edom.gorgeous.ModelTemField.ModelDomainRoleId);
			foreach ( global::isep.edom.gorgeous.ModelTemField link in links )
			{
				if ( target.Equals(link.Field) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ModelTemField link between a given Modeland a Field.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::isep.edom.gorgeous.ModelTemField GetLink( global::isep.edom.gorgeous.Model source, global::isep.edom.gorgeous.Field target )
		{
			global::System.Collections.Generic.IList<global::isep.edom.gorgeous.ModelTemField> links = DslModeling::DomainRoleInfo.GetElementLinks<global::isep.edom.gorgeous.ModelTemField>(source, global::isep.edom.gorgeous.ModelTemField.ModelDomainRoleId);
			foreach ( global::isep.edom.gorgeous.ModelTemField link in links )
			{
				if ( target.Equals(link.Field) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace isep.edom.gorgeous
{
	/// <summary>
	/// DomainRelationship SubjectReferênciasUser
	/// Descrição de isep.edom.gorgeous.SubjectReferênciasUser
	/// </summary>
	[DslDesign::DisplayNameResource("isep.edom.gorgeous.SubjectReferênciasUser.DisplayName", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("isep.edom.gorgeous.SubjectReferênciasUser.Description", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::isep.edom.gorgeous.gorgeousDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("89b7acc2-6a28-4934-a15a-d86024a5fcd9")]
	public partial class SubjectReferênciasUser : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// SubjectReferênciasUser domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x89b7acc2, 0x6a28, 0x4934, 0xa1, 0x5a, 0xd8, 0x60, 0x24, 0xa5, 0xfc, 0xd9);
	
				
		/// <summary>
		/// Constructor
		/// Creates a SubjectReferênciasUser link in the same Partition as the given Subject
		/// </summary>
		/// <param name="source">Subject to use as the source of the relationship.</param>
		/// <param name="target">User to use as the target of the relationship.</param>
		public SubjectReferênciasUser(Subject source, User target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(SubjectReferênciasUser.SubjectDomainRoleId, source), new DslModeling::RoleAssignment(SubjectReferênciasUser.UserDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SubjectReferênciasUser(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SubjectReferênciasUser(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SubjectReferênciasUser(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SubjectReferênciasUser(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Subject domain role code
		
		/// <summary>
		/// Subject domain role Id.
		/// </summary>
		public static readonly global::System.Guid SubjectDomainRoleId = new global::System.Guid(0xe7855fd2, 0x9953, 0x4387, 0x97, 0xff, 0xe0, 0xf4, 0xcb, 0x87, 0x16, 0x91);
		
		/// <summary>
		/// DomainRole Subject
		/// Descrição de isep.edom.gorgeous.SubjectReferênciasUser.Subject
		/// </summary>
		[DslDesign::DisplayNameResource("isep.edom.gorgeous.SubjectReferênciasUser/Subject.DisplayName", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("isep.edom.gorgeous.SubjectReferênciasUser/Subject.Description", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "User", PropertyDisplayNameKey="isep.edom.gorgeous.SubjectReferênciasUser/Subject.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("e7855fd2-9953-4387-97ff-e0f4cb871691")]
		public virtual Subject Subject
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Subject)DslModeling::DomainRoleInfo.GetRolePlayer(this, SubjectDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SubjectDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Subject of a User
		/// <summary>
		/// Gets a list of Subject.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Subject> GetSubject(User element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Subject>, Subject>(element, UserDomainRoleId);
		}
		#endregion
		#region User domain role code
		
		/// <summary>
		/// User domain role Id.
		/// </summary>
		public static readonly global::System.Guid UserDomainRoleId = new global::System.Guid(0x4d08f00c, 0x00d6, 0x4a8f, 0x9c, 0xfa, 0x0a, 0x39, 0x93, 0x12, 0x01, 0xf6);
		
		/// <summary>
		/// DomainRole User
		/// Descrição de isep.edom.gorgeous.SubjectReferênciasUser.User
		/// </summary>
		[DslDesign::DisplayNameResource("isep.edom.gorgeous.SubjectReferênciasUser/User.DisplayName", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("isep.edom.gorgeous.SubjectReferênciasUser/User.Description", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Subject", PropertyDisplayNameKey="isep.edom.gorgeous.SubjectReferênciasUser/User.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("4d08f00c-00d6-4a8f-9cfa-0a39931201f6")]
		public virtual User User
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (User)DslModeling::DomainRoleInfo.GetRolePlayer(this, UserDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, UserDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access User of a Subject
		/// <summary>
		/// Gets a list of User.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<User> GetUser(Subject element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<User>, User>(element, SubjectDomainRoleId);
		}
		#endregion
		#region Subject link accessor
		/// <summary>
		/// Get the list of SubjectReferênciasUser links to a Subject.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::isep.edom.gorgeous.SubjectReferênciasUser> GetLinksToUser ( global::isep.edom.gorgeous.Subject subjectInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::isep.edom.gorgeous.SubjectReferênciasUser>(subjectInstance, global::isep.edom.gorgeous.SubjectReferênciasUser.SubjectDomainRoleId);
		}
		#endregion
		#region User link accessor
		/// <summary>
		/// Get the list of SubjectReferênciasUser links to a User.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::isep.edom.gorgeous.SubjectReferênciasUser> GetLinksToSubject ( global::isep.edom.gorgeous.User userInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::isep.edom.gorgeous.SubjectReferênciasUser>(userInstance, global::isep.edom.gorgeous.SubjectReferênciasUser.UserDomainRoleId);
		}
		#endregion
		#region SubjectReferênciasUser instance accessors
		
		/// <summary>
		/// Get any SubjectReferênciasUser links between a given Subject and a User.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::isep.edom.gorgeous.SubjectReferênciasUser> GetLinks( global::isep.edom.gorgeous.Subject source, global::isep.edom.gorgeous.User target )
		{
			global::System.Collections.Generic.List<global::isep.edom.gorgeous.SubjectReferênciasUser> outLinks = new global::System.Collections.Generic.List<global::isep.edom.gorgeous.SubjectReferênciasUser>();
			global::System.Collections.Generic.IList<global::isep.edom.gorgeous.SubjectReferênciasUser> links = DslModeling::DomainRoleInfo.GetElementLinks<global::isep.edom.gorgeous.SubjectReferênciasUser>(source, global::isep.edom.gorgeous.SubjectReferênciasUser.SubjectDomainRoleId);
			foreach ( global::isep.edom.gorgeous.SubjectReferênciasUser link in links )
			{
				if ( target.Equals(link.User) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one SubjectReferênciasUser link between a given Subjectand a User.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::isep.edom.gorgeous.SubjectReferênciasUser GetLink( global::isep.edom.gorgeous.Subject source, global::isep.edom.gorgeous.User target )
		{
			global::System.Collections.Generic.IList<global::isep.edom.gorgeous.SubjectReferênciasUser> links = DslModeling::DomainRoleInfo.GetElementLinks<global::isep.edom.gorgeous.SubjectReferênciasUser>(source, global::isep.edom.gorgeous.SubjectReferênciasUser.SubjectDomainRoleId);
			foreach ( global::isep.edom.gorgeous.SubjectReferênciasUser link in links )
			{
				if ( target.Equals(link.User) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace isep.edom.gorgeous
{
	/// <summary>
	/// DomainRelationship ReviewReferênciasUser
	/// Descrição de isep.edom.gorgeous.ReviewReferênciasUser
	/// </summary>
	[DslDesign::DisplayNameResource("isep.edom.gorgeous.ReviewReferênciasUser.DisplayName", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("isep.edom.gorgeous.ReviewReferênciasUser.Description", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::isep.edom.gorgeous.gorgeousDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("d430ee8f-a018-46fa-957c-5cd9246b1978")]
	public partial class ReviewReferênciasUser : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ReviewReferênciasUser domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd430ee8f, 0xa018, 0x46fa, 0x95, 0x7c, 0x5c, 0xd9, 0x24, 0x6b, 0x19, 0x78);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ReviewReferênciasUser link in the same Partition as the given Review
		/// </summary>
		/// <param name="source">Review to use as the source of the relationship.</param>
		/// <param name="target">User to use as the target of the relationship.</param>
		public ReviewReferênciasUser(Review source, User target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ReviewReferênciasUser.ReviewDomainRoleId, source), new DslModeling::RoleAssignment(ReviewReferênciasUser.UserDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ReviewReferênciasUser(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ReviewReferênciasUser(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ReviewReferênciasUser(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ReviewReferênciasUser(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Review domain role code
		
		/// <summary>
		/// Review domain role Id.
		/// </summary>
		public static readonly global::System.Guid ReviewDomainRoleId = new global::System.Guid(0x26fe710c, 0x01b6, 0x4fb5, 0x9d, 0xda, 0xa4, 0x28, 0x88, 0x89, 0xb6, 0xa3);
		
		/// <summary>
		/// DomainRole Review
		/// Descrição de isep.edom.gorgeous.ReviewReferênciasUser.Review
		/// </summary>
		[DslDesign::DisplayNameResource("isep.edom.gorgeous.ReviewReferênciasUser/Review.DisplayName", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("isep.edom.gorgeous.ReviewReferênciasUser/Review.Description", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "User", PropertyDisplayNameKey="isep.edom.gorgeous.ReviewReferênciasUser/Review.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("26fe710c-01b6-4fb5-9dda-a4288889b6a3")]
		public virtual Review Review
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Review)DslModeling::DomainRoleInfo.GetRolePlayer(this, ReviewDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ReviewDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Review of a User
		/// <summary>
		/// Gets a list of Review.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Review> GetReview(User element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Review>, Review>(element, UserDomainRoleId);
		}
		#endregion
		#region User domain role code
		
		/// <summary>
		/// User domain role Id.
		/// </summary>
		public static readonly global::System.Guid UserDomainRoleId = new global::System.Guid(0xb408b425, 0x4470, 0x4c91, 0x85, 0x08, 0x70, 0x19, 0x03, 0x67, 0x30, 0x14);
		
		/// <summary>
		/// DomainRole User
		/// Descrição de isep.edom.gorgeous.ReviewReferênciasUser.User
		/// </summary>
		[DslDesign::DisplayNameResource("isep.edom.gorgeous.ReviewReferênciasUser/User.DisplayName", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("isep.edom.gorgeous.ReviewReferênciasUser/User.Description", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Review", PropertyDisplayNameKey="isep.edom.gorgeous.ReviewReferênciasUser/User.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("b408b425-4470-4c91-8508-701903673014")]
		public virtual User User
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (User)DslModeling::DomainRoleInfo.GetRolePlayer(this, UserDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, UserDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access User of a Review
		/// <summary>
		/// Gets a list of User.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<User> GetUser(Review element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<User>, User>(element, ReviewDomainRoleId);
		}
		#endregion
		#region Review link accessor
		/// <summary>
		/// Get the list of ReviewReferênciasUser links to a Review.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::isep.edom.gorgeous.ReviewReferênciasUser> GetLinksToUser ( global::isep.edom.gorgeous.Review reviewInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::isep.edom.gorgeous.ReviewReferênciasUser>(reviewInstance, global::isep.edom.gorgeous.ReviewReferênciasUser.ReviewDomainRoleId);
		}
		#endregion
		#region User link accessor
		/// <summary>
		/// Get the list of ReviewReferênciasUser links to a User.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::isep.edom.gorgeous.ReviewReferênciasUser> GetLinksToReview ( global::isep.edom.gorgeous.User userInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::isep.edom.gorgeous.ReviewReferênciasUser>(userInstance, global::isep.edom.gorgeous.ReviewReferênciasUser.UserDomainRoleId);
		}
		#endregion
		#region ReviewReferênciasUser instance accessors
		
		/// <summary>
		/// Get any ReviewReferênciasUser links between a given Review and a User.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::isep.edom.gorgeous.ReviewReferênciasUser> GetLinks( global::isep.edom.gorgeous.Review source, global::isep.edom.gorgeous.User target )
		{
			global::System.Collections.Generic.List<global::isep.edom.gorgeous.ReviewReferênciasUser> outLinks = new global::System.Collections.Generic.List<global::isep.edom.gorgeous.ReviewReferênciasUser>();
			global::System.Collections.Generic.IList<global::isep.edom.gorgeous.ReviewReferênciasUser> links = DslModeling::DomainRoleInfo.GetElementLinks<global::isep.edom.gorgeous.ReviewReferênciasUser>(source, global::isep.edom.gorgeous.ReviewReferênciasUser.ReviewDomainRoleId);
			foreach ( global::isep.edom.gorgeous.ReviewReferênciasUser link in links )
			{
				if ( target.Equals(link.User) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ReviewReferênciasUser link between a given Reviewand a User.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::isep.edom.gorgeous.ReviewReferênciasUser GetLink( global::isep.edom.gorgeous.Review source, global::isep.edom.gorgeous.User target )
		{
			global::System.Collections.Generic.IList<global::isep.edom.gorgeous.ReviewReferênciasUser> links = DslModeling::DomainRoleInfo.GetElementLinks<global::isep.edom.gorgeous.ReviewReferênciasUser>(source, global::isep.edom.gorgeous.ReviewReferênciasUser.ReviewDomainRoleId);
			foreach ( global::isep.edom.gorgeous.ReviewReferênciasUser link in links )
			{
				if ( target.Equals(link.User) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace isep.edom.gorgeous
{
	/// <summary>
	/// DomainRelationship CommentReferênciasUser
	/// Descrição de isep.edom.gorgeous.CommentReferênciasUser
	/// </summary>
	[DslDesign::DisplayNameResource("isep.edom.gorgeous.CommentReferênciasUser.DisplayName", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("isep.edom.gorgeous.CommentReferênciasUser.Description", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::isep.edom.gorgeous.gorgeousDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("97004d69-8f8c-4fff-9037-66183739cc3c")]
	public partial class CommentReferênciasUser : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// CommentReferênciasUser domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x97004d69, 0x8f8c, 0x4fff, 0x90, 0x37, 0x66, 0x18, 0x37, 0x39, 0xcc, 0x3c);
	
				
		/// <summary>
		/// Constructor
		/// Creates a CommentReferênciasUser link in the same Partition as the given Comment
		/// </summary>
		/// <param name="source">Comment to use as the source of the relationship.</param>
		/// <param name="target">User to use as the target of the relationship.</param>
		public CommentReferênciasUser(Comment source, User target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(CommentReferênciasUser.CommentDomainRoleId, source), new DslModeling::RoleAssignment(CommentReferênciasUser.UserDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CommentReferênciasUser(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CommentReferênciasUser(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CommentReferênciasUser(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CommentReferênciasUser(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Comment domain role code
		
		/// <summary>
		/// Comment domain role Id.
		/// </summary>
		public static readonly global::System.Guid CommentDomainRoleId = new global::System.Guid(0x9cc02037, 0xe6c0, 0x4c1e, 0x9b, 0x33, 0x13, 0x0d, 0x05, 0xa0, 0x10, 0xe6);
		
		/// <summary>
		/// DomainRole Comment
		/// Descrição de isep.edom.gorgeous.CommentReferênciasUser.Comment
		/// </summary>
		[DslDesign::DisplayNameResource("isep.edom.gorgeous.CommentReferênciasUser/Comment.DisplayName", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("isep.edom.gorgeous.CommentReferênciasUser/Comment.Description", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "User", PropertyDisplayNameKey="isep.edom.gorgeous.CommentReferênciasUser/Comment.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("9cc02037-e6c0-4c1e-9b33-130d05a010e6")]
		public virtual Comment Comment
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Comment)DslModeling::DomainRoleInfo.GetRolePlayer(this, CommentDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CommentDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Comment of a User
		/// <summary>
		/// Gets a list of Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Comment> GetComment(User element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Comment>, Comment>(element, UserDomainRoleId);
		}
		#endregion
		#region User domain role code
		
		/// <summary>
		/// User domain role Id.
		/// </summary>
		public static readonly global::System.Guid UserDomainRoleId = new global::System.Guid(0xd1d3df43, 0x0708, 0x4aed, 0xaf, 0x8e, 0x50, 0xde, 0x89, 0x8a, 0x84, 0x9a);
		
		/// <summary>
		/// DomainRole User
		/// Descrição de isep.edom.gorgeous.CommentReferênciasUser.User
		/// </summary>
		[DslDesign::DisplayNameResource("isep.edom.gorgeous.CommentReferênciasUser/User.DisplayName", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("isep.edom.gorgeous.CommentReferênciasUser/User.Description", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Comment", PropertyDisplayNameKey="isep.edom.gorgeous.CommentReferênciasUser/User.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("d1d3df43-0708-4aed-af8e-50de898a849a")]
		public virtual User User
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (User)DslModeling::DomainRoleInfo.GetRolePlayer(this, UserDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, UserDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access User of a Comment
		/// <summary>
		/// Gets a list of User.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<User> GetUser(Comment element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<User>, User>(element, CommentDomainRoleId);
		}
		#endregion
		#region Comment link accessor
		/// <summary>
		/// Get the list of CommentReferênciasUser links to a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::isep.edom.gorgeous.CommentReferênciasUser> GetLinksToUser ( global::isep.edom.gorgeous.Comment commentInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::isep.edom.gorgeous.CommentReferênciasUser>(commentInstance, global::isep.edom.gorgeous.CommentReferênciasUser.CommentDomainRoleId);
		}
		#endregion
		#region User link accessor
		/// <summary>
		/// Get the list of CommentReferênciasUser links to a User.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::isep.edom.gorgeous.CommentReferênciasUser> GetLinksToComment ( global::isep.edom.gorgeous.User userInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::isep.edom.gorgeous.CommentReferênciasUser>(userInstance, global::isep.edom.gorgeous.CommentReferênciasUser.UserDomainRoleId);
		}
		#endregion
		#region CommentReferênciasUser instance accessors
		
		/// <summary>
		/// Get any CommentReferênciasUser links between a given Comment and a User.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::isep.edom.gorgeous.CommentReferênciasUser> GetLinks( global::isep.edom.gorgeous.Comment source, global::isep.edom.gorgeous.User target )
		{
			global::System.Collections.Generic.List<global::isep.edom.gorgeous.CommentReferênciasUser> outLinks = new global::System.Collections.Generic.List<global::isep.edom.gorgeous.CommentReferênciasUser>();
			global::System.Collections.Generic.IList<global::isep.edom.gorgeous.CommentReferênciasUser> links = DslModeling::DomainRoleInfo.GetElementLinks<global::isep.edom.gorgeous.CommentReferênciasUser>(source, global::isep.edom.gorgeous.CommentReferênciasUser.CommentDomainRoleId);
			foreach ( global::isep.edom.gorgeous.CommentReferênciasUser link in links )
			{
				if ( target.Equals(link.User) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one CommentReferênciasUser link between a given Commentand a User.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::isep.edom.gorgeous.CommentReferênciasUser GetLink( global::isep.edom.gorgeous.Comment source, global::isep.edom.gorgeous.User target )
		{
			global::System.Collections.Generic.IList<global::isep.edom.gorgeous.CommentReferênciasUser> links = DslModeling::DomainRoleInfo.GetElementLinks<global::isep.edom.gorgeous.CommentReferênciasUser>(source, global::isep.edom.gorgeous.CommentReferênciasUser.CommentDomainRoleId);
			foreach ( global::isep.edom.gorgeous.CommentReferênciasUser link in links )
			{
				if ( target.Equals(link.User) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace isep.edom.gorgeous
{
	/// <summary>
	/// DomainRelationship CommentReferênciasField
	/// Descrição de isep.edom.gorgeous.CommentReferênciasField
	/// </summary>
	[DslDesign::DisplayNameResource("isep.edom.gorgeous.CommentReferênciasField.DisplayName", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("isep.edom.gorgeous.CommentReferênciasField.Description", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::isep.edom.gorgeous.gorgeousDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("555f75a5-3070-4125-9491-5a2f02f0280a")]
	public partial class CommentReferênciasField : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// CommentReferênciasField domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x555f75a5, 0x3070, 0x4125, 0x94, 0x91, 0x5a, 0x2f, 0x02, 0xf0, 0x28, 0x0a);
	
				
		/// <summary>
		/// Constructor
		/// Creates a CommentReferênciasField link in the same Partition as the given Comment
		/// </summary>
		/// <param name="source">Comment to use as the source of the relationship.</param>
		/// <param name="target">Field to use as the target of the relationship.</param>
		public CommentReferênciasField(Comment source, Field target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(CommentReferênciasField.CommentDomainRoleId, source), new DslModeling::RoleAssignment(CommentReferênciasField.FieldDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CommentReferênciasField(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CommentReferênciasField(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CommentReferênciasField(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CommentReferênciasField(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Comment domain role code
		
		/// <summary>
		/// Comment domain role Id.
		/// </summary>
		public static readonly global::System.Guid CommentDomainRoleId = new global::System.Guid(0xba795b6c, 0xe8af, 0x4ae7, 0x9d, 0x4a, 0x72, 0x49, 0x87, 0x51, 0x1b, 0x8b);
		
		/// <summary>
		/// DomainRole Comment
		/// Descrição de isep.edom.gorgeous.CommentReferênciasField.Comment
		/// </summary>
		[DslDesign::DisplayNameResource("isep.edom.gorgeous.CommentReferênciasField/Comment.DisplayName", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("isep.edom.gorgeous.CommentReferênciasField/Comment.Description", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Field", PropertyDisplayNameKey="isep.edom.gorgeous.CommentReferênciasField/Comment.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("ba795b6c-e8af-4ae7-9d4a-724987511b8b")]
		public virtual Comment Comment
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Comment)DslModeling::DomainRoleInfo.GetRolePlayer(this, CommentDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CommentDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Comment of a Field
		/// <summary>
		/// Gets a list of Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Comment> GetComment(Field element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Comment>, Comment>(element, FieldDomainRoleId);
		}
		#endregion
		#region Field domain role code
		
		/// <summary>
		/// Field domain role Id.
		/// </summary>
		public static readonly global::System.Guid FieldDomainRoleId = new global::System.Guid(0x7c3196aa, 0x6824, 0x40b6, 0xa5, 0x4f, 0x98, 0x90, 0x33, 0xf7, 0x1d, 0x88);
		
		/// <summary>
		/// DomainRole Field
		/// Descrição de isep.edom.gorgeous.CommentReferênciasField.Field
		/// </summary>
		[DslDesign::DisplayNameResource("isep.edom.gorgeous.CommentReferênciasField/Field.DisplayName", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("isep.edom.gorgeous.CommentReferênciasField/Field.Description", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Comment", PropertyDisplayNameKey="isep.edom.gorgeous.CommentReferênciasField/Field.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("7c3196aa-6824-40b6-a54f-989033f71d88")]
		public virtual Field Field
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Field)DslModeling::DomainRoleInfo.GetRolePlayer(this, FieldDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FieldDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Field of a Comment
		/// <summary>
		/// Gets a list of Field.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Field> GetField(Comment element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Field>, Field>(element, CommentDomainRoleId);
		}
		#endregion
		#region Comment link accessor
		/// <summary>
		/// Get the list of CommentReferênciasField links to a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::isep.edom.gorgeous.CommentReferênciasField> GetLinksToField ( global::isep.edom.gorgeous.Comment commentInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::isep.edom.gorgeous.CommentReferênciasField>(commentInstance, global::isep.edom.gorgeous.CommentReferênciasField.CommentDomainRoleId);
		}
		#endregion
		#region Field link accessor
		/// <summary>
		/// Get the list of CommentReferênciasField links to a Field.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::isep.edom.gorgeous.CommentReferênciasField> GetLinksToComment ( global::isep.edom.gorgeous.Field fieldInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::isep.edom.gorgeous.CommentReferênciasField>(fieldInstance, global::isep.edom.gorgeous.CommentReferênciasField.FieldDomainRoleId);
		}
		#endregion
		#region CommentReferênciasField instance accessors
		
		/// <summary>
		/// Get any CommentReferênciasField links between a given Comment and a Field.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::isep.edom.gorgeous.CommentReferênciasField> GetLinks( global::isep.edom.gorgeous.Comment source, global::isep.edom.gorgeous.Field target )
		{
			global::System.Collections.Generic.List<global::isep.edom.gorgeous.CommentReferênciasField> outLinks = new global::System.Collections.Generic.List<global::isep.edom.gorgeous.CommentReferênciasField>();
			global::System.Collections.Generic.IList<global::isep.edom.gorgeous.CommentReferênciasField> links = DslModeling::DomainRoleInfo.GetElementLinks<global::isep.edom.gorgeous.CommentReferênciasField>(source, global::isep.edom.gorgeous.CommentReferênciasField.CommentDomainRoleId);
			foreach ( global::isep.edom.gorgeous.CommentReferênciasField link in links )
			{
				if ( target.Equals(link.Field) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one CommentReferênciasField link between a given Commentand a Field.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::isep.edom.gorgeous.CommentReferênciasField GetLink( global::isep.edom.gorgeous.Comment source, global::isep.edom.gorgeous.Field target )
		{
			global::System.Collections.Generic.IList<global::isep.edom.gorgeous.CommentReferênciasField> links = DslModeling::DomainRoleInfo.GetElementLinks<global::isep.edom.gorgeous.CommentReferênciasField>(source, global::isep.edom.gorgeous.CommentReferênciasField.CommentDomainRoleId);
			foreach ( global::isep.edom.gorgeous.CommentReferênciasField link in links )
			{
				if ( target.Equals(link.Field) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace isep.edom.gorgeous
{
	/// <summary>
	/// DomainRelationship ReviewReferênciasField
	/// Descrição de isep.edom.gorgeous.ReviewReferênciasField
	/// </summary>
	[DslDesign::DisplayNameResource("isep.edom.gorgeous.ReviewReferênciasField.DisplayName", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("isep.edom.gorgeous.ReviewReferênciasField.Description", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::isep.edom.gorgeous.gorgeousDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("ca635653-3473-43b3-954f-dad15db4ca98")]
	public partial class ReviewReferênciasField : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ReviewReferênciasField domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xca635653, 0x3473, 0x43b3, 0x95, 0x4f, 0xda, 0xd1, 0x5d, 0xb4, 0xca, 0x98);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ReviewReferênciasField link in the same Partition as the given Review
		/// </summary>
		/// <param name="source">Review to use as the source of the relationship.</param>
		/// <param name="target">Field to use as the target of the relationship.</param>
		public ReviewReferênciasField(Review source, Field target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ReviewReferênciasField.ReviewDomainRoleId, source), new DslModeling::RoleAssignment(ReviewReferênciasField.FieldDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ReviewReferênciasField(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ReviewReferênciasField(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ReviewReferênciasField(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ReviewReferênciasField(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Review domain role code
		
		/// <summary>
		/// Review domain role Id.
		/// </summary>
		public static readonly global::System.Guid ReviewDomainRoleId = new global::System.Guid(0x975a3c33, 0xb5ce, 0x481a, 0x86, 0xc5, 0x96, 0x21, 0xe0, 0xeb, 0x15, 0xa3);
		
		/// <summary>
		/// DomainRole Review
		/// Descrição de isep.edom.gorgeous.ReviewReferênciasField.Review
		/// </summary>
		[DslDesign::DisplayNameResource("isep.edom.gorgeous.ReviewReferênciasField/Review.DisplayName", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("isep.edom.gorgeous.ReviewReferênciasField/Review.Description", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Field", PropertyDisplayNameKey="isep.edom.gorgeous.ReviewReferênciasField/Review.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("975a3c33-b5ce-481a-86c5-9621e0eb15a3")]
		public virtual Review Review
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Review)DslModeling::DomainRoleInfo.GetRolePlayer(this, ReviewDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ReviewDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Review of a Field
		/// <summary>
		/// Gets a list of Review.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Review> GetReview(Field element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Review>, Review>(element, FieldDomainRoleId);
		}
		#endregion
		#region Field domain role code
		
		/// <summary>
		/// Field domain role Id.
		/// </summary>
		public static readonly global::System.Guid FieldDomainRoleId = new global::System.Guid(0x018aa91d, 0x8e45, 0x436a, 0xa8, 0x45, 0x24, 0x3c, 0xa6, 0xc1, 0xb7, 0x6b);
		
		/// <summary>
		/// DomainRole Field
		/// Descrição de isep.edom.gorgeous.ReviewReferênciasField.Field
		/// </summary>
		[DslDesign::DisplayNameResource("isep.edom.gorgeous.ReviewReferênciasField/Field.DisplayName", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("isep.edom.gorgeous.ReviewReferênciasField/Field.Description", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Review", PropertyDisplayNameKey="isep.edom.gorgeous.ReviewReferênciasField/Field.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("018aa91d-8e45-436a-a845-243ca6c1b76b")]
		public virtual Field Field
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Field)DslModeling::DomainRoleInfo.GetRolePlayer(this, FieldDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FieldDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Field of a Review
		/// <summary>
		/// Gets a list of Field.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Field> GetField(Review element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Field>, Field>(element, ReviewDomainRoleId);
		}
		#endregion
		#region Review link accessor
		/// <summary>
		/// Get the list of ReviewReferênciasField links to a Review.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::isep.edom.gorgeous.ReviewReferênciasField> GetLinksToField ( global::isep.edom.gorgeous.Review reviewInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::isep.edom.gorgeous.ReviewReferênciasField>(reviewInstance, global::isep.edom.gorgeous.ReviewReferênciasField.ReviewDomainRoleId);
		}
		#endregion
		#region Field link accessor
		/// <summary>
		/// Get the list of ReviewReferênciasField links to a Field.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::isep.edom.gorgeous.ReviewReferênciasField> GetLinksToReview ( global::isep.edom.gorgeous.Field fieldInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::isep.edom.gorgeous.ReviewReferênciasField>(fieldInstance, global::isep.edom.gorgeous.ReviewReferênciasField.FieldDomainRoleId);
		}
		#endregion
		#region ReviewReferênciasField instance accessors
		
		/// <summary>
		/// Get any ReviewReferênciasField links between a given Review and a Field.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::isep.edom.gorgeous.ReviewReferênciasField> GetLinks( global::isep.edom.gorgeous.Review source, global::isep.edom.gorgeous.Field target )
		{
			global::System.Collections.Generic.List<global::isep.edom.gorgeous.ReviewReferênciasField> outLinks = new global::System.Collections.Generic.List<global::isep.edom.gorgeous.ReviewReferênciasField>();
			global::System.Collections.Generic.IList<global::isep.edom.gorgeous.ReviewReferênciasField> links = DslModeling::DomainRoleInfo.GetElementLinks<global::isep.edom.gorgeous.ReviewReferênciasField>(source, global::isep.edom.gorgeous.ReviewReferênciasField.ReviewDomainRoleId);
			foreach ( global::isep.edom.gorgeous.ReviewReferênciasField link in links )
			{
				if ( target.Equals(link.Field) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ReviewReferênciasField link between a given Reviewand a Field.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::isep.edom.gorgeous.ReviewReferênciasField GetLink( global::isep.edom.gorgeous.Review source, global::isep.edom.gorgeous.Field target )
		{
			global::System.Collections.Generic.IList<global::isep.edom.gorgeous.ReviewReferênciasField> links = DslModeling::DomainRoleInfo.GetElementLinks<global::isep.edom.gorgeous.ReviewReferênciasField>(source, global::isep.edom.gorgeous.ReviewReferênciasField.ReviewDomainRoleId);
			foreach ( global::isep.edom.gorgeous.ReviewReferênciasField link in links )
			{
				if ( target.Equals(link.Field) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace isep.edom.gorgeous
{
	/// <summary>
	/// DomainRelationship SubjectReferênciasField
	/// Descrição de isep.edom.gorgeous.SubjectReferênciasField
	/// </summary>
	[DslDesign::DisplayNameResource("isep.edom.gorgeous.SubjectReferênciasField.DisplayName", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("isep.edom.gorgeous.SubjectReferênciasField.Description", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::isep.edom.gorgeous.gorgeousDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("babaaa65-4349-4d14-ac6a-318ba0df1e0f")]
	public partial class SubjectReferênciasField : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// SubjectReferênciasField domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xbabaaa65, 0x4349, 0x4d14, 0xac, 0x6a, 0x31, 0x8b, 0xa0, 0xdf, 0x1e, 0x0f);
	
				
		/// <summary>
		/// Constructor
		/// Creates a SubjectReferênciasField link in the same Partition as the given Subject
		/// </summary>
		/// <param name="source">Subject to use as the source of the relationship.</param>
		/// <param name="target">Field to use as the target of the relationship.</param>
		public SubjectReferênciasField(Subject source, Field target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(SubjectReferênciasField.SubjectDomainRoleId, source), new DslModeling::RoleAssignment(SubjectReferênciasField.FieldDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SubjectReferênciasField(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SubjectReferênciasField(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SubjectReferênciasField(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SubjectReferênciasField(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Subject domain role code
		
		/// <summary>
		/// Subject domain role Id.
		/// </summary>
		public static readonly global::System.Guid SubjectDomainRoleId = new global::System.Guid(0x6d36a0ad, 0xc204, 0x43eb, 0xa3, 0xb2, 0x47, 0xfc, 0x1d, 0x7a, 0xd8, 0x2a);
		
		/// <summary>
		/// DomainRole Subject
		/// Descrição de isep.edom.gorgeous.SubjectReferênciasField.Subject
		/// </summary>
		[DslDesign::DisplayNameResource("isep.edom.gorgeous.SubjectReferênciasField/Subject.DisplayName", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("isep.edom.gorgeous.SubjectReferênciasField/Subject.Description", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Field", PropertyDisplayNameKey="isep.edom.gorgeous.SubjectReferênciasField/Subject.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("6d36a0ad-c204-43eb-a3b2-47fc1d7ad82a")]
		public virtual Subject Subject
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Subject)DslModeling::DomainRoleInfo.GetRolePlayer(this, SubjectDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SubjectDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Subject of a Field
		/// <summary>
		/// Gets a list of Subject.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Subject> GetSubject(Field element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Subject>, Subject>(element, FieldDomainRoleId);
		}
		#endregion
		#region Field domain role code
		
		/// <summary>
		/// Field domain role Id.
		/// </summary>
		public static readonly global::System.Guid FieldDomainRoleId = new global::System.Guid(0x9dfa0492, 0xd4c2, 0x45f7, 0x85, 0xde, 0x39, 0x66, 0xf3, 0xb7, 0x84, 0x52);
		
		/// <summary>
		/// DomainRole Field
		/// Descrição de isep.edom.gorgeous.SubjectReferênciasField.Field
		/// </summary>
		[DslDesign::DisplayNameResource("isep.edom.gorgeous.SubjectReferênciasField/Field.DisplayName", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("isep.edom.gorgeous.SubjectReferênciasField/Field.Description", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Subject", PropertyDisplayNameKey="isep.edom.gorgeous.SubjectReferênciasField/Field.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("9dfa0492-d4c2-45f7-85de-3966f3b78452")]
		public virtual Field Field
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Field)DslModeling::DomainRoleInfo.GetRolePlayer(this, FieldDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FieldDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Field of a Subject
		/// <summary>
		/// Gets a list of Field.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Field> GetField(Subject element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Field>, Field>(element, SubjectDomainRoleId);
		}
		#endregion
		#region Subject link accessor
		/// <summary>
		/// Get the list of SubjectReferênciasField links to a Subject.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::isep.edom.gorgeous.SubjectReferênciasField> GetLinksToField ( global::isep.edom.gorgeous.Subject subjectInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::isep.edom.gorgeous.SubjectReferênciasField>(subjectInstance, global::isep.edom.gorgeous.SubjectReferênciasField.SubjectDomainRoleId);
		}
		#endregion
		#region Field link accessor
		/// <summary>
		/// Get the list of SubjectReferênciasField links to a Field.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::isep.edom.gorgeous.SubjectReferênciasField> GetLinksToSubject ( global::isep.edom.gorgeous.Field fieldInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::isep.edom.gorgeous.SubjectReferênciasField>(fieldInstance, global::isep.edom.gorgeous.SubjectReferênciasField.FieldDomainRoleId);
		}
		#endregion
		#region SubjectReferênciasField instance accessors
		
		/// <summary>
		/// Get any SubjectReferênciasField links between a given Subject and a Field.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::isep.edom.gorgeous.SubjectReferênciasField> GetLinks( global::isep.edom.gorgeous.Subject source, global::isep.edom.gorgeous.Field target )
		{
			global::System.Collections.Generic.List<global::isep.edom.gorgeous.SubjectReferênciasField> outLinks = new global::System.Collections.Generic.List<global::isep.edom.gorgeous.SubjectReferênciasField>();
			global::System.Collections.Generic.IList<global::isep.edom.gorgeous.SubjectReferênciasField> links = DslModeling::DomainRoleInfo.GetElementLinks<global::isep.edom.gorgeous.SubjectReferênciasField>(source, global::isep.edom.gorgeous.SubjectReferênciasField.SubjectDomainRoleId);
			foreach ( global::isep.edom.gorgeous.SubjectReferênciasField link in links )
			{
				if ( target.Equals(link.Field) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one SubjectReferênciasField link between a given Subjectand a Field.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::isep.edom.gorgeous.SubjectReferênciasField GetLink( global::isep.edom.gorgeous.Subject source, global::isep.edom.gorgeous.Field target )
		{
			global::System.Collections.Generic.IList<global::isep.edom.gorgeous.SubjectReferênciasField> links = DslModeling::DomainRoleInfo.GetElementLinks<global::isep.edom.gorgeous.SubjectReferênciasField>(source, global::isep.edom.gorgeous.SubjectReferênciasField.SubjectDomainRoleId);
			foreach ( global::isep.edom.gorgeous.SubjectReferênciasField link in links )
			{
				if ( target.Equals(link.Field) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace isep.edom.gorgeous
{
	/// <summary>
	/// DomainRelationship UserReferênciasField
	/// Descrição de isep.edom.gorgeous.UserReferênciasField
	/// </summary>
	[DslDesign::DisplayNameResource("isep.edom.gorgeous.UserReferênciasField.DisplayName", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("isep.edom.gorgeous.UserReferênciasField.Description", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::isep.edom.gorgeous.gorgeousDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("d52004a8-e794-4eac-9c59-23df97cdbc58")]
	public partial class UserReferênciasField : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// UserReferênciasField domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd52004a8, 0xe794, 0x4eac, 0x9c, 0x59, 0x23, 0xdf, 0x97, 0xcd, 0xbc, 0x58);
	
				
		/// <summary>
		/// Constructor
		/// Creates a UserReferênciasField link in the same Partition as the given User
		/// </summary>
		/// <param name="source">User to use as the source of the relationship.</param>
		/// <param name="target">Field to use as the target of the relationship.</param>
		public UserReferênciasField(User source, Field target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(UserReferênciasField.UserDomainRoleId, source), new DslModeling::RoleAssignment(UserReferênciasField.FieldDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public UserReferênciasField(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public UserReferênciasField(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public UserReferênciasField(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public UserReferênciasField(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region User domain role code
		
		/// <summary>
		/// User domain role Id.
		/// </summary>
		public static readonly global::System.Guid UserDomainRoleId = new global::System.Guid(0x94a7f3a2, 0x28b7, 0x4c8a, 0x9d, 0x25, 0x9f, 0x59, 0x50, 0x71, 0x2f, 0x0e);
		
		/// <summary>
		/// DomainRole User
		/// Descrição de isep.edom.gorgeous.UserReferênciasField.User
		/// </summary>
		[DslDesign::DisplayNameResource("isep.edom.gorgeous.UserReferênciasField/User.DisplayName", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("isep.edom.gorgeous.UserReferênciasField/User.Description", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Field", PropertyDisplayNameKey="isep.edom.gorgeous.UserReferênciasField/User.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("94a7f3a2-28b7-4c8a-9d25-9f5950712f0e")]
		public virtual User User
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (User)DslModeling::DomainRoleInfo.GetRolePlayer(this, UserDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, UserDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access User of a Field
		/// <summary>
		/// Gets a list of User.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<User> GetUser(Field element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<User>, User>(element, FieldDomainRoleId);
		}
		#endregion
		#region Field domain role code
		
		/// <summary>
		/// Field domain role Id.
		/// </summary>
		public static readonly global::System.Guid FieldDomainRoleId = new global::System.Guid(0xf3312ba5, 0x9f86, 0x4b18, 0xb7, 0x7c, 0x29, 0xd4, 0xce, 0xb2, 0x1e, 0x70);
		
		/// <summary>
		/// DomainRole Field
		/// Descrição de isep.edom.gorgeous.UserReferênciasField.Field
		/// </summary>
		[DslDesign::DisplayNameResource("isep.edom.gorgeous.UserReferênciasField/Field.DisplayName", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("isep.edom.gorgeous.UserReferênciasField/Field.Description", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "User", PropertyDisplayNameKey="isep.edom.gorgeous.UserReferênciasField/Field.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("f3312ba5-9f86-4b18-b77c-29d4ceb21e70")]
		public virtual Field Field
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Field)DslModeling::DomainRoleInfo.GetRolePlayer(this, FieldDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FieldDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Field of a User
		/// <summary>
		/// Gets a list of Field.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Field> GetField(User element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Field>, Field>(element, UserDomainRoleId);
		}
		#endregion
		#region User link accessor
		/// <summary>
		/// Get the list of UserReferênciasField links to a User.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::isep.edom.gorgeous.UserReferênciasField> GetLinksToField ( global::isep.edom.gorgeous.User userInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::isep.edom.gorgeous.UserReferênciasField>(userInstance, global::isep.edom.gorgeous.UserReferênciasField.UserDomainRoleId);
		}
		#endregion
		#region Field link accessor
		/// <summary>
		/// Get the list of UserReferênciasField links to a Field.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::isep.edom.gorgeous.UserReferênciasField> GetLinksToUser ( global::isep.edom.gorgeous.Field fieldInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::isep.edom.gorgeous.UserReferênciasField>(fieldInstance, global::isep.edom.gorgeous.UserReferênciasField.FieldDomainRoleId);
		}
		#endregion
		#region UserReferênciasField instance accessors
		
		/// <summary>
		/// Get any UserReferênciasField links between a given User and a Field.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::isep.edom.gorgeous.UserReferênciasField> GetLinks( global::isep.edom.gorgeous.User source, global::isep.edom.gorgeous.Field target )
		{
			global::System.Collections.Generic.List<global::isep.edom.gorgeous.UserReferênciasField> outLinks = new global::System.Collections.Generic.List<global::isep.edom.gorgeous.UserReferênciasField>();
			global::System.Collections.Generic.IList<global::isep.edom.gorgeous.UserReferênciasField> links = DslModeling::DomainRoleInfo.GetElementLinks<global::isep.edom.gorgeous.UserReferênciasField>(source, global::isep.edom.gorgeous.UserReferênciasField.UserDomainRoleId);
			foreach ( global::isep.edom.gorgeous.UserReferênciasField link in links )
			{
				if ( target.Equals(link.Field) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one UserReferênciasField link between a given Userand a Field.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::isep.edom.gorgeous.UserReferênciasField GetLink( global::isep.edom.gorgeous.User source, global::isep.edom.gorgeous.Field target )
		{
			global::System.Collections.Generic.IList<global::isep.edom.gorgeous.UserReferênciasField> links = DslModeling::DomainRoleInfo.GetElementLinks<global::isep.edom.gorgeous.UserReferênciasField>(source, global::isep.edom.gorgeous.UserReferênciasField.UserDomainRoleId);
			foreach ( global::isep.edom.gorgeous.UserReferênciasField link in links )
			{
				if ( target.Equals(link.Field) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace isep.edom.gorgeous
{
	/// <summary>
	/// DomainRelationship CommentReferênciasDestinoComment
	/// Descrição de isep.edom.gorgeous.CommentReferênciasDestinoComment
	/// </summary>
	[DslDesign::DisplayNameResource("isep.edom.gorgeous.CommentReferênciasDestinoComment.DisplayName", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("isep.edom.gorgeous.CommentReferênciasDestinoComment.Description", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::isep.edom.gorgeous.gorgeousDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("fbbd53e9-a449-460e-8c95-7391d5614d4b")]
	public partial class CommentReferênciasDestinoComment : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// CommentReferênciasDestinoComment domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xfbbd53e9, 0xa449, 0x460e, 0x8c, 0x95, 0x73, 0x91, 0xd5, 0x61, 0x4d, 0x4b);
	
				
		/// <summary>
		/// Constructor
		/// Creates a CommentReferênciasDestinoComment link in the same Partition as the given Comment
		/// </summary>
		/// <param name="source">Comment to use as the source of the relationship.</param>
		/// <param name="target">Comment to use as the target of the relationship.</param>
		public CommentReferênciasDestinoComment(Comment source, Comment target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(CommentReferênciasDestinoComment.OrigemCommentDomainRoleId, source), new DslModeling::RoleAssignment(CommentReferênciasDestinoComment.DestinoCommentDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CommentReferênciasDestinoComment(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CommentReferênciasDestinoComment(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CommentReferênciasDestinoComment(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CommentReferênciasDestinoComment(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region OrigemComment domain role code
		
		/// <summary>
		/// OrigemComment domain role Id.
		/// </summary>
		public static readonly global::System.Guid OrigemCommentDomainRoleId = new global::System.Guid(0x38cd5560, 0xeb8e, 0x408d, 0xb1, 0xc6, 0xac, 0xf2, 0x8b, 0x48, 0x51, 0x51);
		
		/// <summary>
		/// DomainRole OrigemComment
		/// Descrição de isep.edom.gorgeous.CommentReferênciasDestinoComment.OrigemComment
		/// </summary>
		[DslDesign::DisplayNameResource("isep.edom.gorgeous.CommentReferênciasDestinoComment/OrigemComment.DisplayName", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("isep.edom.gorgeous.CommentReferênciasDestinoComment/OrigemComment.Description", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "DestinoComment", PropertyDisplayNameKey="isep.edom.gorgeous.CommentReferênciasDestinoComment/OrigemComment.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("38cd5560-eb8e-408d-b1c6-acf28b485151")]
		public virtual Comment OrigemComment
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Comment)DslModeling::DomainRoleInfo.GetRolePlayer(this, OrigemCommentDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, OrigemCommentDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access OrigemComment of a Comment
		/// <summary>
		/// Gets a list of OrigemComment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Comment> GetOrigemComment(Comment element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Comment>, Comment>(element, DestinoCommentDomainRoleId);
		}
		#endregion
		#region DestinoComment domain role code
		
		/// <summary>
		/// DestinoComment domain role Id.
		/// </summary>
		public static readonly global::System.Guid DestinoCommentDomainRoleId = new global::System.Guid(0xa96a1ba6, 0x082a, 0x41a1, 0x81, 0x3a, 0x57, 0xa7, 0xf2, 0xf8, 0xf5, 0x7d);
		
		/// <summary>
		/// DomainRole DestinoComment
		/// Descrição de isep.edom.gorgeous.CommentReferênciasDestinoComment.DestinoComment
		/// </summary>
		[DslDesign::DisplayNameResource("isep.edom.gorgeous.CommentReferênciasDestinoComment/DestinoComment.DisplayName", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("isep.edom.gorgeous.CommentReferênciasDestinoComment/DestinoComment.Description", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "OrigemComment", PropertyDisplayNameKey="isep.edom.gorgeous.CommentReferênciasDestinoComment/DestinoComment.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("a96a1ba6-082a-41a1-813a-57a7f2f8f57d")]
		public virtual Comment DestinoComment
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Comment)DslModeling::DomainRoleInfo.GetRolePlayer(this, DestinoCommentDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DestinoCommentDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DestinoComment of a Comment
		/// <summary>
		/// Gets a list of DestinoComment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Comment> GetDestinoComment(Comment element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Comment>, Comment>(element, OrigemCommentDomainRoleId);
		}
		#endregion
		#region OrigemComment link accessor
		/// <summary>
		/// Get the list of CommentReferênciasDestinoComment links to a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::isep.edom.gorgeous.CommentReferênciasDestinoComment> GetLinksToDestinoComment ( global::isep.edom.gorgeous.Comment origemCommentInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::isep.edom.gorgeous.CommentReferênciasDestinoComment>(origemCommentInstance, global::isep.edom.gorgeous.CommentReferênciasDestinoComment.OrigemCommentDomainRoleId);
		}
		#endregion
		#region DestinoComment link accessor
		/// <summary>
		/// Get the list of CommentReferênciasDestinoComment links to a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::isep.edom.gorgeous.CommentReferênciasDestinoComment> GetLinksToOrigemComment ( global::isep.edom.gorgeous.Comment destinoCommentInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::isep.edom.gorgeous.CommentReferênciasDestinoComment>(destinoCommentInstance, global::isep.edom.gorgeous.CommentReferênciasDestinoComment.DestinoCommentDomainRoleId);
		}
		#endregion
		#region CommentReferênciasDestinoComment instance accessors
		
		/// <summary>
		/// Get any CommentReferênciasDestinoComment links between a given Comment and a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::isep.edom.gorgeous.CommentReferênciasDestinoComment> GetLinks( global::isep.edom.gorgeous.Comment source, global::isep.edom.gorgeous.Comment target )
		{
			global::System.Collections.Generic.List<global::isep.edom.gorgeous.CommentReferênciasDestinoComment> outLinks = new global::System.Collections.Generic.List<global::isep.edom.gorgeous.CommentReferênciasDestinoComment>();
			global::System.Collections.Generic.IList<global::isep.edom.gorgeous.CommentReferênciasDestinoComment> links = DslModeling::DomainRoleInfo.GetElementLinks<global::isep.edom.gorgeous.CommentReferênciasDestinoComment>(source, global::isep.edom.gorgeous.CommentReferênciasDestinoComment.OrigemCommentDomainRoleId);
			foreach ( global::isep.edom.gorgeous.CommentReferênciasDestinoComment link in links )
			{
				if ( target.Equals(link.DestinoComment) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one CommentReferênciasDestinoComment link between a given Commentand a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::isep.edom.gorgeous.CommentReferênciasDestinoComment GetLink( global::isep.edom.gorgeous.Comment source, global::isep.edom.gorgeous.Comment target )
		{
			global::System.Collections.Generic.IList<global::isep.edom.gorgeous.CommentReferênciasDestinoComment> links = DslModeling::DomainRoleInfo.GetElementLinks<global::isep.edom.gorgeous.CommentReferênciasDestinoComment>(source, global::isep.edom.gorgeous.CommentReferênciasDestinoComment.OrigemCommentDomainRoleId);
			foreach ( global::isep.edom.gorgeous.CommentReferênciasDestinoComment link in links )
			{
				if ( target.Equals(link.DestinoComment) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace isep.edom.gorgeous
{
	/// <summary>
	/// DomainRelationship ModelTemReviewComment
	/// Descrição de isep.edom.gorgeous.ModelTemReviewComment
	/// </summary>
	[DslDesign::DisplayNameResource("isep.edom.gorgeous.ModelTemReviewComment.DisplayName", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("isep.edom.gorgeous.ModelTemReviewComment.Description", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::isep.edom.gorgeous.gorgeousDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("f20cd8f8-d59d-4678-935f-3d098f0de199")]
	public partial class ModelTemReviewComment : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ModelTemReviewComment domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xf20cd8f8, 0xd59d, 0x4678, 0x93, 0x5f, 0x3d, 0x09, 0x8f, 0x0d, 0xe1, 0x99);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ModelTemReviewComment link in the same Partition as the given Model
		/// </summary>
		/// <param name="source">Model to use as the source of the relationship.</param>
		/// <param name="target">ReviewComment to use as the target of the relationship.</param>
		public ModelTemReviewComment(Model source, ReviewComment target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ModelTemReviewComment.ModelDomainRoleId, source), new DslModeling::RoleAssignment(ModelTemReviewComment.ReviewCommentDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelTemReviewComment(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelTemReviewComment(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelTemReviewComment(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelTemReviewComment(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Model domain role code
		
		/// <summary>
		/// Model domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelDomainRoleId = new global::System.Guid(0x99be8e83, 0x889e, 0x4133, 0xb3, 0xec, 0x8b, 0xe9, 0xed, 0xd9, 0x62, 0xf0);
		
		/// <summary>
		/// DomainRole Model
		/// Descrição de isep.edom.gorgeous.ModelTemReviewComment.Model
		/// </summary>
		[DslDesign::DisplayNameResource("isep.edom.gorgeous.ModelTemReviewComment/Model.DisplayName", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("isep.edom.gorgeous.ModelTemReviewComment/Model.Description", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ReviewComment", PropertyDisplayNameKey="isep.edom.gorgeous.ModelTemReviewComment/Model.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("99be8e83-889e-4133-b3ec-8be9edd962f0")]
		public virtual Model Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Model)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Model of a ReviewComment
		/// <summary>
		/// Gets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Model GetModel(ReviewComment element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ReviewCommentDomainRoleId) as Model;
		}
		
		/// <summary>
		/// Sets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModel(ReviewComment element, Model newModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ReviewCommentDomainRoleId, newModel);
		}
		#endregion
		#region ReviewComment domain role code
		
		/// <summary>
		/// ReviewComment domain role Id.
		/// </summary>
		public static readonly global::System.Guid ReviewCommentDomainRoleId = new global::System.Guid(0xb03549a1, 0x1676, 0x49da, 0xb2, 0xbc, 0xc6, 0x15, 0x2e, 0x12, 0xcf, 0xa0);
		
		/// <summary>
		/// DomainRole ReviewComment
		/// Descrição de isep.edom.gorgeous.ModelTemReviewComment.ReviewComment
		/// </summary>
		[DslDesign::DisplayNameResource("isep.edom.gorgeous.ModelTemReviewComment/ReviewComment.DisplayName", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("isep.edom.gorgeous.ModelTemReviewComment/ReviewComment.Description", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Model", PropertyDisplayNameKey="isep.edom.gorgeous.ModelTemReviewComment/ReviewComment.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("b03549a1-1676-49da-b2bc-c6152e12cfa0")]
		public virtual ReviewComment ReviewComment
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ReviewComment)DslModeling::DomainRoleInfo.GetRolePlayer(this, ReviewCommentDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ReviewCommentDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ReviewComment of a Model
		/// <summary>
		/// Gets a list of ReviewComment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ReviewComment> GetReviewComment(Model element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ReviewComment>, ReviewComment>(element, ModelDomainRoleId);
		}
		#endregion
		#region Model link accessor
		/// <summary>
		/// Get the list of ModelTemReviewComment links to a Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::isep.edom.gorgeous.ModelTemReviewComment> GetLinksToReviewComment ( global::isep.edom.gorgeous.Model modelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::isep.edom.gorgeous.ModelTemReviewComment>(modelInstance, global::isep.edom.gorgeous.ModelTemReviewComment.ModelDomainRoleId);
		}
		#endregion
		#region ReviewComment link accessor
		/// <summary>
		/// Get the ModelTemReviewComment link to a ReviewComment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::isep.edom.gorgeous.ModelTemReviewComment GetLinkToModel (global::isep.edom.gorgeous.ReviewComment reviewCommentInstance)
		{
			global::System.Collections.Generic.IList<global::isep.edom.gorgeous.ModelTemReviewComment> links = DslModeling::DomainRoleInfo.GetElementLinks<global::isep.edom.gorgeous.ModelTemReviewComment>(reviewCommentInstance, global::isep.edom.gorgeous.ModelTemReviewComment.ReviewCommentDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ReviewComment not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ModelTemReviewComment instance accessors
		
		/// <summary>
		/// Get any ModelTemReviewComment links between a given Model and a ReviewComment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::isep.edom.gorgeous.ModelTemReviewComment> GetLinks( global::isep.edom.gorgeous.Model source, global::isep.edom.gorgeous.ReviewComment target )
		{
			global::System.Collections.Generic.List<global::isep.edom.gorgeous.ModelTemReviewComment> outLinks = new global::System.Collections.Generic.List<global::isep.edom.gorgeous.ModelTemReviewComment>();
			global::System.Collections.Generic.IList<global::isep.edom.gorgeous.ModelTemReviewComment> links = DslModeling::DomainRoleInfo.GetElementLinks<global::isep.edom.gorgeous.ModelTemReviewComment>(source, global::isep.edom.gorgeous.ModelTemReviewComment.ModelDomainRoleId);
			foreach ( global::isep.edom.gorgeous.ModelTemReviewComment link in links )
			{
				if ( target.Equals(link.ReviewComment) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ModelTemReviewComment link between a given Modeland a ReviewComment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::isep.edom.gorgeous.ModelTemReviewComment GetLink( global::isep.edom.gorgeous.Model source, global::isep.edom.gorgeous.ReviewComment target )
		{
			global::System.Collections.Generic.IList<global::isep.edom.gorgeous.ModelTemReviewComment> links = DslModeling::DomainRoleInfo.GetElementLinks<global::isep.edom.gorgeous.ModelTemReviewComment>(source, global::isep.edom.gorgeous.ModelTemReviewComment.ModelDomainRoleId);
			foreach ( global::isep.edom.gorgeous.ModelTemReviewComment link in links )
			{
				if ( target.Equals(link.ReviewComment) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace isep.edom.gorgeous
{
	/// <summary>
	/// DomainRelationship ReviewCommentReferênciasField
	/// Descrição de isep.edom.gorgeous.ReviewCommentReferênciasField
	/// </summary>
	[DslDesign::DisplayNameResource("isep.edom.gorgeous.ReviewCommentReferênciasField.DisplayName", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("isep.edom.gorgeous.ReviewCommentReferênciasField.Description", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::isep.edom.gorgeous.gorgeousDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("68f1c558-c4cf-4ff1-a428-07f99fc929a8")]
	public partial class ReviewCommentReferênciasField : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ReviewCommentReferênciasField domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x68f1c558, 0xc4cf, 0x4ff1, 0xa4, 0x28, 0x07, 0xf9, 0x9f, 0xc9, 0x29, 0xa8);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ReviewCommentReferênciasField link in the same Partition as the given ReviewComment
		/// </summary>
		/// <param name="source">ReviewComment to use as the source of the relationship.</param>
		/// <param name="target">Field to use as the target of the relationship.</param>
		public ReviewCommentReferênciasField(ReviewComment source, Field target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ReviewCommentReferênciasField.ReviewCommentDomainRoleId, source), new DslModeling::RoleAssignment(ReviewCommentReferênciasField.FieldDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ReviewCommentReferênciasField(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ReviewCommentReferênciasField(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ReviewCommentReferênciasField(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ReviewCommentReferênciasField(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ReviewComment domain role code
		
		/// <summary>
		/// ReviewComment domain role Id.
		/// </summary>
		public static readonly global::System.Guid ReviewCommentDomainRoleId = new global::System.Guid(0x17530aad, 0x87d0, 0x4c31, 0xb6, 0x9e, 0x54, 0x45, 0x0b, 0x9c, 0x94, 0xdd);
		
		/// <summary>
		/// DomainRole ReviewComment
		/// Descrição de isep.edom.gorgeous.ReviewCommentReferênciasField.ReviewComment
		/// </summary>
		[DslDesign::DisplayNameResource("isep.edom.gorgeous.ReviewCommentReferênciasField/ReviewComment.DisplayName", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("isep.edom.gorgeous.ReviewCommentReferênciasField/ReviewComment.Description", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Field", PropertyDisplayNameKey="isep.edom.gorgeous.ReviewCommentReferênciasField/ReviewComment.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("17530aad-87d0-4c31-b69e-54450b9c94dd")]
		public virtual ReviewComment ReviewComment
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ReviewComment)DslModeling::DomainRoleInfo.GetRolePlayer(this, ReviewCommentDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ReviewCommentDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ReviewComment of a Field
		/// <summary>
		/// Gets a list of ReviewComment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ReviewComment> GetReviewComment(Field element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ReviewComment>, ReviewComment>(element, FieldDomainRoleId);
		}
		#endregion
		#region Field domain role code
		
		/// <summary>
		/// Field domain role Id.
		/// </summary>
		public static readonly global::System.Guid FieldDomainRoleId = new global::System.Guid(0xf45fd7de, 0xb184, 0x4555, 0x95, 0xe8, 0x28, 0x48, 0x54, 0xd7, 0x7b, 0x57);
		
		/// <summary>
		/// DomainRole Field
		/// Descrição de isep.edom.gorgeous.ReviewCommentReferênciasField.Field
		/// </summary>
		[DslDesign::DisplayNameResource("isep.edom.gorgeous.ReviewCommentReferênciasField/Field.DisplayName", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("isep.edom.gorgeous.ReviewCommentReferênciasField/Field.Description", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ReviewComment", PropertyDisplayNameKey="isep.edom.gorgeous.ReviewCommentReferênciasField/Field.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("f45fd7de-b184-4555-95e8-284854d77b57")]
		public virtual Field Field
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Field)DslModeling::DomainRoleInfo.GetRolePlayer(this, FieldDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FieldDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Field of a ReviewComment
		/// <summary>
		/// Gets a list of Field.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Field> GetField(ReviewComment element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Field>, Field>(element, ReviewCommentDomainRoleId);
		}
		#endregion
		#region ReviewComment link accessor
		/// <summary>
		/// Get the list of ReviewCommentReferênciasField links to a ReviewComment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::isep.edom.gorgeous.ReviewCommentReferênciasField> GetLinksToField ( global::isep.edom.gorgeous.ReviewComment reviewCommentInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::isep.edom.gorgeous.ReviewCommentReferênciasField>(reviewCommentInstance, global::isep.edom.gorgeous.ReviewCommentReferênciasField.ReviewCommentDomainRoleId);
		}
		#endregion
		#region Field link accessor
		/// <summary>
		/// Get the list of ReviewCommentReferênciasField links to a Field.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::isep.edom.gorgeous.ReviewCommentReferênciasField> GetLinksToReviewComment ( global::isep.edom.gorgeous.Field fieldInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::isep.edom.gorgeous.ReviewCommentReferênciasField>(fieldInstance, global::isep.edom.gorgeous.ReviewCommentReferênciasField.FieldDomainRoleId);
		}
		#endregion
		#region ReviewCommentReferênciasField instance accessors
		
		/// <summary>
		/// Get any ReviewCommentReferênciasField links between a given ReviewComment and a Field.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::isep.edom.gorgeous.ReviewCommentReferênciasField> GetLinks( global::isep.edom.gorgeous.ReviewComment source, global::isep.edom.gorgeous.Field target )
		{
			global::System.Collections.Generic.List<global::isep.edom.gorgeous.ReviewCommentReferênciasField> outLinks = new global::System.Collections.Generic.List<global::isep.edom.gorgeous.ReviewCommentReferênciasField>();
			global::System.Collections.Generic.IList<global::isep.edom.gorgeous.ReviewCommentReferênciasField> links = DslModeling::DomainRoleInfo.GetElementLinks<global::isep.edom.gorgeous.ReviewCommentReferênciasField>(source, global::isep.edom.gorgeous.ReviewCommentReferênciasField.ReviewCommentDomainRoleId);
			foreach ( global::isep.edom.gorgeous.ReviewCommentReferênciasField link in links )
			{
				if ( target.Equals(link.Field) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ReviewCommentReferênciasField link between a given ReviewCommentand a Field.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::isep.edom.gorgeous.ReviewCommentReferênciasField GetLink( global::isep.edom.gorgeous.ReviewComment source, global::isep.edom.gorgeous.Field target )
		{
			global::System.Collections.Generic.IList<global::isep.edom.gorgeous.ReviewCommentReferênciasField> links = DslModeling::DomainRoleInfo.GetElementLinks<global::isep.edom.gorgeous.ReviewCommentReferênciasField>(source, global::isep.edom.gorgeous.ReviewCommentReferênciasField.ReviewCommentDomainRoleId);
			foreach ( global::isep.edom.gorgeous.ReviewCommentReferênciasField link in links )
			{
				if ( target.Equals(link.Field) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace isep.edom.gorgeous
{
	/// <summary>
	/// DomainRelationship SubjectReferênciasReviewComment
	/// Descrição de isep.edom.gorgeous.SubjectReferênciasReviewComment
	/// </summary>
	[DslDesign::DisplayNameResource("isep.edom.gorgeous.SubjectReferênciasReviewComment.DisplayName", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("isep.edom.gorgeous.SubjectReferênciasReviewComment.Description", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::isep.edom.gorgeous.gorgeousDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("0ef51a19-1686-4c2f-acb7-1ca5f5c9dc41")]
	public partial class SubjectReferênciasReviewComment : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// SubjectReferênciasReviewComment domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x0ef51a19, 0x1686, 0x4c2f, 0xac, 0xb7, 0x1c, 0xa5, 0xf5, 0xc9, 0xdc, 0x41);
	
				
		/// <summary>
		/// Constructor
		/// Creates a SubjectReferênciasReviewComment link in the same Partition as the given Subject
		/// </summary>
		/// <param name="source">Subject to use as the source of the relationship.</param>
		/// <param name="target">ReviewComment to use as the target of the relationship.</param>
		public SubjectReferênciasReviewComment(Subject source, ReviewComment target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(SubjectReferênciasReviewComment.SubjectDomainRoleId, source), new DslModeling::RoleAssignment(SubjectReferênciasReviewComment.ReviewCommentDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SubjectReferênciasReviewComment(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SubjectReferênciasReviewComment(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SubjectReferênciasReviewComment(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SubjectReferênciasReviewComment(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Subject domain role code
		
		/// <summary>
		/// Subject domain role Id.
		/// </summary>
		public static readonly global::System.Guid SubjectDomainRoleId = new global::System.Guid(0xe3045391, 0xb230, 0x485f, 0xb9, 0xaa, 0xbf, 0x26, 0xec, 0xb5, 0x77, 0x81);
		
		/// <summary>
		/// DomainRole Subject
		/// Descrição de isep.edom.gorgeous.SubjectReferênciasReviewComment.Subject
		/// </summary>
		[DslDesign::DisplayNameResource("isep.edom.gorgeous.SubjectReferênciasReviewComment/Subject.DisplayName", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("isep.edom.gorgeous.SubjectReferênciasReviewComment/Subject.Description", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ReviewComment", PropertyDisplayNameKey="isep.edom.gorgeous.SubjectReferênciasReviewComment/Subject.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("e3045391-b230-485f-b9aa-bf26ecb57781")]
		public virtual Subject Subject
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Subject)DslModeling::DomainRoleInfo.GetRolePlayer(this, SubjectDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SubjectDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Subject of a ReviewComment
		/// <summary>
		/// Gets a list of Subject.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Subject> GetSubject(ReviewComment element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Subject>, Subject>(element, ReviewCommentDomainRoleId);
		}
		#endregion
		#region ReviewComment domain role code
		
		/// <summary>
		/// ReviewComment domain role Id.
		/// </summary>
		public static readonly global::System.Guid ReviewCommentDomainRoleId = new global::System.Guid(0xcc3459f8, 0xdc91, 0x4872, 0xbc, 0xd2, 0x51, 0x7c, 0x21, 0x6e, 0xd3, 0x70);
		
		/// <summary>
		/// DomainRole ReviewComment
		/// Descrição de isep.edom.gorgeous.SubjectReferênciasReviewComment.ReviewComment
		/// </summary>
		[DslDesign::DisplayNameResource("isep.edom.gorgeous.SubjectReferênciasReviewComment/ReviewComment.DisplayName", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("isep.edom.gorgeous.SubjectReferênciasReviewComment/ReviewComment.Description", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Subject", PropertyDisplayNameKey="isep.edom.gorgeous.SubjectReferênciasReviewComment/ReviewComment.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("cc3459f8-dc91-4872-bcd2-517c216ed370")]
		public virtual ReviewComment ReviewComment
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ReviewComment)DslModeling::DomainRoleInfo.GetRolePlayer(this, ReviewCommentDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ReviewCommentDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ReviewComment of a Subject
		/// <summary>
		/// Gets a list of ReviewComment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ReviewComment> GetReviewComment(Subject element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ReviewComment>, ReviewComment>(element, SubjectDomainRoleId);
		}
		#endregion
		#region Subject link accessor
		/// <summary>
		/// Get the list of SubjectReferênciasReviewComment links to a Subject.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::isep.edom.gorgeous.SubjectReferênciasReviewComment> GetLinksToReviewComment ( global::isep.edom.gorgeous.Subject subjectInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::isep.edom.gorgeous.SubjectReferênciasReviewComment>(subjectInstance, global::isep.edom.gorgeous.SubjectReferênciasReviewComment.SubjectDomainRoleId);
		}
		#endregion
		#region ReviewComment link accessor
		/// <summary>
		/// Get the list of SubjectReferênciasReviewComment links to a ReviewComment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::isep.edom.gorgeous.SubjectReferênciasReviewComment> GetLinksToSubject ( global::isep.edom.gorgeous.ReviewComment reviewCommentInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::isep.edom.gorgeous.SubjectReferênciasReviewComment>(reviewCommentInstance, global::isep.edom.gorgeous.SubjectReferênciasReviewComment.ReviewCommentDomainRoleId);
		}
		#endregion
		#region SubjectReferênciasReviewComment instance accessors
		
		/// <summary>
		/// Get any SubjectReferênciasReviewComment links between a given Subject and a ReviewComment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::isep.edom.gorgeous.SubjectReferênciasReviewComment> GetLinks( global::isep.edom.gorgeous.Subject source, global::isep.edom.gorgeous.ReviewComment target )
		{
			global::System.Collections.Generic.List<global::isep.edom.gorgeous.SubjectReferênciasReviewComment> outLinks = new global::System.Collections.Generic.List<global::isep.edom.gorgeous.SubjectReferênciasReviewComment>();
			global::System.Collections.Generic.IList<global::isep.edom.gorgeous.SubjectReferênciasReviewComment> links = DslModeling::DomainRoleInfo.GetElementLinks<global::isep.edom.gorgeous.SubjectReferênciasReviewComment>(source, global::isep.edom.gorgeous.SubjectReferênciasReviewComment.SubjectDomainRoleId);
			foreach ( global::isep.edom.gorgeous.SubjectReferênciasReviewComment link in links )
			{
				if ( target.Equals(link.ReviewComment) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one SubjectReferênciasReviewComment link between a given Subjectand a ReviewComment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::isep.edom.gorgeous.SubjectReferênciasReviewComment GetLink( global::isep.edom.gorgeous.Subject source, global::isep.edom.gorgeous.ReviewComment target )
		{
			global::System.Collections.Generic.IList<global::isep.edom.gorgeous.SubjectReferênciasReviewComment> links = DslModeling::DomainRoleInfo.GetElementLinks<global::isep.edom.gorgeous.SubjectReferênciasReviewComment>(source, global::isep.edom.gorgeous.SubjectReferênciasReviewComment.SubjectDomainRoleId);
			foreach ( global::isep.edom.gorgeous.SubjectReferênciasReviewComment link in links )
			{
				if ( target.Equals(link.ReviewComment) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace isep.edom.gorgeous
{
	/// <summary>
	/// DomainRelationship ReviewReferênciasReviewComment
	/// Descrição de isep.edom.gorgeous.ReviewReferênciasReviewComment
	/// </summary>
	[DslDesign::DisplayNameResource("isep.edom.gorgeous.ReviewReferênciasReviewComment.DisplayName", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("isep.edom.gorgeous.ReviewReferênciasReviewComment.Description", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::isep.edom.gorgeous.gorgeousDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("ea5f9a36-db08-48da-98b1-d091b19e3fcb")]
	public partial class ReviewReferênciasReviewComment : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ReviewReferênciasReviewComment domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xea5f9a36, 0xdb08, 0x48da, 0x98, 0xb1, 0xd0, 0x91, 0xb1, 0x9e, 0x3f, 0xcb);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ReviewReferênciasReviewComment link in the same Partition as the given Review
		/// </summary>
		/// <param name="source">Review to use as the source of the relationship.</param>
		/// <param name="target">ReviewComment to use as the target of the relationship.</param>
		public ReviewReferênciasReviewComment(Review source, ReviewComment target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ReviewReferênciasReviewComment.ReviewDomainRoleId, source), new DslModeling::RoleAssignment(ReviewReferênciasReviewComment.ReviewCommentDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ReviewReferênciasReviewComment(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ReviewReferênciasReviewComment(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ReviewReferênciasReviewComment(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ReviewReferênciasReviewComment(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Review domain role code
		
		/// <summary>
		/// Review domain role Id.
		/// </summary>
		public static readonly global::System.Guid ReviewDomainRoleId = new global::System.Guid(0xfce88bd6, 0x5466, 0x4042, 0x8b, 0x32, 0x93, 0xcf, 0x44, 0x7c, 0x3d, 0x23);
		
		/// <summary>
		/// DomainRole Review
		/// Descrição de isep.edom.gorgeous.ReviewReferênciasReviewComment.Review
		/// </summary>
		[DslDesign::DisplayNameResource("isep.edom.gorgeous.ReviewReferênciasReviewComment/Review.DisplayName", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("isep.edom.gorgeous.ReviewReferênciasReviewComment/Review.Description", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ReviewComment", PropertyDisplayNameKey="isep.edom.gorgeous.ReviewReferênciasReviewComment/Review.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("fce88bd6-5466-4042-8b32-93cf447c3d23")]
		public virtual Review Review
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Review)DslModeling::DomainRoleInfo.GetRolePlayer(this, ReviewDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ReviewDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Review of a ReviewComment
		/// <summary>
		/// Gets a list of Review.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Review> GetReview(ReviewComment element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Review>, Review>(element, ReviewCommentDomainRoleId);
		}
		#endregion
		#region ReviewComment domain role code
		
		/// <summary>
		/// ReviewComment domain role Id.
		/// </summary>
		public static readonly global::System.Guid ReviewCommentDomainRoleId = new global::System.Guid(0xdaa739fc, 0x7aa2, 0x4bde, 0xb9, 0xcd, 0xca, 0xcc, 0x91, 0x91, 0xcc, 0x19);
		
		/// <summary>
		/// DomainRole ReviewComment
		/// Descrição de isep.edom.gorgeous.ReviewReferênciasReviewComment.ReviewComment
		/// </summary>
		[DslDesign::DisplayNameResource("isep.edom.gorgeous.ReviewReferênciasReviewComment/ReviewComment.DisplayName", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("isep.edom.gorgeous.ReviewReferênciasReviewComment/ReviewComment.Description", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Review", PropertyDisplayNameKey="isep.edom.gorgeous.ReviewReferênciasReviewComment/ReviewComment.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("daa739fc-7aa2-4bde-b9cd-cacc9191cc19")]
		public virtual ReviewComment ReviewComment
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ReviewComment)DslModeling::DomainRoleInfo.GetRolePlayer(this, ReviewCommentDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ReviewCommentDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ReviewComment of a Review
		/// <summary>
		/// Gets a list of ReviewComment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ReviewComment> GetReviewComment(Review element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ReviewComment>, ReviewComment>(element, ReviewDomainRoleId);
		}
		#endregion
		#region Review link accessor
		/// <summary>
		/// Get the list of ReviewReferênciasReviewComment links to a Review.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::isep.edom.gorgeous.ReviewReferênciasReviewComment> GetLinksToReviewComment ( global::isep.edom.gorgeous.Review reviewInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::isep.edom.gorgeous.ReviewReferênciasReviewComment>(reviewInstance, global::isep.edom.gorgeous.ReviewReferênciasReviewComment.ReviewDomainRoleId);
		}
		#endregion
		#region ReviewComment link accessor
		/// <summary>
		/// Get the list of ReviewReferênciasReviewComment links to a ReviewComment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::isep.edom.gorgeous.ReviewReferênciasReviewComment> GetLinksToReview ( global::isep.edom.gorgeous.ReviewComment reviewCommentInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::isep.edom.gorgeous.ReviewReferênciasReviewComment>(reviewCommentInstance, global::isep.edom.gorgeous.ReviewReferênciasReviewComment.ReviewCommentDomainRoleId);
		}
		#endregion
		#region ReviewReferênciasReviewComment instance accessors
		
		/// <summary>
		/// Get any ReviewReferênciasReviewComment links between a given Review and a ReviewComment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::isep.edom.gorgeous.ReviewReferênciasReviewComment> GetLinks( global::isep.edom.gorgeous.Review source, global::isep.edom.gorgeous.ReviewComment target )
		{
			global::System.Collections.Generic.List<global::isep.edom.gorgeous.ReviewReferênciasReviewComment> outLinks = new global::System.Collections.Generic.List<global::isep.edom.gorgeous.ReviewReferênciasReviewComment>();
			global::System.Collections.Generic.IList<global::isep.edom.gorgeous.ReviewReferênciasReviewComment> links = DslModeling::DomainRoleInfo.GetElementLinks<global::isep.edom.gorgeous.ReviewReferênciasReviewComment>(source, global::isep.edom.gorgeous.ReviewReferênciasReviewComment.ReviewDomainRoleId);
			foreach ( global::isep.edom.gorgeous.ReviewReferênciasReviewComment link in links )
			{
				if ( target.Equals(link.ReviewComment) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ReviewReferênciasReviewComment link between a given Reviewand a ReviewComment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::isep.edom.gorgeous.ReviewReferênciasReviewComment GetLink( global::isep.edom.gorgeous.Review source, global::isep.edom.gorgeous.ReviewComment target )
		{
			global::System.Collections.Generic.IList<global::isep.edom.gorgeous.ReviewReferênciasReviewComment> links = DslModeling::DomainRoleInfo.GetElementLinks<global::isep.edom.gorgeous.ReviewReferênciasReviewComment>(source, global::isep.edom.gorgeous.ReviewReferênciasReviewComment.ReviewDomainRoleId);
			foreach ( global::isep.edom.gorgeous.ReviewReferênciasReviewComment link in links )
			{
				if ( target.Equals(link.ReviewComment) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace isep.edom.gorgeous
{
	/// <summary>
	/// DomainRelationship CommentReferênciasReviewComment
	/// Descrição de isep.edom.gorgeous.CommentReferênciasReviewComment
	/// </summary>
	[DslDesign::DisplayNameResource("isep.edom.gorgeous.CommentReferênciasReviewComment.DisplayName", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("isep.edom.gorgeous.CommentReferênciasReviewComment.Description", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::isep.edom.gorgeous.gorgeousDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("1232073f-a334-4a93-afb4-937f2952fc99")]
	public partial class CommentReferênciasReviewComment : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// CommentReferênciasReviewComment domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x1232073f, 0xa334, 0x4a93, 0xaf, 0xb4, 0x93, 0x7f, 0x29, 0x52, 0xfc, 0x99);
	
				
		/// <summary>
		/// Constructor
		/// Creates a CommentReferênciasReviewComment link in the same Partition as the given Comment
		/// </summary>
		/// <param name="source">Comment to use as the source of the relationship.</param>
		/// <param name="target">ReviewComment to use as the target of the relationship.</param>
		public CommentReferênciasReviewComment(Comment source, ReviewComment target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(CommentReferênciasReviewComment.CommentDomainRoleId, source), new DslModeling::RoleAssignment(CommentReferênciasReviewComment.ReviewCommentDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CommentReferênciasReviewComment(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CommentReferênciasReviewComment(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CommentReferênciasReviewComment(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CommentReferênciasReviewComment(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Comment domain role code
		
		/// <summary>
		/// Comment domain role Id.
		/// </summary>
		public static readonly global::System.Guid CommentDomainRoleId = new global::System.Guid(0xf3ba68e8, 0x8fd5, 0x499e, 0x80, 0xdb, 0xff, 0x86, 0x22, 0x66, 0xcd, 0x82);
		
		/// <summary>
		/// DomainRole Comment
		/// Descrição de isep.edom.gorgeous.CommentReferênciasReviewComment.Comment
		/// </summary>
		[DslDesign::DisplayNameResource("isep.edom.gorgeous.CommentReferênciasReviewComment/Comment.DisplayName", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("isep.edom.gorgeous.CommentReferênciasReviewComment/Comment.Description", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ReviewComment", PropertyDisplayNameKey="isep.edom.gorgeous.CommentReferênciasReviewComment/Comment.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("f3ba68e8-8fd5-499e-80db-ff862266cd82")]
		public virtual Comment Comment
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Comment)DslModeling::DomainRoleInfo.GetRolePlayer(this, CommentDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CommentDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Comment of a ReviewComment
		/// <summary>
		/// Gets a list of Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Comment> GetComment(ReviewComment element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Comment>, Comment>(element, ReviewCommentDomainRoleId);
		}
		#endregion
		#region ReviewComment domain role code
		
		/// <summary>
		/// ReviewComment domain role Id.
		/// </summary>
		public static readonly global::System.Guid ReviewCommentDomainRoleId = new global::System.Guid(0x6d57ee90, 0xf4fd, 0x4605, 0xa1, 0xfc, 0x9a, 0x42, 0x93, 0xe2, 0x44, 0x24);
		
		/// <summary>
		/// DomainRole ReviewComment
		/// Descrição de isep.edom.gorgeous.CommentReferênciasReviewComment.ReviewComment
		/// </summary>
		[DslDesign::DisplayNameResource("isep.edom.gorgeous.CommentReferênciasReviewComment/ReviewComment.DisplayName", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("isep.edom.gorgeous.CommentReferênciasReviewComment/ReviewComment.Description", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Comment", PropertyDisplayNameKey="isep.edom.gorgeous.CommentReferênciasReviewComment/ReviewComment.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("6d57ee90-f4fd-4605-a1fc-9a4293e24424")]
		public virtual ReviewComment ReviewComment
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ReviewComment)DslModeling::DomainRoleInfo.GetRolePlayer(this, ReviewCommentDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ReviewCommentDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ReviewComment of a Comment
		/// <summary>
		/// Gets a list of ReviewComment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ReviewComment> GetReviewComment(Comment element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ReviewComment>, ReviewComment>(element, CommentDomainRoleId);
		}
		#endregion
		#region Comment link accessor
		/// <summary>
		/// Get the list of CommentReferênciasReviewComment links to a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::isep.edom.gorgeous.CommentReferênciasReviewComment> GetLinksToReviewComment ( global::isep.edom.gorgeous.Comment commentInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::isep.edom.gorgeous.CommentReferênciasReviewComment>(commentInstance, global::isep.edom.gorgeous.CommentReferênciasReviewComment.CommentDomainRoleId);
		}
		#endregion
		#region ReviewComment link accessor
		/// <summary>
		/// Get the list of CommentReferênciasReviewComment links to a ReviewComment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::isep.edom.gorgeous.CommentReferênciasReviewComment> GetLinksToComment ( global::isep.edom.gorgeous.ReviewComment reviewCommentInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::isep.edom.gorgeous.CommentReferênciasReviewComment>(reviewCommentInstance, global::isep.edom.gorgeous.CommentReferênciasReviewComment.ReviewCommentDomainRoleId);
		}
		#endregion
		#region CommentReferênciasReviewComment instance accessors
		
		/// <summary>
		/// Get any CommentReferênciasReviewComment links between a given Comment and a ReviewComment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::isep.edom.gorgeous.CommentReferênciasReviewComment> GetLinks( global::isep.edom.gorgeous.Comment source, global::isep.edom.gorgeous.ReviewComment target )
		{
			global::System.Collections.Generic.List<global::isep.edom.gorgeous.CommentReferênciasReviewComment> outLinks = new global::System.Collections.Generic.List<global::isep.edom.gorgeous.CommentReferênciasReviewComment>();
			global::System.Collections.Generic.IList<global::isep.edom.gorgeous.CommentReferênciasReviewComment> links = DslModeling::DomainRoleInfo.GetElementLinks<global::isep.edom.gorgeous.CommentReferênciasReviewComment>(source, global::isep.edom.gorgeous.CommentReferênciasReviewComment.CommentDomainRoleId);
			foreach ( global::isep.edom.gorgeous.CommentReferênciasReviewComment link in links )
			{
				if ( target.Equals(link.ReviewComment) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one CommentReferênciasReviewComment link between a given Commentand a ReviewComment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::isep.edom.gorgeous.CommentReferênciasReviewComment GetLink( global::isep.edom.gorgeous.Comment source, global::isep.edom.gorgeous.ReviewComment target )
		{
			global::System.Collections.Generic.IList<global::isep.edom.gorgeous.CommentReferênciasReviewComment> links = DslModeling::DomainRoleInfo.GetElementLinks<global::isep.edom.gorgeous.CommentReferênciasReviewComment>(source, global::isep.edom.gorgeous.CommentReferênciasReviewComment.CommentDomainRoleId);
			foreach ( global::isep.edom.gorgeous.CommentReferênciasReviewComment link in links )
			{
				if ( target.Equals(link.ReviewComment) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace isep.edom.gorgeous
{
	/// <summary>
	/// DomainRelationship ModelTemProcess
	/// Descrição de isep.edom.gorgeous.ModelTemProcess
	/// </summary>
	[DslDesign::DisplayNameResource("isep.edom.gorgeous.ModelTemProcess.DisplayName", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("isep.edom.gorgeous.ModelTemProcess.Description", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::isep.edom.gorgeous.gorgeousDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("2470a0b3-aae9-4f6c-997f-0367b2daf373")]
	public partial class ModelTemProcess : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ModelTemProcess domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x2470a0b3, 0xaae9, 0x4f6c, 0x99, 0x7f, 0x03, 0x67, 0xb2, 0xda, 0xf3, 0x73);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ModelTemProcess link in the same Partition as the given Model
		/// </summary>
		/// <param name="source">Model to use as the source of the relationship.</param>
		/// <param name="target">Process to use as the target of the relationship.</param>
		public ModelTemProcess(Model source, Process target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ModelTemProcess.ModelDomainRoleId, source), new DslModeling::RoleAssignment(ModelTemProcess.ProcessDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelTemProcess(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelTemProcess(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelTemProcess(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelTemProcess(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Model domain role code
		
		/// <summary>
		/// Model domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelDomainRoleId = new global::System.Guid(0x73e665bd, 0x9a02, 0x4145, 0xb7, 0xe5, 0x6f, 0x82, 0xde, 0xd5, 0x09, 0x78);
		
		/// <summary>
		/// DomainRole Model
		/// Descrição de isep.edom.gorgeous.ModelTemProcess.Model
		/// </summary>
		[DslDesign::DisplayNameResource("isep.edom.gorgeous.ModelTemProcess/Model.DisplayName", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("isep.edom.gorgeous.ModelTemProcess/Model.Description", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Process", PropertyDisplayNameKey="isep.edom.gorgeous.ModelTemProcess/Model.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("73e665bd-9a02-4145-b7e5-6f82ded50978")]
		public virtual Model Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Model)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Model of a Process
		/// <summary>
		/// Gets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Model GetModel(Process element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ProcessDomainRoleId) as Model;
		}
		
		/// <summary>
		/// Sets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModel(Process element, Model newModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ProcessDomainRoleId, newModel);
		}
		#endregion
		#region Process domain role code
		
		/// <summary>
		/// Process domain role Id.
		/// </summary>
		public static readonly global::System.Guid ProcessDomainRoleId = new global::System.Guid(0x33553578, 0x52ac, 0x451c, 0xb8, 0xb2, 0xc3, 0x52, 0x84, 0x1a, 0x2f, 0xb0);
		
		/// <summary>
		/// DomainRole Process
		/// Descrição de isep.edom.gorgeous.ModelTemProcess.Process
		/// </summary>
		[DslDesign::DisplayNameResource("isep.edom.gorgeous.ModelTemProcess/Process.DisplayName", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("isep.edom.gorgeous.ModelTemProcess/Process.Description", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Model", PropertyDisplayNameKey="isep.edom.gorgeous.ModelTemProcess/Process.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("33553578-52ac-451c-b8b2-c352841a2fb0")]
		public virtual Process Process
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Process)DslModeling::DomainRoleInfo.GetRolePlayer(this, ProcessDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ProcessDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Process of a Model
		/// <summary>
		/// Gets a list of Process.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Process> GetProcess(Model element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Process>, Process>(element, ModelDomainRoleId);
		}
		#endregion
		#region Model link accessor
		/// <summary>
		/// Get the list of ModelTemProcess links to a Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::isep.edom.gorgeous.ModelTemProcess> GetLinksToProcess ( global::isep.edom.gorgeous.Model modelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::isep.edom.gorgeous.ModelTemProcess>(modelInstance, global::isep.edom.gorgeous.ModelTemProcess.ModelDomainRoleId);
		}
		#endregion
		#region Process link accessor
		/// <summary>
		/// Get the ModelTemProcess link to a Process.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::isep.edom.gorgeous.ModelTemProcess GetLinkToModel (global::isep.edom.gorgeous.Process processInstance)
		{
			global::System.Collections.Generic.IList<global::isep.edom.gorgeous.ModelTemProcess> links = DslModeling::DomainRoleInfo.GetElementLinks<global::isep.edom.gorgeous.ModelTemProcess>(processInstance, global::isep.edom.gorgeous.ModelTemProcess.ProcessDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Process not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ModelTemProcess instance accessors
		
		/// <summary>
		/// Get any ModelTemProcess links between a given Model and a Process.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::isep.edom.gorgeous.ModelTemProcess> GetLinks( global::isep.edom.gorgeous.Model source, global::isep.edom.gorgeous.Process target )
		{
			global::System.Collections.Generic.List<global::isep.edom.gorgeous.ModelTemProcess> outLinks = new global::System.Collections.Generic.List<global::isep.edom.gorgeous.ModelTemProcess>();
			global::System.Collections.Generic.IList<global::isep.edom.gorgeous.ModelTemProcess> links = DslModeling::DomainRoleInfo.GetElementLinks<global::isep.edom.gorgeous.ModelTemProcess>(source, global::isep.edom.gorgeous.ModelTemProcess.ModelDomainRoleId);
			foreach ( global::isep.edom.gorgeous.ModelTemProcess link in links )
			{
				if ( target.Equals(link.Process) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ModelTemProcess link between a given Modeland a Process.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::isep.edom.gorgeous.ModelTemProcess GetLink( global::isep.edom.gorgeous.Model source, global::isep.edom.gorgeous.Process target )
		{
			global::System.Collections.Generic.IList<global::isep.edom.gorgeous.ModelTemProcess> links = DslModeling::DomainRoleInfo.GetElementLinks<global::isep.edom.gorgeous.ModelTemProcess>(source, global::isep.edom.gorgeous.ModelTemProcess.ModelDomainRoleId);
			foreach ( global::isep.edom.gorgeous.ModelTemProcess link in links )
			{
				if ( target.Equals(link.Process) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace isep.edom.gorgeous
{
	/// <summary>
	/// DomainRelationship CommentReferênciasProcess
	/// Descrição de isep.edom.gorgeous.CommentReferênciasProcess
	/// </summary>
	[DslDesign::DisplayNameResource("isep.edom.gorgeous.CommentReferênciasProcess.DisplayName", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("isep.edom.gorgeous.CommentReferênciasProcess.Description", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::isep.edom.gorgeous.gorgeousDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("c5507142-5b4e-429d-ba15-1ed7bc433435")]
	public partial class CommentReferênciasProcess : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// CommentReferênciasProcess domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc5507142, 0x5b4e, 0x429d, 0xba, 0x15, 0x1e, 0xd7, 0xbc, 0x43, 0x34, 0x35);
	
				
		/// <summary>
		/// Constructor
		/// Creates a CommentReferênciasProcess link in the same Partition as the given Comment
		/// </summary>
		/// <param name="source">Comment to use as the source of the relationship.</param>
		/// <param name="target">Process to use as the target of the relationship.</param>
		public CommentReferênciasProcess(Comment source, Process target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(CommentReferênciasProcess.CommentDomainRoleId, source), new DslModeling::RoleAssignment(CommentReferênciasProcess.ProcessDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CommentReferênciasProcess(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CommentReferênciasProcess(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CommentReferênciasProcess(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CommentReferênciasProcess(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Comment domain role code
		
		/// <summary>
		/// Comment domain role Id.
		/// </summary>
		public static readonly global::System.Guid CommentDomainRoleId = new global::System.Guid(0x02125a93, 0x0dcc, 0x4d28, 0xb9, 0xda, 0x00, 0xd8, 0x15, 0x62, 0x7e, 0x05);
		
		/// <summary>
		/// DomainRole Comment
		/// Descrição de isep.edom.gorgeous.CommentReferênciasProcess.Comment
		/// </summary>
		[DslDesign::DisplayNameResource("isep.edom.gorgeous.CommentReferênciasProcess/Comment.DisplayName", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("isep.edom.gorgeous.CommentReferênciasProcess/Comment.Description", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Process", PropertyDisplayNameKey="isep.edom.gorgeous.CommentReferênciasProcess/Comment.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("02125a93-0dcc-4d28-b9da-00d815627e05")]
		public virtual Comment Comment
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Comment)DslModeling::DomainRoleInfo.GetRolePlayer(this, CommentDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CommentDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Comment of a Process
		/// <summary>
		/// Gets a list of Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Comment> GetComment(Process element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Comment>, Comment>(element, ProcessDomainRoleId);
		}
		#endregion
		#region Process domain role code
		
		/// <summary>
		/// Process domain role Id.
		/// </summary>
		public static readonly global::System.Guid ProcessDomainRoleId = new global::System.Guid(0xe7f1245d, 0x1a66, 0x4f77, 0x9b, 0x34, 0x60, 0x70, 0x7b, 0xda, 0x1b, 0xb6);
		
		/// <summary>
		/// DomainRole Process
		/// Descrição de isep.edom.gorgeous.CommentReferênciasProcess.Process
		/// </summary>
		[DslDesign::DisplayNameResource("isep.edom.gorgeous.CommentReferênciasProcess/Process.DisplayName", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("isep.edom.gorgeous.CommentReferênciasProcess/Process.Description", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Comment", PropertyDisplayNameKey="isep.edom.gorgeous.CommentReferênciasProcess/Process.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("e7f1245d-1a66-4f77-9b34-60707bda1bb6")]
		public virtual Process Process
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Process)DslModeling::DomainRoleInfo.GetRolePlayer(this, ProcessDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ProcessDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Process of a Comment
		/// <summary>
		/// Gets a list of Process.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Process> GetProcess(Comment element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Process>, Process>(element, CommentDomainRoleId);
		}
		#endregion
		#region Comment link accessor
		/// <summary>
		/// Get the list of CommentReferênciasProcess links to a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::isep.edom.gorgeous.CommentReferênciasProcess> GetLinksToProcess ( global::isep.edom.gorgeous.Comment commentInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::isep.edom.gorgeous.CommentReferênciasProcess>(commentInstance, global::isep.edom.gorgeous.CommentReferênciasProcess.CommentDomainRoleId);
		}
		#endregion
		#region Process link accessor
		/// <summary>
		/// Get the list of CommentReferênciasProcess links to a Process.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::isep.edom.gorgeous.CommentReferênciasProcess> GetLinksToComment ( global::isep.edom.gorgeous.Process processInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::isep.edom.gorgeous.CommentReferênciasProcess>(processInstance, global::isep.edom.gorgeous.CommentReferênciasProcess.ProcessDomainRoleId);
		}
		#endregion
		#region CommentReferênciasProcess instance accessors
		
		/// <summary>
		/// Get any CommentReferênciasProcess links between a given Comment and a Process.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::isep.edom.gorgeous.CommentReferênciasProcess> GetLinks( global::isep.edom.gorgeous.Comment source, global::isep.edom.gorgeous.Process target )
		{
			global::System.Collections.Generic.List<global::isep.edom.gorgeous.CommentReferênciasProcess> outLinks = new global::System.Collections.Generic.List<global::isep.edom.gorgeous.CommentReferênciasProcess>();
			global::System.Collections.Generic.IList<global::isep.edom.gorgeous.CommentReferênciasProcess> links = DslModeling::DomainRoleInfo.GetElementLinks<global::isep.edom.gorgeous.CommentReferênciasProcess>(source, global::isep.edom.gorgeous.CommentReferênciasProcess.CommentDomainRoleId);
			foreach ( global::isep.edom.gorgeous.CommentReferênciasProcess link in links )
			{
				if ( target.Equals(link.Process) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one CommentReferênciasProcess link between a given Commentand a Process.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::isep.edom.gorgeous.CommentReferênciasProcess GetLink( global::isep.edom.gorgeous.Comment source, global::isep.edom.gorgeous.Process target )
		{
			global::System.Collections.Generic.IList<global::isep.edom.gorgeous.CommentReferênciasProcess> links = DslModeling::DomainRoleInfo.GetElementLinks<global::isep.edom.gorgeous.CommentReferênciasProcess>(source, global::isep.edom.gorgeous.CommentReferênciasProcess.CommentDomainRoleId);
			foreach ( global::isep.edom.gorgeous.CommentReferênciasProcess link in links )
			{
				if ( target.Equals(link.Process) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace isep.edom.gorgeous
{
	/// <summary>
	/// DomainRelationship ModelTemNode
	/// Descrição de isep.edom.gorgeous.ModelTemNode
	/// </summary>
	[DslDesign::DisplayNameResource("isep.edom.gorgeous.ModelTemNode.DisplayName", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("isep.edom.gorgeous.ModelTemNode.Description", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::isep.edom.gorgeous.gorgeousDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("b595f2f9-a8d8-46c3-ba8a-a1e8cb343e3d")]
	public partial class ModelTemNode : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ModelTemNode domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xb595f2f9, 0xa8d8, 0x46c3, 0xba, 0x8a, 0xa1, 0xe8, 0xcb, 0x34, 0x3e, 0x3d);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ModelTemNode link in the same Partition as the given Model
		/// </summary>
		/// <param name="source">Model to use as the source of the relationship.</param>
		/// <param name="target">Node to use as the target of the relationship.</param>
		public ModelTemNode(Model source, Node target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ModelTemNode.ModelDomainRoleId, source), new DslModeling::RoleAssignment(ModelTemNode.NodeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelTemNode(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelTemNode(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelTemNode(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelTemNode(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Model domain role code
		
		/// <summary>
		/// Model domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelDomainRoleId = new global::System.Guid(0x349ace20, 0x3f4e, 0x4db4, 0xb8, 0xe0, 0xb2, 0xdf, 0x04, 0x2d, 0x6b, 0x1b);
		
		/// <summary>
		/// DomainRole Model
		/// Descrição de isep.edom.gorgeous.ModelTemNode.Model
		/// </summary>
		[DslDesign::DisplayNameResource("isep.edom.gorgeous.ModelTemNode/Model.DisplayName", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("isep.edom.gorgeous.ModelTemNode/Model.Description", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Node", PropertyDisplayNameKey="isep.edom.gorgeous.ModelTemNode/Model.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("349ace20-3f4e-4db4-b8e0-b2df042d6b1b")]
		public virtual Model Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Model)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Model of a Node
		/// <summary>
		/// Gets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Model GetModel(Node element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, NodeDomainRoleId) as Model;
		}
		
		/// <summary>
		/// Sets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModel(Node element, Model newModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, NodeDomainRoleId, newModel);
		}
		#endregion
		#region Node domain role code
		
		/// <summary>
		/// Node domain role Id.
		/// </summary>
		public static readonly global::System.Guid NodeDomainRoleId = new global::System.Guid(0x159baac7, 0x55ca, 0x46a1, 0xb3, 0x1f, 0x92, 0xc1, 0x8f, 0xe1, 0xec, 0x60);
		
		/// <summary>
		/// DomainRole Node
		/// Descrição de isep.edom.gorgeous.ModelTemNode.Node
		/// </summary>
		[DslDesign::DisplayNameResource("isep.edom.gorgeous.ModelTemNode/Node.DisplayName", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("isep.edom.gorgeous.ModelTemNode/Node.Description", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Model", PropertyDisplayNameKey="isep.edom.gorgeous.ModelTemNode/Node.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("159baac7-55ca-46a1-b31f-92c18fe1ec60")]
		public virtual Node Node
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Node)DslModeling::DomainRoleInfo.GetRolePlayer(this, NodeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, NodeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Node of a Model
		/// <summary>
		/// Gets a list of Node.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Node> GetNode(Model element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Node>, Node>(element, ModelDomainRoleId);
		}
		#endregion
		#region Model link accessor
		/// <summary>
		/// Get the list of ModelTemNode links to a Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::isep.edom.gorgeous.ModelTemNode> GetLinksToNode ( global::isep.edom.gorgeous.Model modelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::isep.edom.gorgeous.ModelTemNode>(modelInstance, global::isep.edom.gorgeous.ModelTemNode.ModelDomainRoleId);
		}
		#endregion
		#region Node link accessor
		/// <summary>
		/// Get the ModelTemNode link to a Node.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::isep.edom.gorgeous.ModelTemNode GetLinkToModel (global::isep.edom.gorgeous.Node nodeInstance)
		{
			global::System.Collections.Generic.IList<global::isep.edom.gorgeous.ModelTemNode> links = DslModeling::DomainRoleInfo.GetElementLinks<global::isep.edom.gorgeous.ModelTemNode>(nodeInstance, global::isep.edom.gorgeous.ModelTemNode.NodeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Node not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ModelTemNode instance accessors
		
		/// <summary>
		/// Get any ModelTemNode links between a given Model and a Node.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::isep.edom.gorgeous.ModelTemNode> GetLinks( global::isep.edom.gorgeous.Model source, global::isep.edom.gorgeous.Node target )
		{
			global::System.Collections.Generic.List<global::isep.edom.gorgeous.ModelTemNode> outLinks = new global::System.Collections.Generic.List<global::isep.edom.gorgeous.ModelTemNode>();
			global::System.Collections.Generic.IList<global::isep.edom.gorgeous.ModelTemNode> links = DslModeling::DomainRoleInfo.GetElementLinks<global::isep.edom.gorgeous.ModelTemNode>(source, global::isep.edom.gorgeous.ModelTemNode.ModelDomainRoleId);
			foreach ( global::isep.edom.gorgeous.ModelTemNode link in links )
			{
				if ( target.Equals(link.Node) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ModelTemNode link between a given Modeland a Node.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::isep.edom.gorgeous.ModelTemNode GetLink( global::isep.edom.gorgeous.Model source, global::isep.edom.gorgeous.Node target )
		{
			global::System.Collections.Generic.IList<global::isep.edom.gorgeous.ModelTemNode> links = DslModeling::DomainRoleInfo.GetElementLinks<global::isep.edom.gorgeous.ModelTemNode>(source, global::isep.edom.gorgeous.ModelTemNode.ModelDomainRoleId);
			foreach ( global::isep.edom.gorgeous.ModelTemNode link in links )
			{
				if ( target.Equals(link.Node) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace isep.edom.gorgeous
{
	/// <summary>
	/// DomainRelationship ProcessReferênciasNode
	/// Descrição de isep.edom.gorgeous.ProcessReferênciasNode
	/// </summary>
	[DslDesign::DisplayNameResource("isep.edom.gorgeous.ProcessReferênciasNode.DisplayName", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("isep.edom.gorgeous.ProcessReferênciasNode.Description", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::isep.edom.gorgeous.gorgeousDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("0eacc7ee-3379-4c46-9e37-bf22baed4b23")]
	public partial class ProcessReferênciasNode : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ProcessReferênciasNode domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x0eacc7ee, 0x3379, 0x4c46, 0x9e, 0x37, 0xbf, 0x22, 0xba, 0xed, 0x4b, 0x23);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ProcessReferênciasNode link in the same Partition as the given Process
		/// </summary>
		/// <param name="source">Process to use as the source of the relationship.</param>
		/// <param name="target">Node to use as the target of the relationship.</param>
		public ProcessReferênciasNode(Process source, Node target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ProcessReferênciasNode.ProcessDomainRoleId, source), new DslModeling::RoleAssignment(ProcessReferênciasNode.NodeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ProcessReferênciasNode(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ProcessReferênciasNode(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ProcessReferênciasNode(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ProcessReferênciasNode(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Process domain role code
		
		/// <summary>
		/// Process domain role Id.
		/// </summary>
		public static readonly global::System.Guid ProcessDomainRoleId = new global::System.Guid(0xc8140c6f, 0x3b6d, 0x4ebd, 0x82, 0x22, 0xb2, 0x37, 0x20, 0xb8, 0xa2, 0x8c);
		
		/// <summary>
		/// DomainRole Process
		/// Descrição de isep.edom.gorgeous.ProcessReferênciasNode.Process
		/// </summary>
		[DslDesign::DisplayNameResource("isep.edom.gorgeous.ProcessReferênciasNode/Process.DisplayName", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("isep.edom.gorgeous.ProcessReferênciasNode/Process.Description", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Node", PropertyDisplayNameKey="isep.edom.gorgeous.ProcessReferênciasNode/Process.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("c8140c6f-3b6d-4ebd-8222-b23720b8a28c")]
		public virtual Process Process
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Process)DslModeling::DomainRoleInfo.GetRolePlayer(this, ProcessDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ProcessDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Process of a Node
		/// <summary>
		/// Gets a list of Process.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Process> GetProcess(Node element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Process>, Process>(element, NodeDomainRoleId);
		}
		#endregion
		#region Node domain role code
		
		/// <summary>
		/// Node domain role Id.
		/// </summary>
		public static readonly global::System.Guid NodeDomainRoleId = new global::System.Guid(0x6e226018, 0x569a, 0x44bd, 0x87, 0xd8, 0xa8, 0x52, 0x21, 0xc8, 0xe1, 0x1c);
		
		/// <summary>
		/// DomainRole Node
		/// Descrição de isep.edom.gorgeous.ProcessReferênciasNode.Node
		/// </summary>
		[DslDesign::DisplayNameResource("isep.edom.gorgeous.ProcessReferênciasNode/Node.DisplayName", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("isep.edom.gorgeous.ProcessReferênciasNode/Node.Description", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Process", PropertyDisplayNameKey="isep.edom.gorgeous.ProcessReferênciasNode/Node.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("6e226018-569a-44bd-87d8-a85221c8e11c")]
		public virtual Node Node
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Node)DslModeling::DomainRoleInfo.GetRolePlayer(this, NodeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, NodeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Node of a Process
		/// <summary>
		/// Gets a list of Node.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Node> GetNode(Process element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Node>, Node>(element, ProcessDomainRoleId);
		}
		#endregion
		#region Process link accessor
		/// <summary>
		/// Get the list of ProcessReferênciasNode links to a Process.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::isep.edom.gorgeous.ProcessReferênciasNode> GetLinksToNode ( global::isep.edom.gorgeous.Process processInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::isep.edom.gorgeous.ProcessReferênciasNode>(processInstance, global::isep.edom.gorgeous.ProcessReferênciasNode.ProcessDomainRoleId);
		}
		#endregion
		#region Node link accessor
		/// <summary>
		/// Get the list of ProcessReferênciasNode links to a Node.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::isep.edom.gorgeous.ProcessReferênciasNode> GetLinksToProcess ( global::isep.edom.gorgeous.Node nodeInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::isep.edom.gorgeous.ProcessReferênciasNode>(nodeInstance, global::isep.edom.gorgeous.ProcessReferênciasNode.NodeDomainRoleId);
		}
		#endregion
		#region ProcessReferênciasNode instance accessors
		
		/// <summary>
		/// Get any ProcessReferênciasNode links between a given Process and a Node.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::isep.edom.gorgeous.ProcessReferênciasNode> GetLinks( global::isep.edom.gorgeous.Process source, global::isep.edom.gorgeous.Node target )
		{
			global::System.Collections.Generic.List<global::isep.edom.gorgeous.ProcessReferênciasNode> outLinks = new global::System.Collections.Generic.List<global::isep.edom.gorgeous.ProcessReferênciasNode>();
			global::System.Collections.Generic.IList<global::isep.edom.gorgeous.ProcessReferênciasNode> links = DslModeling::DomainRoleInfo.GetElementLinks<global::isep.edom.gorgeous.ProcessReferênciasNode>(source, global::isep.edom.gorgeous.ProcessReferênciasNode.ProcessDomainRoleId);
			foreach ( global::isep.edom.gorgeous.ProcessReferênciasNode link in links )
			{
				if ( target.Equals(link.Node) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ProcessReferênciasNode link between a given Processand a Node.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::isep.edom.gorgeous.ProcessReferênciasNode GetLink( global::isep.edom.gorgeous.Process source, global::isep.edom.gorgeous.Node target )
		{
			global::System.Collections.Generic.IList<global::isep.edom.gorgeous.ProcessReferênciasNode> links = DslModeling::DomainRoleInfo.GetElementLinks<global::isep.edom.gorgeous.ProcessReferênciasNode>(source, global::isep.edom.gorgeous.ProcessReferênciasNode.ProcessDomainRoleId);
			foreach ( global::isep.edom.gorgeous.ProcessReferênciasNode link in links )
			{
				if ( target.Equals(link.Node) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace isep.edom.gorgeous
{
	/// <summary>
	/// DomainRelationship NodeReferênciasField
	/// Descrição de isep.edom.gorgeous.NodeReferênciasField
	/// </summary>
	[DslDesign::DisplayNameResource("isep.edom.gorgeous.NodeReferênciasField.DisplayName", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("isep.edom.gorgeous.NodeReferênciasField.Description", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::isep.edom.gorgeous.gorgeousDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("4970153c-07e2-46f1-830d-11650b870620")]
	public partial class NodeReferênciasField : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// NodeReferênciasField domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x4970153c, 0x07e2, 0x46f1, 0x83, 0x0d, 0x11, 0x65, 0x0b, 0x87, 0x06, 0x20);
	
				
		/// <summary>
		/// Constructor
		/// Creates a NodeReferênciasField link in the same Partition as the given Node
		/// </summary>
		/// <param name="source">Node to use as the source of the relationship.</param>
		/// <param name="target">Field to use as the target of the relationship.</param>
		public NodeReferênciasField(Node source, Field target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(NodeReferênciasField.NodeDomainRoleId, source), new DslModeling::RoleAssignment(NodeReferênciasField.FieldDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public NodeReferênciasField(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public NodeReferênciasField(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public NodeReferênciasField(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public NodeReferênciasField(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Node domain role code
		
		/// <summary>
		/// Node domain role Id.
		/// </summary>
		public static readonly global::System.Guid NodeDomainRoleId = new global::System.Guid(0xdcb5a227, 0x3623, 0x4260, 0xa6, 0xba, 0x7f, 0xa0, 0xf7, 0xf5, 0xe4, 0xdc);
		
		/// <summary>
		/// DomainRole Node
		/// Descrição de isep.edom.gorgeous.NodeReferênciasField.Node
		/// </summary>
		[DslDesign::DisplayNameResource("isep.edom.gorgeous.NodeReferênciasField/Node.DisplayName", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("isep.edom.gorgeous.NodeReferênciasField/Node.Description", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Field", PropertyDisplayNameKey="isep.edom.gorgeous.NodeReferênciasField/Node.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("dcb5a227-3623-4260-a6ba-7fa0f7f5e4dc")]
		public virtual Node Node
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Node)DslModeling::DomainRoleInfo.GetRolePlayer(this, NodeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, NodeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Node of a Field
		/// <summary>
		/// Gets a list of Node.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Node> GetNode(Field element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Node>, Node>(element, FieldDomainRoleId);
		}
		#endregion
		#region Field domain role code
		
		/// <summary>
		/// Field domain role Id.
		/// </summary>
		public static readonly global::System.Guid FieldDomainRoleId = new global::System.Guid(0xf3e63cfe, 0x1f45, 0x46a3, 0xba, 0x40, 0xfa, 0x10, 0x57, 0x4e, 0xac, 0xaf);
		
		/// <summary>
		/// DomainRole Field
		/// Descrição de isep.edom.gorgeous.NodeReferênciasField.Field
		/// </summary>
		[DslDesign::DisplayNameResource("isep.edom.gorgeous.NodeReferênciasField/Field.DisplayName", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("isep.edom.gorgeous.NodeReferênciasField/Field.Description", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Node", PropertyDisplayNameKey="isep.edom.gorgeous.NodeReferênciasField/Field.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("f3e63cfe-1f45-46a3-ba40-fa10574eacaf")]
		public virtual Field Field
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Field)DslModeling::DomainRoleInfo.GetRolePlayer(this, FieldDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FieldDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Field of a Node
		/// <summary>
		/// Gets a list of Field.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Field> GetField(Node element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Field>, Field>(element, NodeDomainRoleId);
		}
		#endregion
		#region Node link accessor
		/// <summary>
		/// Get the list of NodeReferênciasField links to a Node.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::isep.edom.gorgeous.NodeReferênciasField> GetLinksToField ( global::isep.edom.gorgeous.Node nodeInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::isep.edom.gorgeous.NodeReferênciasField>(nodeInstance, global::isep.edom.gorgeous.NodeReferênciasField.NodeDomainRoleId);
		}
		#endregion
		#region Field link accessor
		/// <summary>
		/// Get the list of NodeReferênciasField links to a Field.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::isep.edom.gorgeous.NodeReferênciasField> GetLinksToNode ( global::isep.edom.gorgeous.Field fieldInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::isep.edom.gorgeous.NodeReferênciasField>(fieldInstance, global::isep.edom.gorgeous.NodeReferênciasField.FieldDomainRoleId);
		}
		#endregion
		#region NodeReferênciasField instance accessors
		
		/// <summary>
		/// Get any NodeReferênciasField links between a given Node and a Field.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::isep.edom.gorgeous.NodeReferênciasField> GetLinks( global::isep.edom.gorgeous.Node source, global::isep.edom.gorgeous.Field target )
		{
			global::System.Collections.Generic.List<global::isep.edom.gorgeous.NodeReferênciasField> outLinks = new global::System.Collections.Generic.List<global::isep.edom.gorgeous.NodeReferênciasField>();
			global::System.Collections.Generic.IList<global::isep.edom.gorgeous.NodeReferênciasField> links = DslModeling::DomainRoleInfo.GetElementLinks<global::isep.edom.gorgeous.NodeReferênciasField>(source, global::isep.edom.gorgeous.NodeReferênciasField.NodeDomainRoleId);
			foreach ( global::isep.edom.gorgeous.NodeReferênciasField link in links )
			{
				if ( target.Equals(link.Field) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one NodeReferênciasField link between a given Nodeand a Field.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::isep.edom.gorgeous.NodeReferênciasField GetLink( global::isep.edom.gorgeous.Node source, global::isep.edom.gorgeous.Field target )
		{
			global::System.Collections.Generic.IList<global::isep.edom.gorgeous.NodeReferênciasField> links = DslModeling::DomainRoleInfo.GetElementLinks<global::isep.edom.gorgeous.NodeReferênciasField>(source, global::isep.edom.gorgeous.NodeReferênciasField.NodeDomainRoleId);
			foreach ( global::isep.edom.gorgeous.NodeReferênciasField link in links )
			{
				if ( target.Equals(link.Field) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace isep.edom.gorgeous
{
	/// <summary>
	/// DomainRelationship ModelTemAutomatic
	/// Descrição de isep.edom.gorgeous.ModelTemAutomatic
	/// </summary>
	[DslDesign::DisplayNameResource("isep.edom.gorgeous.ModelTemAutomatic.DisplayName", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("isep.edom.gorgeous.ModelTemAutomatic.Description", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::isep.edom.gorgeous.gorgeousDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("db805b58-d233-4cd7-9bf3-a432d8331b3b")]
	public partial class ModelTemAutomatic : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ModelTemAutomatic domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xdb805b58, 0xd233, 0x4cd7, 0x9b, 0xf3, 0xa4, 0x32, 0xd8, 0x33, 0x1b, 0x3b);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ModelTemAutomatic link in the same Partition as the given Model
		/// </summary>
		/// <param name="source">Model to use as the source of the relationship.</param>
		/// <param name="target">Automatic to use as the target of the relationship.</param>
		public ModelTemAutomatic(Model source, Automatic target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ModelTemAutomatic.ModelDomainRoleId, source), new DslModeling::RoleAssignment(ModelTemAutomatic.AutomaticDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelTemAutomatic(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelTemAutomatic(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelTemAutomatic(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelTemAutomatic(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Model domain role code
		
		/// <summary>
		/// Model domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelDomainRoleId = new global::System.Guid(0x6781713b, 0xcbfd, 0x42bf, 0xbe, 0x59, 0xa4, 0xa4, 0x51, 0x70, 0x2a, 0xaf);
		
		/// <summary>
		/// DomainRole Model
		/// Descrição de isep.edom.gorgeous.ModelTemAutomatic.Model
		/// </summary>
		[DslDesign::DisplayNameResource("isep.edom.gorgeous.ModelTemAutomatic/Model.DisplayName", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("isep.edom.gorgeous.ModelTemAutomatic/Model.Description", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Automatic", PropertyDisplayNameKey="isep.edom.gorgeous.ModelTemAutomatic/Model.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("6781713b-cbfd-42bf-be59-a4a451702aaf")]
		public virtual Model Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Model)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Model of a Automatic
		/// <summary>
		/// Gets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Model GetModel(Automatic element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, AutomaticDomainRoleId) as Model;
		}
		
		/// <summary>
		/// Sets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModel(Automatic element, Model newModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, AutomaticDomainRoleId, newModel);
		}
		#endregion
		#region Automatic domain role code
		
		/// <summary>
		/// Automatic domain role Id.
		/// </summary>
		public static readonly global::System.Guid AutomaticDomainRoleId = new global::System.Guid(0x269f6a5f, 0x1b6d, 0x46ec, 0x9d, 0xd3, 0x1e, 0x81, 0x96, 0x64, 0x1b, 0x4b);
		
		/// <summary>
		/// DomainRole Automatic
		/// Descrição de isep.edom.gorgeous.ModelTemAutomatic.Automatic
		/// </summary>
		[DslDesign::DisplayNameResource("isep.edom.gorgeous.ModelTemAutomatic/Automatic.DisplayName", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("isep.edom.gorgeous.ModelTemAutomatic/Automatic.Description", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Model", PropertyDisplayNameKey="isep.edom.gorgeous.ModelTemAutomatic/Automatic.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("269f6a5f-1b6d-46ec-9dd3-1e8196641b4b")]
		public virtual Automatic Automatic
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Automatic)DslModeling::DomainRoleInfo.GetRolePlayer(this, AutomaticDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AutomaticDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Automatic of a Model
		/// <summary>
		/// Gets a list of Automatic.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Automatic> GetAutomatic(Model element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Automatic>, Automatic>(element, ModelDomainRoleId);
		}
		#endregion
		#region Model link accessor
		/// <summary>
		/// Get the list of ModelTemAutomatic links to a Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::isep.edom.gorgeous.ModelTemAutomatic> GetLinksToAutomatic ( global::isep.edom.gorgeous.Model modelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::isep.edom.gorgeous.ModelTemAutomatic>(modelInstance, global::isep.edom.gorgeous.ModelTemAutomatic.ModelDomainRoleId);
		}
		#endregion
		#region Automatic link accessor
		/// <summary>
		/// Get the ModelTemAutomatic link to a Automatic.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::isep.edom.gorgeous.ModelTemAutomatic GetLinkToModel (global::isep.edom.gorgeous.Automatic automaticInstance)
		{
			global::System.Collections.Generic.IList<global::isep.edom.gorgeous.ModelTemAutomatic> links = DslModeling::DomainRoleInfo.GetElementLinks<global::isep.edom.gorgeous.ModelTemAutomatic>(automaticInstance, global::isep.edom.gorgeous.ModelTemAutomatic.AutomaticDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Automatic not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ModelTemAutomatic instance accessors
		
		/// <summary>
		/// Get any ModelTemAutomatic links between a given Model and a Automatic.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::isep.edom.gorgeous.ModelTemAutomatic> GetLinks( global::isep.edom.gorgeous.Model source, global::isep.edom.gorgeous.Automatic target )
		{
			global::System.Collections.Generic.List<global::isep.edom.gorgeous.ModelTemAutomatic> outLinks = new global::System.Collections.Generic.List<global::isep.edom.gorgeous.ModelTemAutomatic>();
			global::System.Collections.Generic.IList<global::isep.edom.gorgeous.ModelTemAutomatic> links = DslModeling::DomainRoleInfo.GetElementLinks<global::isep.edom.gorgeous.ModelTemAutomatic>(source, global::isep.edom.gorgeous.ModelTemAutomatic.ModelDomainRoleId);
			foreach ( global::isep.edom.gorgeous.ModelTemAutomatic link in links )
			{
				if ( target.Equals(link.Automatic) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ModelTemAutomatic link between a given Modeland a Automatic.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::isep.edom.gorgeous.ModelTemAutomatic GetLink( global::isep.edom.gorgeous.Model source, global::isep.edom.gorgeous.Automatic target )
		{
			global::System.Collections.Generic.IList<global::isep.edom.gorgeous.ModelTemAutomatic> links = DslModeling::DomainRoleInfo.GetElementLinks<global::isep.edom.gorgeous.ModelTemAutomatic>(source, global::isep.edom.gorgeous.ModelTemAutomatic.ModelDomainRoleId);
			foreach ( global::isep.edom.gorgeous.ModelTemAutomatic link in links )
			{
				if ( target.Equals(link.Automatic) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace isep.edom.gorgeous
{
	/// <summary>
	/// DomainRelationship ModelTemManual
	/// Descrição de isep.edom.gorgeous.ModelTemManual
	/// </summary>
	[DslDesign::DisplayNameResource("isep.edom.gorgeous.ModelTemManual.DisplayName", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("isep.edom.gorgeous.ModelTemManual.Description", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::isep.edom.gorgeous.gorgeousDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("e2956d67-781a-4664-9085-3e57f2bf8cb0")]
	public partial class ModelTemManual : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ModelTemManual domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe2956d67, 0x781a, 0x4664, 0x90, 0x85, 0x3e, 0x57, 0xf2, 0xbf, 0x8c, 0xb0);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ModelTemManual link in the same Partition as the given Model
		/// </summary>
		/// <param name="source">Model to use as the source of the relationship.</param>
		/// <param name="target">Manual to use as the target of the relationship.</param>
		public ModelTemManual(Model source, Manual target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ModelTemManual.ModelDomainRoleId, source), new DslModeling::RoleAssignment(ModelTemManual.ManualDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelTemManual(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelTemManual(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelTemManual(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelTemManual(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Model domain role code
		
		/// <summary>
		/// Model domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelDomainRoleId = new global::System.Guid(0xe50fc8e7, 0xd75a, 0x405d, 0xaf, 0x46, 0xf9, 0x9a, 0x3e, 0xf5, 0x66, 0xa6);
		
		/// <summary>
		/// DomainRole Model
		/// Descrição de isep.edom.gorgeous.ModelTemManual.Model
		/// </summary>
		[DslDesign::DisplayNameResource("isep.edom.gorgeous.ModelTemManual/Model.DisplayName", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("isep.edom.gorgeous.ModelTemManual/Model.Description", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Manual", PropertyDisplayNameKey="isep.edom.gorgeous.ModelTemManual/Model.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("e50fc8e7-d75a-405d-af46-f99a3ef566a6")]
		public virtual Model Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Model)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Model of a Manual
		/// <summary>
		/// Gets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Model GetModel(Manual element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ManualDomainRoleId) as Model;
		}
		
		/// <summary>
		/// Sets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModel(Manual element, Model newModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ManualDomainRoleId, newModel);
		}
		#endregion
		#region Manual domain role code
		
		/// <summary>
		/// Manual domain role Id.
		/// </summary>
		public static readonly global::System.Guid ManualDomainRoleId = new global::System.Guid(0xda5cc17a, 0x95b4, 0x4c25, 0x80, 0x07, 0x59, 0x14, 0x48, 0x5c, 0x4f, 0xf2);
		
		/// <summary>
		/// DomainRole Manual
		/// Descrição de isep.edom.gorgeous.ModelTemManual.Manual
		/// </summary>
		[DslDesign::DisplayNameResource("isep.edom.gorgeous.ModelTemManual/Manual.DisplayName", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("isep.edom.gorgeous.ModelTemManual/Manual.Description", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Model", PropertyDisplayNameKey="isep.edom.gorgeous.ModelTemManual/Manual.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("da5cc17a-95b4-4c25-8007-5914485c4ff2")]
		public virtual Manual Manual
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Manual)DslModeling::DomainRoleInfo.GetRolePlayer(this, ManualDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ManualDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Manual of a Model
		/// <summary>
		/// Gets a list of Manual.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Manual> GetManual(Model element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Manual>, Manual>(element, ModelDomainRoleId);
		}
		#endregion
		#region Model link accessor
		/// <summary>
		/// Get the list of ModelTemManual links to a Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::isep.edom.gorgeous.ModelTemManual> GetLinksToManual ( global::isep.edom.gorgeous.Model modelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::isep.edom.gorgeous.ModelTemManual>(modelInstance, global::isep.edom.gorgeous.ModelTemManual.ModelDomainRoleId);
		}
		#endregion
		#region Manual link accessor
		/// <summary>
		/// Get the ModelTemManual link to a Manual.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::isep.edom.gorgeous.ModelTemManual GetLinkToModel (global::isep.edom.gorgeous.Manual manualInstance)
		{
			global::System.Collections.Generic.IList<global::isep.edom.gorgeous.ModelTemManual> links = DslModeling::DomainRoleInfo.GetElementLinks<global::isep.edom.gorgeous.ModelTemManual>(manualInstance, global::isep.edom.gorgeous.ModelTemManual.ManualDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Manual not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ModelTemManual instance accessors
		
		/// <summary>
		/// Get any ModelTemManual links between a given Model and a Manual.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::isep.edom.gorgeous.ModelTemManual> GetLinks( global::isep.edom.gorgeous.Model source, global::isep.edom.gorgeous.Manual target )
		{
			global::System.Collections.Generic.List<global::isep.edom.gorgeous.ModelTemManual> outLinks = new global::System.Collections.Generic.List<global::isep.edom.gorgeous.ModelTemManual>();
			global::System.Collections.Generic.IList<global::isep.edom.gorgeous.ModelTemManual> links = DslModeling::DomainRoleInfo.GetElementLinks<global::isep.edom.gorgeous.ModelTemManual>(source, global::isep.edom.gorgeous.ModelTemManual.ModelDomainRoleId);
			foreach ( global::isep.edom.gorgeous.ModelTemManual link in links )
			{
				if ( target.Equals(link.Manual) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ModelTemManual link between a given Modeland a Manual.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::isep.edom.gorgeous.ModelTemManual GetLink( global::isep.edom.gorgeous.Model source, global::isep.edom.gorgeous.Manual target )
		{
			global::System.Collections.Generic.IList<global::isep.edom.gorgeous.ModelTemManual> links = DslModeling::DomainRoleInfo.GetElementLinks<global::isep.edom.gorgeous.ModelTemManual>(source, global::isep.edom.gorgeous.ModelTemManual.ModelDomainRoleId);
			foreach ( global::isep.edom.gorgeous.ModelTemManual link in links )
			{
				if ( target.Equals(link.Manual) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace isep.edom.gorgeous
{
	/// <summary>
	/// DomainRelationship AutomaticReferênciasNode
	/// Descrição de isep.edom.gorgeous.AutomaticReferênciasNode
	/// </summary>
	[DslDesign::DisplayNameResource("isep.edom.gorgeous.AutomaticReferênciasNode.DisplayName", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("isep.edom.gorgeous.AutomaticReferênciasNode.Description", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::isep.edom.gorgeous.gorgeousDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("a837f812-454d-4758-b064-93212115e73a")]
	public partial class AutomaticReferênciasNode : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// AutomaticReferênciasNode domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa837f812, 0x454d, 0x4758, 0xb0, 0x64, 0x93, 0x21, 0x21, 0x15, 0xe7, 0x3a);
	
				
		/// <summary>
		/// Constructor
		/// Creates a AutomaticReferênciasNode link in the same Partition as the given Automatic
		/// </summary>
		/// <param name="source">Automatic to use as the source of the relationship.</param>
		/// <param name="target">Node to use as the target of the relationship.</param>
		public AutomaticReferênciasNode(Automatic source, Node target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(AutomaticReferênciasNode.AutomaticDomainRoleId, source), new DslModeling::RoleAssignment(AutomaticReferênciasNode.NodeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AutomaticReferênciasNode(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AutomaticReferênciasNode(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AutomaticReferênciasNode(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AutomaticReferênciasNode(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Automatic domain role code
		
		/// <summary>
		/// Automatic domain role Id.
		/// </summary>
		public static readonly global::System.Guid AutomaticDomainRoleId = new global::System.Guid(0x3874f0d0, 0xdffb, 0x4f99, 0xa2, 0x67, 0x7c, 0x13, 0x0e, 0x8d, 0x57, 0xa7);
		
		/// <summary>
		/// DomainRole Automatic
		/// Descrição de isep.edom.gorgeous.AutomaticReferênciasNode.Automatic
		/// </summary>
		[DslDesign::DisplayNameResource("isep.edom.gorgeous.AutomaticReferênciasNode/Automatic.DisplayName", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("isep.edom.gorgeous.AutomaticReferênciasNode/Automatic.Description", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Node", PropertyDisplayNameKey="isep.edom.gorgeous.AutomaticReferênciasNode/Automatic.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("3874f0d0-dffb-4f99-a267-7c130e8d57a7")]
		public virtual Automatic Automatic
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Automatic)DslModeling::DomainRoleInfo.GetRolePlayer(this, AutomaticDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AutomaticDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Automatic of a Node
		/// <summary>
		/// Gets a list of Automatic.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Automatic> GetAutomatic(Node element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Automatic>, Automatic>(element, NodeDomainRoleId);
		}
		#endregion
		#region Node domain role code
		
		/// <summary>
		/// Node domain role Id.
		/// </summary>
		public static readonly global::System.Guid NodeDomainRoleId = new global::System.Guid(0x8cce87c8, 0x1303, 0x4312, 0x83, 0x5a, 0x40, 0x18, 0x24, 0x46, 0x25, 0x1d);
		
		/// <summary>
		/// DomainRole Node
		/// Descrição de isep.edom.gorgeous.AutomaticReferênciasNode.Node
		/// </summary>
		[DslDesign::DisplayNameResource("isep.edom.gorgeous.AutomaticReferênciasNode/Node.DisplayName", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("isep.edom.gorgeous.AutomaticReferênciasNode/Node.Description", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Automatic", PropertyDisplayNameKey="isep.edom.gorgeous.AutomaticReferênciasNode/Node.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("8cce87c8-1303-4312-835a-40182446251d")]
		public virtual Node Node
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Node)DslModeling::DomainRoleInfo.GetRolePlayer(this, NodeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, NodeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Node of a Automatic
		/// <summary>
		/// Gets a list of Node.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Node> GetNode(Automatic element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Node>, Node>(element, AutomaticDomainRoleId);
		}
		#endregion
		#region Automatic link accessor
		/// <summary>
		/// Get the list of AutomaticReferênciasNode links to a Automatic.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::isep.edom.gorgeous.AutomaticReferênciasNode> GetLinksToNode ( global::isep.edom.gorgeous.Automatic automaticInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::isep.edom.gorgeous.AutomaticReferênciasNode>(automaticInstance, global::isep.edom.gorgeous.AutomaticReferênciasNode.AutomaticDomainRoleId);
		}
		#endregion
		#region Node link accessor
		/// <summary>
		/// Get the list of AutomaticReferênciasNode links to a Node.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::isep.edom.gorgeous.AutomaticReferênciasNode> GetLinksToAutomatic ( global::isep.edom.gorgeous.Node nodeInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::isep.edom.gorgeous.AutomaticReferênciasNode>(nodeInstance, global::isep.edom.gorgeous.AutomaticReferênciasNode.NodeDomainRoleId);
		}
		#endregion
		#region AutomaticReferênciasNode instance accessors
		
		/// <summary>
		/// Get any AutomaticReferênciasNode links between a given Automatic and a Node.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::isep.edom.gorgeous.AutomaticReferênciasNode> GetLinks( global::isep.edom.gorgeous.Automatic source, global::isep.edom.gorgeous.Node target )
		{
			global::System.Collections.Generic.List<global::isep.edom.gorgeous.AutomaticReferênciasNode> outLinks = new global::System.Collections.Generic.List<global::isep.edom.gorgeous.AutomaticReferênciasNode>();
			global::System.Collections.Generic.IList<global::isep.edom.gorgeous.AutomaticReferênciasNode> links = DslModeling::DomainRoleInfo.GetElementLinks<global::isep.edom.gorgeous.AutomaticReferênciasNode>(source, global::isep.edom.gorgeous.AutomaticReferênciasNode.AutomaticDomainRoleId);
			foreach ( global::isep.edom.gorgeous.AutomaticReferênciasNode link in links )
			{
				if ( target.Equals(link.Node) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one AutomaticReferênciasNode link between a given Automaticand a Node.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::isep.edom.gorgeous.AutomaticReferênciasNode GetLink( global::isep.edom.gorgeous.Automatic source, global::isep.edom.gorgeous.Node target )
		{
			global::System.Collections.Generic.IList<global::isep.edom.gorgeous.AutomaticReferênciasNode> links = DslModeling::DomainRoleInfo.GetElementLinks<global::isep.edom.gorgeous.AutomaticReferênciasNode>(source, global::isep.edom.gorgeous.AutomaticReferênciasNode.AutomaticDomainRoleId);
			foreach ( global::isep.edom.gorgeous.AutomaticReferênciasNode link in links )
			{
				if ( target.Equals(link.Node) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace isep.edom.gorgeous
{
	/// <summary>
	/// DomainRelationship ManualReferênciasNode
	/// Descrição de isep.edom.gorgeous.ManualReferênciasNode
	/// </summary>
	[DslDesign::DisplayNameResource("isep.edom.gorgeous.ManualReferênciasNode.DisplayName", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("isep.edom.gorgeous.ManualReferênciasNode.Description", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::isep.edom.gorgeous.gorgeousDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("ffb320d9-0c49-4660-a688-165f91ccadc5")]
	public partial class ManualReferênciasNode : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ManualReferênciasNode domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xffb320d9, 0x0c49, 0x4660, 0xa6, 0x88, 0x16, 0x5f, 0x91, 0xcc, 0xad, 0xc5);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ManualReferênciasNode link in the same Partition as the given Manual
		/// </summary>
		/// <param name="source">Manual to use as the source of the relationship.</param>
		/// <param name="target">Node to use as the target of the relationship.</param>
		public ManualReferênciasNode(Manual source, Node target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ManualReferênciasNode.ManualDomainRoleId, source), new DslModeling::RoleAssignment(ManualReferênciasNode.NodeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ManualReferênciasNode(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ManualReferênciasNode(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ManualReferênciasNode(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ManualReferênciasNode(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Manual domain role code
		
		/// <summary>
		/// Manual domain role Id.
		/// </summary>
		public static readonly global::System.Guid ManualDomainRoleId = new global::System.Guid(0xf006842b, 0xc86f, 0x4f58, 0x82, 0x25, 0x42, 0x3a, 0x0a, 0x10, 0xab, 0xac);
		
		/// <summary>
		/// DomainRole Manual
		/// Descrição de isep.edom.gorgeous.ManualReferênciasNode.Manual
		/// </summary>
		[DslDesign::DisplayNameResource("isep.edom.gorgeous.ManualReferênciasNode/Manual.DisplayName", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("isep.edom.gorgeous.ManualReferênciasNode/Manual.Description", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Node", PropertyDisplayNameKey="isep.edom.gorgeous.ManualReferênciasNode/Manual.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("f006842b-c86f-4f58-8225-423a0a10abac")]
		public virtual Manual Manual
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Manual)DslModeling::DomainRoleInfo.GetRolePlayer(this, ManualDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ManualDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Manual of a Node
		/// <summary>
		/// Gets a list of Manual.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Manual> GetManual(Node element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Manual>, Manual>(element, NodeDomainRoleId);
		}
		#endregion
		#region Node domain role code
		
		/// <summary>
		/// Node domain role Id.
		/// </summary>
		public static readonly global::System.Guid NodeDomainRoleId = new global::System.Guid(0xc63924c3, 0xcbd5, 0x4d3c, 0xa6, 0x53, 0x7b, 0xf0, 0x82, 0x29, 0xe8, 0x38);
		
		/// <summary>
		/// DomainRole Node
		/// Descrição de isep.edom.gorgeous.ManualReferênciasNode.Node
		/// </summary>
		[DslDesign::DisplayNameResource("isep.edom.gorgeous.ManualReferênciasNode/Node.DisplayName", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("isep.edom.gorgeous.ManualReferênciasNode/Node.Description", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Manual", PropertyDisplayNameKey="isep.edom.gorgeous.ManualReferênciasNode/Node.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("c63924c3-cbd5-4d3c-a653-7bf08229e838")]
		public virtual Node Node
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Node)DslModeling::DomainRoleInfo.GetRolePlayer(this, NodeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, NodeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Node of a Manual
		/// <summary>
		/// Gets a list of Node.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Node> GetNode(Manual element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Node>, Node>(element, ManualDomainRoleId);
		}
		#endregion
		#region Manual link accessor
		/// <summary>
		/// Get the list of ManualReferênciasNode links to a Manual.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::isep.edom.gorgeous.ManualReferênciasNode> GetLinksToNode ( global::isep.edom.gorgeous.Manual manualInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::isep.edom.gorgeous.ManualReferênciasNode>(manualInstance, global::isep.edom.gorgeous.ManualReferênciasNode.ManualDomainRoleId);
		}
		#endregion
		#region Node link accessor
		/// <summary>
		/// Get the list of ManualReferênciasNode links to a Node.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::isep.edom.gorgeous.ManualReferênciasNode> GetLinksToManual ( global::isep.edom.gorgeous.Node nodeInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::isep.edom.gorgeous.ManualReferênciasNode>(nodeInstance, global::isep.edom.gorgeous.ManualReferênciasNode.NodeDomainRoleId);
		}
		#endregion
		#region ManualReferênciasNode instance accessors
		
		/// <summary>
		/// Get any ManualReferênciasNode links between a given Manual and a Node.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::isep.edom.gorgeous.ManualReferênciasNode> GetLinks( global::isep.edom.gorgeous.Manual source, global::isep.edom.gorgeous.Node target )
		{
			global::System.Collections.Generic.List<global::isep.edom.gorgeous.ManualReferênciasNode> outLinks = new global::System.Collections.Generic.List<global::isep.edom.gorgeous.ManualReferênciasNode>();
			global::System.Collections.Generic.IList<global::isep.edom.gorgeous.ManualReferênciasNode> links = DslModeling::DomainRoleInfo.GetElementLinks<global::isep.edom.gorgeous.ManualReferênciasNode>(source, global::isep.edom.gorgeous.ManualReferênciasNode.ManualDomainRoleId);
			foreach ( global::isep.edom.gorgeous.ManualReferênciasNode link in links )
			{
				if ( target.Equals(link.Node) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ManualReferênciasNode link between a given Manualand a Node.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::isep.edom.gorgeous.ManualReferênciasNode GetLink( global::isep.edom.gorgeous.Manual source, global::isep.edom.gorgeous.Node target )
		{
			global::System.Collections.Generic.IList<global::isep.edom.gorgeous.ManualReferênciasNode> links = DslModeling::DomainRoleInfo.GetElementLinks<global::isep.edom.gorgeous.ManualReferênciasNode>(source, global::isep.edom.gorgeous.ManualReferênciasNode.ManualDomainRoleId);
			foreach ( global::isep.edom.gorgeous.ManualReferênciasNode link in links )
			{
				if ( target.Equals(link.Node) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
