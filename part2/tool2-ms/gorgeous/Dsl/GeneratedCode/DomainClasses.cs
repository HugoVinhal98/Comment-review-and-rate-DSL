//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace isep.edom.gorgeous
{
	/// <summary>
	/// DomainClass Model
	/// The root in which all other elements are embedded. Appears as a diagram.
	/// </summary>
	[DslDesign::DisplayNameResource("isep.edom.gorgeous.Model.DisplayName", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("isep.edom.gorgeous.Model.Description", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::isep.edom.gorgeous.gorgeousDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("59b82209-2742-4f3e-bd30-7b306880f157")]
	public partial class Model : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Model domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x59b82209, 0x2742, 0x4f3e, 0xbd, 0x30, 0x7b, 0x30, 0x68, 0x80, 0xf1, 0x57);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Model(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Model(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x49e4be41, 0x794f, 0x4d32, 0x85, 0x1e, 0x92, 0xeb, 0xd4, 0x58, 0x26, 0x2e);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Descrição de isep.edom.gorgeous.Model.Name
		/// </summary>
		[DslDesign::DisplayNameResource("isep.edom.gorgeous.Model/Name.DisplayName", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("isep.edom.gorgeous.Model/Name.Description", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("49e4be41-794f-4d32-851e-92ebd458262e")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Model.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<Model, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Model.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Model.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Model element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Model element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region User opposite domain role accessor
		
		/// <summary>
		/// Gets a list of User.
		/// Descrição de isep.edom.gorgeous.ModelTemUser.Model
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<User> User
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<User>, User>(global::isep.edom.gorgeous.ModelTemUser.ModelDomainRoleId);
			}
		}
		#endregion
		#region Subject opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Subject.
		/// Descrição de isep.edom.gorgeous.ModelTemSubject.Model
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Subject> Subject
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Subject>, Subject>(global::isep.edom.gorgeous.ModelTemSubject.ModelDomainRoleId);
			}
		}
		#endregion
		#region Review opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Review.
		/// Descrição de isep.edom.gorgeous.ModelTemReview.Model
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Review> Review
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Review>, Review>(global::isep.edom.gorgeous.ModelTemReview.ModelDomainRoleId);
			}
		}
		#endregion
		#region Comment opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Comment.
		/// Descrição de isep.edom.gorgeous.ModelTemComment.Model
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Comment> Comment
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Comment>, Comment>(global::isep.edom.gorgeous.ModelTemComment.ModelDomainRoleId);
			}
		}
		#endregion
		#region Field opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Field.
		/// Descrição de isep.edom.gorgeous.ModelTemField.Model
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Field> Field
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Field>, Field>(global::isep.edom.gorgeous.ModelTemField.ModelDomainRoleId);
			}
		}
		#endregion
		#region ReviewComment opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ReviewComment.
		/// Descrição de isep.edom.gorgeous.ModelTemReviewComment.Model
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ReviewComment> ReviewComment
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ReviewComment>, ReviewComment>(global::isep.edom.gorgeous.ModelTemReviewComment.ModelDomainRoleId);
			}
		}
		#endregion
		#region Process opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Process.
		/// Descrição de isep.edom.gorgeous.ModelTemProcess.Model
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Process> Process
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Process>, Process>(global::isep.edom.gorgeous.ModelTemProcess.ModelDomainRoleId);
			}
		}
		#endregion
		#region Node opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Node.
		/// Descrição de isep.edom.gorgeous.ModelTemNode.Model
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Node> Node
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Node>, Node>(global::isep.edom.gorgeous.ModelTemNode.ModelDomainRoleId);
			}
		}
		#endregion
		#region Automatic opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Automatic.
		/// Descrição de isep.edom.gorgeous.ModelTemAutomatic.Model
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Automatic> Automatic
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Automatic>, Automatic>(global::isep.edom.gorgeous.ModelTemAutomatic.ModelDomainRoleId);
			}
		}
		#endregion
		#region Manual opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Manual.
		/// Descrição de isep.edom.gorgeous.ModelTemManual.Model
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Manual> Manual
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Manual>, Manual>(global::isep.edom.gorgeous.ModelTemManual.ModelDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::isep.edom.gorgeous.User.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::isep.edom.gorgeous.Subject.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::isep.edom.gorgeous.Review.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::isep.edom.gorgeous.Comment.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::isep.edom.gorgeous.Field.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::isep.edom.gorgeous.ReviewComment.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::isep.edom.gorgeous.Process.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::isep.edom.gorgeous.Node.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::isep.edom.gorgeous.Automatic.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::isep.edom.gorgeous.Manual.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::isep.edom.gorgeous.User sourceUser1 = sourceElement as global::isep.edom.gorgeous.User;
			if (sourceUser1 != null)
			{
				// Create link for path ModelTemUser.User
				this.User.Add(sourceUser1);

				return;
			}
				
			global::isep.edom.gorgeous.Subject sourceSubject2 = sourceElement as global::isep.edom.gorgeous.Subject;
			if (sourceSubject2 != null)
			{
				// Create link for path ModelTemSubject.Subject
				this.Subject.Add(sourceSubject2);

				return;
			}
				
			global::isep.edom.gorgeous.Review sourceReview3 = sourceElement as global::isep.edom.gorgeous.Review;
			if (sourceReview3 != null)
			{
				// Create link for path ModelTemReview.Review
				this.Review.Add(sourceReview3);

				return;
			}
				
			global::isep.edom.gorgeous.Comment sourceComment4 = sourceElement as global::isep.edom.gorgeous.Comment;
			if (sourceComment4 != null)
			{
				// Create link for path ModelTemComment.Comment
				this.Comment.Add(sourceComment4);

				return;
			}
				
			global::isep.edom.gorgeous.Field sourceField5 = sourceElement as global::isep.edom.gorgeous.Field;
			if (sourceField5 != null)
			{
				// Create link for path ModelTemField.Field
				this.Field.Add(sourceField5);

				return;
			}
				
			global::isep.edom.gorgeous.ReviewComment sourceReviewComment6 = sourceElement as global::isep.edom.gorgeous.ReviewComment;
			if (sourceReviewComment6 != null)
			{
				// Create link for path ModelTemReviewComment.ReviewComment
				this.ReviewComment.Add(sourceReviewComment6);

				return;
			}
				
			global::isep.edom.gorgeous.Process sourceProcess7 = sourceElement as global::isep.edom.gorgeous.Process;
			if (sourceProcess7 != null)
			{
				// Create link for path ModelTemProcess.Process
				this.Process.Add(sourceProcess7);

				return;
			}
				
			global::isep.edom.gorgeous.Node sourceNode8 = sourceElement as global::isep.edom.gorgeous.Node;
			if (sourceNode8 != null)
			{
				// Create link for path ModelTemNode.Node
				this.Node.Add(sourceNode8);

				return;
			}
				
			global::isep.edom.gorgeous.Automatic sourceAutomatic9 = sourceElement as global::isep.edom.gorgeous.Automatic;
			if (sourceAutomatic9 != null)
			{
				// Create link for path ModelTemAutomatic.Automatic
				this.Automatic.Add(sourceAutomatic9);

				return;
			}
				
			global::isep.edom.gorgeous.Manual sourceManual10 = sourceElement as global::isep.edom.gorgeous.Manual;
			if (sourceManual10 != null)
			{
				// Create link for path ModelTemManual.Manual
				this.Manual.Add(sourceManual10);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::isep.edom.gorgeous.User sourceUser1 = sourceElement as global::isep.edom.gorgeous.User;
			if (sourceUser1 != null)
			{
				// Delete link for path ModelTemUser.User
				
				foreach (DslModeling::ElementLink link in global::isep.edom.gorgeous.ModelTemUser.GetLinks((global::isep.edom.gorgeous.Model)this, sourceUser1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::isep.edom.gorgeous.ModelTemUser.ModelDomainRoleId, global::isep.edom.gorgeous.ModelTemUser.UserDomainRoleId);
				}

				return;
			}
				
			global::isep.edom.gorgeous.Subject sourceSubject2 = sourceElement as global::isep.edom.gorgeous.Subject;
			if (sourceSubject2 != null)
			{
				// Delete link for path ModelTemSubject.Subject
				
				foreach (DslModeling::ElementLink link in global::isep.edom.gorgeous.ModelTemSubject.GetLinks((global::isep.edom.gorgeous.Model)this, sourceSubject2))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::isep.edom.gorgeous.ModelTemSubject.ModelDomainRoleId, global::isep.edom.gorgeous.ModelTemSubject.SubjectDomainRoleId);
				}

				return;
			}
				
			global::isep.edom.gorgeous.Review sourceReview3 = sourceElement as global::isep.edom.gorgeous.Review;
			if (sourceReview3 != null)
			{
				// Delete link for path ModelTemReview.Review
				
				foreach (DslModeling::ElementLink link in global::isep.edom.gorgeous.ModelTemReview.GetLinks((global::isep.edom.gorgeous.Model)this, sourceReview3))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::isep.edom.gorgeous.ModelTemReview.ModelDomainRoleId, global::isep.edom.gorgeous.ModelTemReview.ReviewDomainRoleId);
				}

				return;
			}
				
			global::isep.edom.gorgeous.Comment sourceComment4 = sourceElement as global::isep.edom.gorgeous.Comment;
			if (sourceComment4 != null)
			{
				// Delete link for path ModelTemComment.Comment
				
				foreach (DslModeling::ElementLink link in global::isep.edom.gorgeous.ModelTemComment.GetLinks((global::isep.edom.gorgeous.Model)this, sourceComment4))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::isep.edom.gorgeous.ModelTemComment.ModelDomainRoleId, global::isep.edom.gorgeous.ModelTemComment.CommentDomainRoleId);
				}

				return;
			}
				
			global::isep.edom.gorgeous.Field sourceField5 = sourceElement as global::isep.edom.gorgeous.Field;
			if (sourceField5 != null)
			{
				// Delete link for path ModelTemField.Field
				
				foreach (DslModeling::ElementLink link in global::isep.edom.gorgeous.ModelTemField.GetLinks((global::isep.edom.gorgeous.Model)this, sourceField5))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::isep.edom.gorgeous.ModelTemField.ModelDomainRoleId, global::isep.edom.gorgeous.ModelTemField.FieldDomainRoleId);
				}

				return;
			}
				
			global::isep.edom.gorgeous.ReviewComment sourceReviewComment6 = sourceElement as global::isep.edom.gorgeous.ReviewComment;
			if (sourceReviewComment6 != null)
			{
				// Delete link for path ModelTemReviewComment.ReviewComment
				
				foreach (DslModeling::ElementLink link in global::isep.edom.gorgeous.ModelTemReviewComment.GetLinks((global::isep.edom.gorgeous.Model)this, sourceReviewComment6))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::isep.edom.gorgeous.ModelTemReviewComment.ModelDomainRoleId, global::isep.edom.gorgeous.ModelTemReviewComment.ReviewCommentDomainRoleId);
				}

				return;
			}
				
			global::isep.edom.gorgeous.Process sourceProcess7 = sourceElement as global::isep.edom.gorgeous.Process;
			if (sourceProcess7 != null)
			{
				// Delete link for path ModelTemProcess.Process
				
				foreach (DslModeling::ElementLink link in global::isep.edom.gorgeous.ModelTemProcess.GetLinks((global::isep.edom.gorgeous.Model)this, sourceProcess7))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::isep.edom.gorgeous.ModelTemProcess.ModelDomainRoleId, global::isep.edom.gorgeous.ModelTemProcess.ProcessDomainRoleId);
				}

				return;
			}
				
			global::isep.edom.gorgeous.Node sourceNode8 = sourceElement as global::isep.edom.gorgeous.Node;
			if (sourceNode8 != null)
			{
				// Delete link for path ModelTemNode.Node
				
				foreach (DslModeling::ElementLink link in global::isep.edom.gorgeous.ModelTemNode.GetLinks((global::isep.edom.gorgeous.Model)this, sourceNode8))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::isep.edom.gorgeous.ModelTemNode.ModelDomainRoleId, global::isep.edom.gorgeous.ModelTemNode.NodeDomainRoleId);
				}

				return;
			}
				
			global::isep.edom.gorgeous.Automatic sourceAutomatic9 = sourceElement as global::isep.edom.gorgeous.Automatic;
			if (sourceAutomatic9 != null)
			{
				// Delete link for path ModelTemAutomatic.Automatic
				
				foreach (DslModeling::ElementLink link in global::isep.edom.gorgeous.ModelTemAutomatic.GetLinks((global::isep.edom.gorgeous.Model)this, sourceAutomatic9))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::isep.edom.gorgeous.ModelTemAutomatic.ModelDomainRoleId, global::isep.edom.gorgeous.ModelTemAutomatic.AutomaticDomainRoleId);
				}

				return;
			}
				
			global::isep.edom.gorgeous.Manual sourceManual10 = sourceElement as global::isep.edom.gorgeous.Manual;
			if (sourceManual10 != null)
			{
				// Delete link for path ModelTemManual.Manual
				
				foreach (DslModeling::ElementLink link in global::isep.edom.gorgeous.ModelTemManual.GetLinks((global::isep.edom.gorgeous.Model)this, sourceManual10))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::isep.edom.gorgeous.ModelTemManual.ModelDomainRoleId, global::isep.edom.gorgeous.ModelTemManual.ManualDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace isep.edom.gorgeous
{
	/// <summary>
	/// DomainClass User
	/// Descrição de isep.edom.gorgeous.User
	/// </summary>
	[DslDesign::DisplayNameResource("isep.edom.gorgeous.User.DisplayName", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("isep.edom.gorgeous.User.Description", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::isep.edom.gorgeous.gorgeousDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("13d9b6bb-f4d8-4c69-91c7-9a0f8c1fec3b")]
	public partial class User : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// User domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x13d9b6bb, 0xf4d8, 0x4c69, 0x91, 0xc7, 0x9a, 0x0f, 0x8c, 0x1f, 0xec, 0x3b);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public User(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public User(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x859461d0, 0xa70a, 0x43c5, 0x93, 0x99, 0xbe, 0x5e, 0xcb, 0xa3, 0xcc, 0x52);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Descrição de isep.edom.gorgeous.User.Name
		/// </summary>
		[DslDesign::DisplayNameResource("isep.edom.gorgeous.User/Name.DisplayName", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("isep.edom.gorgeous.User/Name.Description", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("859461d0-a70a-43c5-9399-be5ecba3cc52")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the User.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<User, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the User.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the User.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(User element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(User element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Model opposite domain role accessor
		/// <summary>
		/// Gets or sets Model.
		/// Descrição de isep.edom.gorgeous.ModelTemUser.User
		/// </summary>
		public virtual Model Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::isep.edom.gorgeous.ModelTemUser.UserDomainRoleId) as Model;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::isep.edom.gorgeous.ModelTemUser.UserDomainRoleId, value);
			}
		}
		#endregion
		#region Subject opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Subject.
		/// Descrição de isep.edom.gorgeous.SubjectReferênciasUser.User
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Subject> Subject
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Subject>, Subject>(global::isep.edom.gorgeous.SubjectReferênciasUser.UserDomainRoleId);
			}
		}
		#endregion
		#region Review opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Review.
		/// Descrição de isep.edom.gorgeous.ReviewReferênciasUser.User
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Review> Review
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Review>, Review>(global::isep.edom.gorgeous.ReviewReferênciasUser.UserDomainRoleId);
			}
		}
		#endregion
		#region Comment opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Comment.
		/// Descrição de isep.edom.gorgeous.CommentReferênciasUser.User
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Comment> Comment
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Comment>, Comment>(global::isep.edom.gorgeous.CommentReferênciasUser.UserDomainRoleId);
			}
		}
		#endregion
		#region Field opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Field.
		/// Descrição de isep.edom.gorgeous.UserReferênciasField.User
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Field> Field
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Field>, Field>(global::isep.edom.gorgeous.UserReferênciasField.UserDomainRoleId);
			}
		}
		#endregion
	}
}
namespace isep.edom.gorgeous
{
	/// <summary>
	/// DomainClass Subject
	/// Descrição de isep.edom.gorgeous.Subject
	/// </summary>
	[DslDesign::DisplayNameResource("isep.edom.gorgeous.Subject.DisplayName", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("isep.edom.gorgeous.Subject.Description", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::isep.edom.gorgeous.gorgeousDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("3715e5d8-5a7b-4371-9410-cdbb66795a5b")]
	public partial class Subject : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Subject domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x3715e5d8, 0x5a7b, 0x4371, 0x94, 0x10, 0xcd, 0xbb, 0x66, 0x79, 0x5a, 0x5b);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Subject(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Subject(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x85aa1c92, 0xeea0, 0x4e7f, 0x87, 0x4b, 0xb7, 0xb1, 0x73, 0x06, 0xbe, 0xee);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Descrição de isep.edom.gorgeous.Subject.Name
		/// </summary>
		[DslDesign::DisplayNameResource("isep.edom.gorgeous.Subject/Name.DisplayName", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("isep.edom.gorgeous.Subject/Name.Description", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("85aa1c92-eea0-4e7f-874b-b7b17306beee")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Subject.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<Subject, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Subject.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Subject.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Subject element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Subject element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Model opposite domain role accessor
		/// <summary>
		/// Gets or sets Model.
		/// Descrição de isep.edom.gorgeous.ModelTemSubject.Subject
		/// </summary>
		public virtual Model Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::isep.edom.gorgeous.ModelTemSubject.SubjectDomainRoleId) as Model;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::isep.edom.gorgeous.ModelTemSubject.SubjectDomainRoleId, value);
			}
		}
		#endregion
		#region User opposite domain role accessor
		
		/// <summary>
		/// Gets a list of User.
		/// Descrição de isep.edom.gorgeous.SubjectReferênciasUser.Subject
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<User> User
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<User>, User>(global::isep.edom.gorgeous.SubjectReferênciasUser.SubjectDomainRoleId);
			}
		}
		#endregion
		#region Field opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Field.
		/// Descrição de isep.edom.gorgeous.SubjectReferênciasField.Subject
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Field> Field
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Field>, Field>(global::isep.edom.gorgeous.SubjectReferênciasField.SubjectDomainRoleId);
			}
		}
		#endregion
		#region ReviewComment opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ReviewComment.
		/// Descrição de isep.edom.gorgeous.SubjectReferênciasReviewComment.Subject
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ReviewComment> ReviewComment
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ReviewComment>, ReviewComment>(global::isep.edom.gorgeous.SubjectReferênciasReviewComment.SubjectDomainRoleId);
			}
		}
		#endregion
	}
}
namespace isep.edom.gorgeous
{
	/// <summary>
	/// DomainClass Review
	/// Descrição de isep.edom.gorgeous.Review
	/// </summary>
	[DslDesign::DisplayNameResource("isep.edom.gorgeous.Review.DisplayName", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("isep.edom.gorgeous.Review.Description", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::isep.edom.gorgeous.gorgeousDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("ecd5a3cc-9be1-4a27-bba0-fbb517073ac9")]
	public partial class Review : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Review domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xecd5a3cc, 0x9be1, 0x4a27, 0xbb, 0xa0, 0xfb, 0xb5, 0x17, 0x07, 0x3a, 0xc9);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Review(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Review(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x7f959baf, 0xff89, 0x4285, 0x9a, 0xc6, 0x9a, 0x50, 0x12, 0x07, 0xc8, 0xc9);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Descrição de isep.edom.gorgeous.Review.Name
		/// </summary>
		[DslDesign::DisplayNameResource("isep.edom.gorgeous.Review/Name.DisplayName", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("isep.edom.gorgeous.Review/Name.Description", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("7f959baf-ff89-4285-9ac6-9a501207c8c9")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Review.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<Review, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Review.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Review.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Review element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Review element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Model opposite domain role accessor
		/// <summary>
		/// Gets or sets Model.
		/// Descrição de isep.edom.gorgeous.ModelTemReview.Review
		/// </summary>
		public virtual Model Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::isep.edom.gorgeous.ModelTemReview.ReviewDomainRoleId) as Model;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::isep.edom.gorgeous.ModelTemReview.ReviewDomainRoleId, value);
			}
		}
		#endregion
		#region User opposite domain role accessor
		
		/// <summary>
		/// Gets a list of User.
		/// Descrição de isep.edom.gorgeous.ReviewReferênciasUser.Review
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<User> User
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<User>, User>(global::isep.edom.gorgeous.ReviewReferênciasUser.ReviewDomainRoleId);
			}
		}
		#endregion
		#region Field opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Field.
		/// Descrição de isep.edom.gorgeous.ReviewReferênciasField.Review
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Field> Field
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Field>, Field>(global::isep.edom.gorgeous.ReviewReferênciasField.ReviewDomainRoleId);
			}
		}
		#endregion
		#region ReviewComment opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ReviewComment.
		/// Descrição de isep.edom.gorgeous.ReviewReferênciasReviewComment.Review
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ReviewComment> ReviewComment
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ReviewComment>, ReviewComment>(global::isep.edom.gorgeous.ReviewReferênciasReviewComment.ReviewDomainRoleId);
			}
		}
		#endregion
	}
}
namespace isep.edom.gorgeous
{
	/// <summary>
	/// DomainClass Comment
	/// Descrição de isep.edom.gorgeous.Comment
	/// </summary>
	[DslDesign::DisplayNameResource("isep.edom.gorgeous.Comment.DisplayName", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("isep.edom.gorgeous.Comment.Description", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::isep.edom.gorgeous.gorgeousDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("c3e7e4ba-5535-4315-981b-d04f1441a951")]
	public partial class Comment : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Comment domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc3e7e4ba, 0x5535, 0x4315, 0x98, 0x1b, 0xd0, 0x4f, 0x14, 0x41, 0xa9, 0x51);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Comment(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Comment(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x49cdf8c7, 0x9711, 0x456e, 0xac, 0x72, 0x1c, 0x64, 0xf8, 0x4b, 0xfa, 0xa5);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Descrição de isep.edom.gorgeous.Comment.Name
		/// </summary>
		[DslDesign::DisplayNameResource("isep.edom.gorgeous.Comment/Name.DisplayName", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("isep.edom.gorgeous.Comment/Name.Description", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("49cdf8c7-9711-456e-ac72-1c64f84bfaa5")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Comment.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<Comment, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Comment.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Comment.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Comment element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Comment element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Model opposite domain role accessor
		/// <summary>
		/// Gets or sets Model.
		/// Descrição de isep.edom.gorgeous.ModelTemComment.Comment
		/// </summary>
		public virtual Model Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::isep.edom.gorgeous.ModelTemComment.CommentDomainRoleId) as Model;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::isep.edom.gorgeous.ModelTemComment.CommentDomainRoleId, value);
			}
		}
		#endregion
		#region User opposite domain role accessor
		
		/// <summary>
		/// Gets a list of User.
		/// Descrição de isep.edom.gorgeous.CommentReferênciasUser.Comment
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<User> User
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<User>, User>(global::isep.edom.gorgeous.CommentReferênciasUser.CommentDomainRoleId);
			}
		}
		#endregion
		#region Field opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Field.
		/// Descrição de isep.edom.gorgeous.CommentReferênciasField.Comment
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Field> Field
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Field>, Field>(global::isep.edom.gorgeous.CommentReferênciasField.CommentDomainRoleId);
			}
		}
		#endregion
		#region DestinoComment opposite domain role accessor
		
		/// <summary>
		/// Gets a list of DestinoComment.
		/// Descrição de isep.edom.gorgeous.CommentReferênciasDestinoComment.OrigemComment
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Comment> DestinoComment
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Comment>, Comment>(global::isep.edom.gorgeous.CommentReferênciasDestinoComment.OrigemCommentDomainRoleId);
			}
		}
		#endregion
		#region OrigemComment opposite domain role accessor
		
		/// <summary>
		/// Gets a list of OrigemComment.
		/// Descrição de isep.edom.gorgeous.CommentReferênciasDestinoComment.DestinoComment
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Comment> OrigemComment
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Comment>, Comment>(global::isep.edom.gorgeous.CommentReferênciasDestinoComment.DestinoCommentDomainRoleId);
			}
		}
		#endregion
		#region ReviewComment opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ReviewComment.
		/// Descrição de isep.edom.gorgeous.CommentReferênciasReviewComment.Comment
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ReviewComment> ReviewComment
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ReviewComment>, ReviewComment>(global::isep.edom.gorgeous.CommentReferênciasReviewComment.CommentDomainRoleId);
			}
		}
		#endregion
		#region Process opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Process.
		/// Descrição de isep.edom.gorgeous.CommentReferênciasProcess.Comment
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Process> Process
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Process>, Process>(global::isep.edom.gorgeous.CommentReferênciasProcess.CommentDomainRoleId);
			}
		}
		#endregion
	}
}
namespace isep.edom.gorgeous
{
	/// <summary>
	/// DomainClass Field
	/// Descrição de isep.edom.gorgeous.Field
	/// </summary>
	[DslDesign::DisplayNameResource("isep.edom.gorgeous.Field.DisplayName", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("isep.edom.gorgeous.Field.Description", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::isep.edom.gorgeous.gorgeousDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("fb58565d-96d7-4a39-a472-891612615ff4")]
	public partial class Field : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Field domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xfb58565d, 0x96d7, 0x4a39, 0xa4, 0x72, 0x89, 0x16, 0x12, 0x61, 0x5f, 0xf4);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Field(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Field(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x4b1ba424, 0xf371, 0x4015, 0x8e, 0xdc, 0xc7, 0xe7, 0xfc, 0x51, 0x13, 0xdf);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Descrição de isep.edom.gorgeous.Field.Name
		/// </summary>
		[DslDesign::DisplayNameResource("isep.edom.gorgeous.Field/Name.DisplayName", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("isep.edom.gorgeous.Field/Name.Description", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("4b1ba424-f371-4015-8edc-c7e7fc5113df")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Field.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<Field, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Field.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Field.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Field element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Field element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Type domain property code
		
		/// <summary>
		/// Type domain property Id.
		/// </summary>
		public static readonly global::System.Guid TypeDomainPropertyId = new global::System.Guid(0x7d6a1a78, 0x75da, 0x4800, 0xbe, 0x69, 0x94, 0xb6, 0x23, 0x34, 0x5b, 0xa6);
		
		/// <summary>
		/// Storage for Type
		/// </summary>
		private global::System.String typePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Type domain property.
		/// Descrição de isep.edom.gorgeous.Field.Type
		/// </summary>
		[DslDesign::DisplayNameResource("isep.edom.gorgeous.Field/Type.DisplayName", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("isep.edom.gorgeous.Field/Type.Description", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("7d6a1a78-75da-4800-be69-94b623345ba6")]
		public global::System.String Type
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return typePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Field.Type domain property.
		/// </summary>
		internal sealed partial class TypePropertyHandler : DslModeling::DomainPropertyValueHandler<Field, global::System.String>
		{
			private TypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Field.Type domain property value handler.
			/// </summary>
			public static readonly TypePropertyHandler Instance = new TypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Field.Type domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Field element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.typePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Field element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.typePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Model opposite domain role accessor
		/// <summary>
		/// Gets or sets Model.
		/// Descrição de isep.edom.gorgeous.ModelTemField.Field
		/// </summary>
		public virtual Model Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::isep.edom.gorgeous.ModelTemField.FieldDomainRoleId) as Model;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::isep.edom.gorgeous.ModelTemField.FieldDomainRoleId, value);
			}
		}
		#endregion
		#region Comment opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Comment.
		/// Descrição de isep.edom.gorgeous.CommentReferênciasField.Field
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Comment> Comment
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Comment>, Comment>(global::isep.edom.gorgeous.CommentReferênciasField.FieldDomainRoleId);
			}
		}
		#endregion
		#region Review opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Review.
		/// Descrição de isep.edom.gorgeous.ReviewReferênciasField.Field
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Review> Review
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Review>, Review>(global::isep.edom.gorgeous.ReviewReferênciasField.FieldDomainRoleId);
			}
		}
		#endregion
		#region Subject opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Subject.
		/// Descrição de isep.edom.gorgeous.SubjectReferênciasField.Field
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Subject> Subject
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Subject>, Subject>(global::isep.edom.gorgeous.SubjectReferênciasField.FieldDomainRoleId);
			}
		}
		#endregion
		#region User opposite domain role accessor
		
		/// <summary>
		/// Gets a list of User.
		/// Descrição de isep.edom.gorgeous.UserReferênciasField.Field
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<User> User
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<User>, User>(global::isep.edom.gorgeous.UserReferênciasField.FieldDomainRoleId);
			}
		}
		#endregion
		#region ReviewComment opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ReviewComment.
		/// Descrição de isep.edom.gorgeous.ReviewCommentReferênciasField.Field
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ReviewComment> ReviewComment
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ReviewComment>, ReviewComment>(global::isep.edom.gorgeous.ReviewCommentReferênciasField.FieldDomainRoleId);
			}
		}
		#endregion
		#region Node opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Node.
		/// Descrição de isep.edom.gorgeous.NodeReferênciasField.Field
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Node> Node
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Node>, Node>(global::isep.edom.gorgeous.NodeReferênciasField.FieldDomainRoleId);
			}
		}
		#endregion
	}
}
namespace isep.edom.gorgeous
{
	/// <summary>
	/// DomainClass ReviewComment
	/// Descrição de isep.edom.gorgeous.ReviewComment
	/// </summary>
	[DslDesign::DisplayNameResource("isep.edom.gorgeous.ReviewComment.DisplayName", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("isep.edom.gorgeous.ReviewComment.Description", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::isep.edom.gorgeous.gorgeousDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("f3eafc1d-56c5-4bfa-8cd9-bc339446f17c")]
	public partial class ReviewComment : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ReviewComment domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xf3eafc1d, 0x56c5, 0x4bfa, 0x8c, 0xd9, 0xbc, 0x33, 0x94, 0x46, 0xf1, 0x7c);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ReviewComment(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ReviewComment(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0xb06a4dd9, 0xa3bd, 0x4550, 0x94, 0x40, 0xf6, 0x18, 0xff, 0xa0, 0xd2, 0xa3);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Descrição de isep.edom.gorgeous.ReviewComment.Name
		/// </summary>
		[DslDesign::DisplayNameResource("isep.edom.gorgeous.ReviewComment/Name.DisplayName", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("isep.edom.gorgeous.ReviewComment/Name.Description", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("b06a4dd9-a3bd-4550-9440-f618ffa0d2a3")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ReviewComment.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<ReviewComment, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ReviewComment.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ReviewComment.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ReviewComment element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ReviewComment element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Model opposite domain role accessor
		/// <summary>
		/// Gets or sets Model.
		/// Descrição de isep.edom.gorgeous.ModelTemReviewComment.ReviewComment
		/// </summary>
		public virtual Model Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::isep.edom.gorgeous.ModelTemReviewComment.ReviewCommentDomainRoleId) as Model;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::isep.edom.gorgeous.ModelTemReviewComment.ReviewCommentDomainRoleId, value);
			}
		}
		#endregion
		#region Field opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Field.
		/// Descrição de isep.edom.gorgeous.ReviewCommentReferênciasField.ReviewComment
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Field> Field
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Field>, Field>(global::isep.edom.gorgeous.ReviewCommentReferênciasField.ReviewCommentDomainRoleId);
			}
		}
		#endregion
		#region Subject opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Subject.
		/// Descrição de isep.edom.gorgeous.SubjectReferênciasReviewComment.ReviewComment
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Subject> Subject
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Subject>, Subject>(global::isep.edom.gorgeous.SubjectReferênciasReviewComment.ReviewCommentDomainRoleId);
			}
		}
		#endregion
		#region Review opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Review.
		/// Descrição de isep.edom.gorgeous.ReviewReferênciasReviewComment.ReviewComment
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Review> Review
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Review>, Review>(global::isep.edom.gorgeous.ReviewReferênciasReviewComment.ReviewCommentDomainRoleId);
			}
		}
		#endregion
		#region Comment opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Comment.
		/// Descrição de isep.edom.gorgeous.CommentReferênciasReviewComment.ReviewComment
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Comment> Comment
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Comment>, Comment>(global::isep.edom.gorgeous.CommentReferênciasReviewComment.ReviewCommentDomainRoleId);
			}
		}
		#endregion
	}
}
namespace isep.edom.gorgeous
{
	/// <summary>
	/// DomainClass Process
	/// Descrição de isep.edom.gorgeous.Process
	/// </summary>
	[DslDesign::DisplayNameResource("isep.edom.gorgeous.Process.DisplayName", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("isep.edom.gorgeous.Process.Description", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::isep.edom.gorgeous.gorgeousDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("a9f43960-c7d8-49e4-a1e1-699362619915")]
	public partial class Process : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Process domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa9f43960, 0xc7d8, 0x49e4, 0xa1, 0xe1, 0x69, 0x93, 0x62, 0x61, 0x99, 0x15);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Process(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Process(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x5aad2fcb, 0x67c3, 0x4021, 0x8f, 0x27, 0xf5, 0xb3, 0xd3, 0xff, 0x57, 0xda);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Descrição de isep.edom.gorgeous.Process.Name
		/// </summary>
		[DslDesign::DisplayNameResource("isep.edom.gorgeous.Process/Name.DisplayName", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("isep.edom.gorgeous.Process/Name.Description", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("5aad2fcb-67c3-4021-8f27-f5b3d3ff57da")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Process.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<Process, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Process.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Process.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Process element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Process element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Model opposite domain role accessor
		/// <summary>
		/// Gets or sets Model.
		/// Descrição de isep.edom.gorgeous.ModelTemProcess.Process
		/// </summary>
		public virtual Model Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::isep.edom.gorgeous.ModelTemProcess.ProcessDomainRoleId) as Model;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::isep.edom.gorgeous.ModelTemProcess.ProcessDomainRoleId, value);
			}
		}
		#endregion
		#region Comment opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Comment.
		/// Descrição de isep.edom.gorgeous.CommentReferênciasProcess.Process
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Comment> Comment
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Comment>, Comment>(global::isep.edom.gorgeous.CommentReferênciasProcess.ProcessDomainRoleId);
			}
		}
		#endregion
		#region Node opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Node.
		/// Descrição de isep.edom.gorgeous.ProcessReferênciasNode.Process
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Node> Node
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Node>, Node>(global::isep.edom.gorgeous.ProcessReferênciasNode.ProcessDomainRoleId);
			}
		}
		#endregion
	}
}
namespace isep.edom.gorgeous
{
	/// <summary>
	/// DomainClass Node
	/// Descrição de isep.edom.gorgeous.Node
	/// </summary>
	[DslDesign::DisplayNameResource("isep.edom.gorgeous.Node.DisplayName", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("isep.edom.gorgeous.Node.Description", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::isep.edom.gorgeous.gorgeousDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("edd13ff3-f17e-4fd1-9d60-b9bdc784bfc8")]
	public partial class Node : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Node domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xedd13ff3, 0xf17e, 0x4fd1, 0x9d, 0x60, 0xb9, 0xbd, 0xc7, 0x84, 0xbf, 0xc8);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Node(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Node(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x0be2ae9a, 0xc9bf, 0x4559, 0x93, 0x85, 0xb4, 0x53, 0xae, 0x49, 0x8d, 0x6f);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Descrição de isep.edom.gorgeous.Node.Name
		/// </summary>
		[DslDesign::DisplayNameResource("isep.edom.gorgeous.Node/Name.DisplayName", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("isep.edom.gorgeous.Node/Name.Description", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("0be2ae9a-c9bf-4559-9385-b453ae498d6f")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Node.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<Node, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Node.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Node.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Node element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Node element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Model opposite domain role accessor
		/// <summary>
		/// Gets or sets Model.
		/// Descrição de isep.edom.gorgeous.ModelTemNode.Node
		/// </summary>
		public virtual Model Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::isep.edom.gorgeous.ModelTemNode.NodeDomainRoleId) as Model;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::isep.edom.gorgeous.ModelTemNode.NodeDomainRoleId, value);
			}
		}
		#endregion
		#region Process opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Process.
		/// Descrição de isep.edom.gorgeous.ProcessReferênciasNode.Node
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Process> Process
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Process>, Process>(global::isep.edom.gorgeous.ProcessReferênciasNode.NodeDomainRoleId);
			}
		}
		#endregion
		#region Field opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Field.
		/// Descrição de isep.edom.gorgeous.NodeReferênciasField.Node
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Field> Field
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Field>, Field>(global::isep.edom.gorgeous.NodeReferênciasField.NodeDomainRoleId);
			}
		}
		#endregion
		#region Automatic opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Automatic.
		/// Descrição de isep.edom.gorgeous.AutomaticReferênciasNode.Node
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Automatic> Automatic
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Automatic>, Automatic>(global::isep.edom.gorgeous.AutomaticReferênciasNode.NodeDomainRoleId);
			}
		}
		#endregion
		#region Manual opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Manual.
		/// Descrição de isep.edom.gorgeous.ManualReferênciasNode.Node
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Manual> Manual
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Manual>, Manual>(global::isep.edom.gorgeous.ManualReferênciasNode.NodeDomainRoleId);
			}
		}
		#endregion
	}
}
namespace isep.edom.gorgeous
{
	/// <summary>
	/// DomainClass Automatic
	/// Descrição de isep.edom.gorgeous.Automatic
	/// </summary>
	[DslDesign::DisplayNameResource("isep.edom.gorgeous.Automatic.DisplayName", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("isep.edom.gorgeous.Automatic.Description", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::isep.edom.gorgeous.gorgeousDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("07eb8441-321c-4b5e-b603-e75d77036eb5")]
	public partial class Automatic : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Automatic domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x07eb8441, 0x321c, 0x4b5e, 0xb6, 0x03, 0xe7, 0x5d, 0x77, 0x03, 0x6e, 0xb5);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Automatic(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Automatic(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Model opposite domain role accessor
		/// <summary>
		/// Gets or sets Model.
		/// Descrição de isep.edom.gorgeous.ModelTemAutomatic.Automatic
		/// </summary>
		public virtual Model Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::isep.edom.gorgeous.ModelTemAutomatic.AutomaticDomainRoleId) as Model;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::isep.edom.gorgeous.ModelTemAutomatic.AutomaticDomainRoleId, value);
			}
		}
		#endregion
		#region Node opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Node.
		/// Descrição de isep.edom.gorgeous.AutomaticReferênciasNode.Automatic
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Node> Node
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Node>, Node>(global::isep.edom.gorgeous.AutomaticReferênciasNode.AutomaticDomainRoleId);
			}
		}
		#endregion
	}
}
namespace isep.edom.gorgeous
{
	/// <summary>
	/// DomainClass Manual
	/// Descrição de isep.edom.gorgeous.Manual
	/// </summary>
	[DslDesign::DisplayNameResource("isep.edom.gorgeous.Manual.DisplayName", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("isep.edom.gorgeous.Manual.Description", typeof(global::isep.edom.gorgeous.gorgeousDomainModel), "isep.edom.gorgeous.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::isep.edom.gorgeous.gorgeousDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("84a47b45-12e4-4f64-8e17-8d9131a895a4")]
	public partial class Manual : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Manual domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x84a47b45, 0x12e4, 0x4f64, 0x8e, 0x17, 0x8d, 0x91, 0x31, 0xa8, 0x95, 0xa4);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Manual(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Manual(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Model opposite domain role accessor
		/// <summary>
		/// Gets or sets Model.
		/// Descrição de isep.edom.gorgeous.ModelTemManual.Manual
		/// </summary>
		public virtual Model Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::isep.edom.gorgeous.ModelTemManual.ManualDomainRoleId) as Model;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::isep.edom.gorgeous.ModelTemManual.ManualDomainRoleId, value);
			}
		}
		#endregion
		#region Node opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Node.
		/// Descrição de isep.edom.gorgeous.ManualReferênciasNode.Manual
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Node> Node
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Node>, Node>(global::isep.edom.gorgeous.ManualReferênciasNode.ManualDomainRoleId);
			}
		}
		#endregion
	}
}
